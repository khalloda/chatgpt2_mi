==================== HIERARCHY ====================
.gitattributes
.github/workflows/code-dump.yml
.gitignore
app/controllers/adjustmentscontroller.php
app/controllers/authcontroller.php
app/controllers/categoriescontroller.php
app/controllers/customerscontroller.php
app/controllers/errorcontroller.php
app/controllers/homecontroller.php
app/controllers/invoicescontroller.php
app/controllers/makescontroller.php
app/controllers/modelscontroller.php
app/controllers/notescontroller.php
app/controllers/orderscontroller.php
app/controllers/paymentscontroller.php
app/controllers/productscontroller.php
app/controllers/purchaseinvoicescontroller.php
app/controllers/purchaseorderscontroller.php
app/controllers/purchasereturnscontroller.php
app/controllers/quotescontroller.php
app/controllers/receiptscontroller.php
app/controllers/reportscontroller.php
app/controllers/salesreturnscontroller.php
app/controllers/supplierpaymentscontroller.php
app/controllers/supplierscontroller.php
app/controllers/transferscontroller.php
app/controllers/usercontroller.php
app/controllers/warehousescontroller.php
app/core/bootstrap.php
app/core/controller.php
app/core/db.php
app/core/env.php
app/core/flash.php
app/core/helpers.php
app/core/logger.php
app/core/router.php
app/models/category.php
app/models/customer.php
app/models/invoice.php
app/models/make.php
app/models/note.php
app/models/product.php
app/models/purchaseinvoice.php
app/models/purchaseorder.php
app/models/purchasereturn.php
app/models/quote.php
app/models/salesorder.php
app/models/salesreturn.php
app/models/supplier.php
app/models/supplierpayment.php
app/models/vehiclemodel.php
app/models/warehouse.php
app/views/adjustments/form.php
app/views/adjustments/index.php
app/views/adjustments/print.php
app/views/adjustments/view.php
app/views/auth/login.php
app/views/categories/form.php
app/views/categories/index.php
app/views/customers/form.php
app/views/customers/index.php
app/views/customers/statement.php
app/views/customers/view.php
app/views/errors/404.php
app/views/home/index.php
app/views/invoices/index.php
app/views/invoices/print.php
app/views/invoices/view.php
app/views/layouts/main.php
app/views/makes/form.php
app/views/makes/index.php
app/views/models/form.php
app/views/models/index.php
app/views/orders/index.php
app/views/orders/print.php
app/views/orders/view.php
app/views/partials/notes - Copy.php
app/views/partials/notes.php
app/views/payments/create.php
app/views/payments/index.php
app/views/products/form.php
app/views/products/index.php
app/views/products/stock.php
app/views/purchaseinvoices/index.php
app/views/purchaseinvoices/print.php
app/views/purchaseinvoices/view.php
app/views/purchaseorders/form.php
app/views/purchaseorders/index.php
app/views/purchaseorders/print.php
app/views/purchaseorders/view.php
app/views/purchasereturns/print.php
app/views/quotes/form.php
app/views/quotes/index.php
app/views/quotes/print.php
app/views/quotes/view.php
app/views/receipts/print.php
app/views/reports/ap_aging.php
app/views/reports/ar_aging.php
app/views/reports/inventory_valuation.php
app/views/salesreturns/print.php
app/views/salesreturns/view.php
app/views/supplierpayments/index.php
app/views/suppliers/form.php
app/views/suppliers/index.php
app/views/suppliers/statement.php
app/views/suppliers/view.php
app/views/transfers/form.php
app/views/transfers/index.php
app/views/transfers/print.php
app/views/transfers/view.php
app/views/user/profile.php
app/views/warehouses/form.php
app/views/warehouses/index.php
config/.env.example
docs/PRD.md
docs/status_30Aug2025.md
docs/status_31Aug2025.md
public/db_ping.php
public/img/logo.png
public/index.php
public/web.config
readme.md
storage/logs/.gitkeep

==================== FILES & CONTENTS ====================
----- BEGIN FILE: .gitattributes -----
# Auto detect text files and perform LF normalization
* text=auto

----- END FILE: .gitattributes -----

----- BEGIN FILE: .github/workflows/code-dump.yml -----
name: Build Code Dump

on:
  push:
    branches: [ "feature/cogs-weighted-avg" ]   # change if your default branch is different
  workflow_dispatch: {}     # lets you run it manually from the Actions tab

jobs:
  dump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate code dump
        run: |
          set -euo pipefail
          OUTPUT="code_dump.txt"

          # Directories & file types to exclude (tweak as needed)
          EXCLUDE_DIRS=(" .git " " node_modules " " dist " " build " " vendor " ".venv" ".idea" ".vscode" "coverage")
          BINARY_EXT=("png" "jpg" "jpeg" "gif" "webp" "svg" "ico" "pdf" "zip" "gz" "tar" "7z" "rar" "exe" "dll" "so" "dylib" "class" "jar" "wasm" "ttf" "otf" "woff" "woff2" "psd" "ai" "mp3" "mp4" "mov" "avi" "heic" "bin")

          is_binary_ext () {
            local f="$1"; local ext="${f##*.}"; ext="${ext,,}"
            for e in "${BINARY_EXT[@]}"; do [[ "$ext" == "$e" ]] && return 0; done
            return 1
          }

          # Prefer git-tracked files (respects .gitignore)
          mapfile -t ALL_FILES < <(git ls-files)

          # Filter excluded directories
          FILTERED=()
          for p in "${ALL_FILES[@]}"; do
            skip=false
            for d in "${EXCLUDE_DIRS[@]}"; do
              case "$p" in
                "$d"/*|*/"$d"/*) skip=true; break;;
              esac
            done
            $skip || FILTERED+=("$p")
          done

          # Header + hierarchy
          echo "==================== HIERARCHY ====================" > "$OUTPUT"
          printf "%s\n" "${FILTERED[@]}" | sort >> "$OUTPUT"
          echo "" >> "$OUTPUT"
          echo "==================== FILES & CONTENTS ====================" >> "$OUTPUT"

          # Dump contents for each file
          for rel in "${FILTERED[@]}"; do
            [ -d "$rel" ] && continue
            if is_binary_ext "$rel"; then
              echo "----- BEGIN FILE: $rel (binary skipped) -----" >> "$OUTPUT"
              echo "----- END FILE: $rel -----" >> "$OUTPUT"
              echo "" >> "$OUTPUT"
              continue
            fi
            echo "----- BEGIN FILE: $rel -----" >> "$OUTPUT"
            cat "$rel" >> "$OUTPUT"
            echo "" >> "$OUTPUT"
            echo "----- END FILE: $rel -----" >> "$OUTPUT"
            echo "" >> "$OUTPUT"
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: code_dump
          path: code_dump.txt

----- END FILE: .github/workflows/code-dump.yml -----

----- BEGIN FILE: .gitignore -----
/vendor/
/storage/logs/*.log
/config/.env
.DS_Store
Thumbs.db

----- END FILE: .gitignore -----

----- BEGIN FILE: app/controllers/adjustmentscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use PDO;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class AdjustmentsController extends Controller
{
    public function index(): void {
        require_auth();
        $pdo = DB::conn();
        $rows = $pdo->query("SELECT id, adj_no, warehouse_id, reason, created_at FROM stock_adjustments ORDER BY id DESC LIMIT 200")
                    ->fetchAll(PDO::FETCH_ASSOC) ?: [];
        $ws = $pdo->query("SELECT id,name FROM warehouses")->fetchAll(PDO::FETCH_KEY_PAIR) ?: [];
        foreach ($rows as &$r) { $r['warehouse_name'] = $ws[(int)$r['warehouse_id']] ?? ('#'.$r['warehouse_id']); }
        unset($r);
        $this->view('adjustments/index', ['items'=>$rows]);
    }

    public function create(): void {
        require_auth();
        $pdo = DB::conn();
        $warehouses = $pdo->query("SELECT id,name FROM warehouses ORDER BY name")->fetchAll(PDO::FETCH_ASSOC) ?: [];
        $products   = $pdo->query("SELECT id, code, name FROM products ORDER BY code, name")->fetchAll(PDO::FETCH_ASSOC) ?: [];
        $this->view('adjustments/form', ['warehouses'=>$warehouses, 'products'=>$products]);
    }

    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/adjustments'); }

        $wid   = (int)($_POST['warehouse_id'] ?? 0);
        $reason= $_POST['reason'] ?? 'count';
        $note  = trim((string)($_POST['note'] ?? ''));
        $pids  = $_POST['product_id'] ?? [];
        $qtys  = $_POST['qty_change'] ?? [];

        if ($wid<=0) { flash_set('error','Choose a warehouse.'); redirect('/adjustments/create'); }

        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            $pdo->prepare("INSERT INTO stock_adjustments (adj_no, warehouse_id, reason, note) VALUES ('',?,?,?)")
                ->execute([$wid,$reason,$note]);
            $adjId = (int)$pdo->lastInsertId();
            $adjNo = 'AD'.date('ymd').'-'.str_pad((string)$adjId, 4, '0', STR_PAD_LEFT);
            $pdo->prepare("UPDATE stock_adjustments SET adj_no=? WHERE id=?")->execute([$adjNo,$adjId]);

            $insItem = $pdo->prepare("INSERT INTO stock_adjustment_items (stock_adjustment_id, product_id, qty_change) VALUES (?,?,?)");

            for ($i=0, $n=max(count($pids),count($qtys)); $i<$n; $i++) {
                $pid = (int)($pids[$i] ?? 0);
                $chg = (int)($qtys[$i] ?? 0);
                if ($pid<=0 || $chg===0) continue;

                // 1) lock stock (composite key) and read avg_cost
                $st = $pdo->prepare("
                    SELECT qty_on_hand, qty_reserved, avg_cost
                      FROM product_stocks
                     WHERE product_id=? AND warehouse_id=?
                     FOR UPDATE
                ");
                $st->execute([$pid,$wid]);
                $row = $st->fetch(PDO::FETCH_ASSOC);
                $avg = (float)($row['avg_cost'] ?? 0.0);

                if ($chg < 0) {
                    // 2a) negative adjustment: ensure free qty then decrease on-hand
                    $on  = (int)($row['qty_on_hand'] ?? 0);
                    $res = (int)($row['qty_reserved'] ?? 0);
                    $free = $on - $res;
                    if (-$chg > $free) {
                        throw new \RuntimeException("Insufficient free stock to decrease product #{$pid}.");
                    }
                    $pdo->prepare("UPDATE product_stocks SET qty_on_hand = qty_on_hand + ? WHERE product_id=? AND warehouse_id=?")
                        ->execute([$chg, $pid, $wid]); // $chg negative
                } else {
                    // 2b) positive adjustment: ensure row exists; DO NOT change avg_cost (count-only adjustment)
                    if ($row) {
                        $pdo->prepare("UPDATE product_stocks SET qty_on_hand = qty_on_hand + ? WHERE product_id=? AND warehouse_id=?")
                            ->execute([$chg, $pid, $wid]);
                    } else {
                        $pdo->prepare("INSERT INTO product_stocks (product_id, warehouse_id, qty_on_hand, qty_reserved, avg_cost) VALUES (?,?,?,?,?)")
                            ->execute([$pid,$wid,$chg,0,0.0]);
                        $avg = 0.0; // new row has zero avg until next receipt establishes it
                    }
                }

                // 3) ledger: adjustment at current avg (value impact = qty_change * avg_cost)
                $pdo->prepare("
                    INSERT INTO inventory_ledger (product_id, warehouse_id, doc_type, doc_id, qty_delta, unit_cost, value_delta)
                    VALUES (?,?,?,?,?,?,?)
                ")->execute([$pid, $wid, 'adjustment', $adjId, $chg, $avg, $chg * $avg]);

                // 4) item row
                $insItem->execute([$adjId,$pid,$chg]);
            }

            $pdo->commit();
            flash_set('success',"Adjustment {$adjNo} saved.");
            redirect('/adjustments/show?id='.$adjId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Save failed: '.$e->getMessage());
            redirect('/adjustments/create');
        }
    }

    public function show(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        if ($id<=0) { redirect('/adjustments'); }

        $pdo = DB::conn();
        $st = $pdo->prepare("SELECT * FROM stock_adjustments WHERE id=? LIMIT 1");
        $st->execute([$id]);
        $a = $st->fetch(PDO::FETCH_ASSOC);
        if (!$a) { $this->view('errors/404',['message'=>'Adjustment not found']); return; }

        $items = $pdo->prepare("SELECT i.*, p.code AS product_code, p.name AS product_name
                                FROM stock_adjustment_items i
                                JOIN products p ON p.id=i.product_id
                                WHERE i.stock_adjustment_id=? ORDER BY i.id");
        $items->execute([$id]);
        $rows = $items->fetchAll(PDO::FETCH_ASSOC) ?: [];

        $ws = $pdo->query("SELECT id,name FROM warehouses")->fetchAll(PDO::FETCH_KEY_PAIR) ?: [];
        $a['warehouse_name'] = $ws[(int)$a['warehouse_id']] ?? ('#'.$a['warehouse_id']);

        $this->view('adjustments/view', ['a'=>$a,'items'=>$rows]);
    }

    public function printnote(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        if ($id<=0) { redirect('/adjustments'); }
        $pdo = DB::conn();

        $st = $pdo->prepare("SELECT * FROM stock_adjustments WHERE id=? LIMIT 1");
        $st->execute([$id]);
        $a = $st->fetch(PDO::FETCH_ASSOC);
        if (!$a) { $this->view('errors/404',['message'=>'Adjustment not found']); return; }

        $items = $pdo->prepare("SELECT i.*, p.code AS product_code, p.name AS product_name
                                FROM stock_adjustment_items i
                                JOIN products p ON p.id=i.product_id
                                WHERE i.stock_adjustment_id=? ORDER BY i.id");
        $items->execute([$id]);
        $rows = $items->fetchAll(PDO::FETCH_ASSOC) ?: [];

        $ws = $pdo->query("SELECT id,name FROM warehouses")->fetchAll(PDO::FETCH_KEY_PAIR) ?: [];
        $a['warehouse_name'] = $ws[(int)$a['warehouse_id']] ?? ('#'.$a['warehouse_id']);

        $this->view('adjustments/print', ['a'=>$a,'items'=>$rows]);
    }
}

----- END FILE: app/controllers/adjustmentscontroller.php -----

----- BEGIN FILE: app/controllers/authcontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use function App\Core\verify_csrf_post;
use function App\Core\csrf_token;
use App\Core\Logger;

final class AuthController extends Controller
{
    public function loginform(): void
    {
        // just show the form
        $this->view('auth/login', []);
    }

    public function login(): void
    {
        if (!verify_csrf_post()) {
            http_response_code(419);
            $this->view('auth/login', ['error' => 'Invalid session token. Please try again.']);
            return;
        }

        $email = trim((string)($_POST['email'] ?? ''));
        $pass  = (string)($_POST['password'] ?? '');

        if ($email === '' || $pass === '') {
            $this->view('auth/login', ['error' => 'Email and password are required.']);
            return;
        }

        try {
            $stmt = DB::conn()->prepare('SELECT id, email, password_hash, role FROM users WHERE email = ? LIMIT 1');
            $stmt->execute([$email]);
            $user = $stmt->fetch();

            if (!$user || !password_verify($pass, $user['password_hash'])) {
                Logger::info('Login failed', ['email' => $email, 'ip' => $_SERVER['REMOTE_ADDR'] ?? '']);
                $this->view('auth/login', ['error' => 'Invalid credentials.']);
                return;
            }

            session_regenerate_id(true);
            $_SESSION['user'] = [
                'id'    => (int)$user['id'],
                'email' => $user['email'],
                'role'  => $user['role'],
            ];
            Logger::info('Login success', ['user_id' => (int)$user['id'], 'email' => $user['email']]);

            header('Location: /');
            exit;
        } catch (\Throwable $e) {
            Logger::error('Login exception', ['err' => $e->getMessage()]);
            $this->view('auth/login', ['error' => 'Server error, please try again.']);
        }
    }

    public function logout(): void
    {
        if (!verify_csrf_post()) {
            http_response_code(419);
            $this->view('auth/login', ['error' => 'Invalid session token.']);
            return;
        }
        $uid = $_SESSION['user']['id'] ?? null;
        $_SESSION = [];
        if (ini_get('session.use_cookies')) {
            $params = session_get_cookie_params();
            setcookie(session_name(), '', time() - 42000, $params['path'], $params['domain'] ?? '', $params['secure'], $params['httponly']);
        }
        session_destroy();
        if ($uid) { Logger::info('Logout', ['user_id' => $uid]); }
        header('Location: /login');
        exit;
    }
}

----- END FILE: app/controllers/authcontroller.php -----

----- BEGIN FILE: app/controllers/categoriescontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Models\Category;
use App\Models\Note;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class CategoriesController extends Controller
{
    public function index(): void
    {
        require_auth();
        $list = Category::all();
        $this->view('categories/index', ['items' => $list]);
    }

    public function create(): void
    {
        require_auth();
        $options = Category::options();
        $this->view('categories/form', ['mode' => 'create', 'options' => $options, 'item' => null]);
    }

    public function store(): void
    {
        require_auth();
        if (!verify_csrf_post()) {
            flash_set('error', 'Invalid session token.');
            redirect('/categories');
        }

        $parentId = $_POST['parent_id'] === '' ? null : (int)$_POST['parent_id'];
        $name = trim((string)($_POST['name'] ?? ''));
        $slug = trim((string)($_POST['slug'] ?? ''));

        if ($name === '' || $slug === '') {
            flash_set('error', 'Name and slug are required.');
            redirect('/categories/create');
        }

        try {
            Category::create($parentId, $name, $slug);
            flash_set('success', 'Category created.');
            redirect('/categories');
        } catch (\Throwable $e) {
            flash_set('error', 'Error: ' . $e->getMessage());
            redirect('/categories/create');
        }
    }

    public function edit(): void
    {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $item = Category::find($id);
        if (!$item) {
            flash_set('error', 'Category not found.');
            redirect('/categories');
        }
        $options = Category::options($id);
        $this->view('categories/form', ['mode' => 'edit', 'options' => $options, 'item' => $item,, 'notes'=> Note::for('category', (int)$it['id']]);
    }

    public function update(): void
    {
        require_auth();
        if (!verify_csrf_post()) {
            flash_set('error', 'Invalid session token.');
            redirect('/categories');
        }

        $id = (int)($_POST['id'] ?? 0);
        $parentId = $_POST['parent_id'] === '' ? null : (int)$_POST['parent_id'];
        $name = trim((string)($_POST['name'] ?? ''));
        $slug = trim((string)($_POST['slug'] ?? ''));

        if ($id <= 0 || $name === '' || $slug === '') {
            flash_set('error', 'Invalid form data.');
            redirect('/categories');
        }

        try {
            Category::update($id, $parentId, $name, $slug);
            flash_set('success', 'Category updated.');
            redirect('/categories');
        } catch (\Throwable $e) {
            flash_set('error', 'Error: ' . $e->getMessage());
            redirect('/categories/edit?id=' . $id);
        }
    }

    public function destroy(): void
    {
        require_auth();
        if (!verify_csrf_post()) {
            flash_set('error', 'Invalid session token.');
            redirect('/categories');
        }

        $id = (int)($_POST['id'] ?? 0);
        if ($id <= 0) {
            flash_set('error', 'Invalid category id.');
            redirect('/categories');
        }

        if (!Category::delete($id)) {
            flash_set('error', 'Cannot delete: category has sub-categories.');
            redirect('/categories');
        }

        flash_set('success', 'Category deleted.');
        redirect('/categories');
    }
}

----- END FILE: app/controllers/categoriescontroller.php -----

----- BEGIN FILE: app/controllers/customerscontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use App\Models\Customer;
use App\Models\Note;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class CustomersController extends Controller
{
    public function index(): void {
        require_auth();
        $this->view('customers/index', ['items' => Customer::all()]);
    }

    public function create(): void {
        require_auth();
        $this->view('customers/form', ['mode'=>'create','item'=>null]);
    }

    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/customers'); }
        $d = $this->r();
        if ($d['name']===''){ flash_set('error','Name is required.'); redirect('/customers/create'); }
        Customer::create($d);
        flash_set('success','Customer created.');
        redirect('/customers');
    }

    public function edit(): void {
        require_auth();
        $id=(int)($_GET['id']??0);
        $it=Customer::find($id);
        if(!$it){ flash_set('error','Not found.'); redirect('/customers'); }
        $this->view('customers/form',['mode'=>'edit','item'=>$it,'notes'=> Note::for('customer', (int)$it['id'])]);
    }

    public function update(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/customers'); }
        $id=(int)($_POST['id']??0);
        $d = $this->r();
        if($id<=0){ flash_set('error','Bad id.'); redirect('/customers'); }
        Customer::update($id,$d);
        flash_set('success','Customer updated.');
        redirect('/customers');
    }

    public function destroy(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/customers'); }
        $id=(int)($_POST['id']??0);
        if($id<=0){ flash_set('error','Bad id.'); redirect('/customers'); }
        if(!Customer::delete($id)){ flash_set('error','Cannot delete: has quotes.'); }
        else { flash_set('success','Customer deleted.'); }
        redirect('/customers');
    }

    private function r(): array {
        return [
            'name'=>trim((string)($_POST['name']??'')),
            'phone'=>trim((string)($_POST['phone']??'')),
            'email'=>trim((string)($_POST['email']??'')),
            'address'=>trim((string)($_POST['address']??'')),
        ];
    }

    private function tableExists(string $name): bool {
        $pdo = DB::conn();
        $st = $pdo->prepare("SELECT 1 FROM information_schema.TABLES WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = ? LIMIT 1");
        $st->execute([$name]);
        return (bool)$st->fetchColumn();
    }

    private function columnExists(string $table, string $col): bool {
        $pdo = DB::conn();
        $st = $pdo->prepare("SELECT 1 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = ? AND COLUMN_NAME = ? LIMIT 1");
        $st->execute([$table,$col]);
        return (bool)$st->fetchColumn();
    }

    public function show(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        if ($id<=0) { redirect('/customers'); }

        $pdo = DB::conn();

        // customer row
        $st = $pdo->prepare("SELECT * FROM customers WHERE id=? LIMIT 1");
        $st->execute([$id]);
        $customer = $st->fetch(\PDO::FETCH_ASSOC);
        if (!$customer) { $this->view('errors/404',['message'=>'Customer not found']); return; }

        // invoices (sales)
        $invNoCol = $this->columnExists('invoices','inv_no') ? 'inv_no' : 'id';
        $sqlInv = "SELECT id, {$invNoCol} AS inv_no, total, paid_amount, status, created_at
                   FROM invoices WHERE customer_id=? ORDER BY id DESC LIMIT 200";
        $st = $pdo->prepare($sqlInv); $st->execute([$id]);
        $invoices = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];

        // payments (join to invoices for this customer) - use invoice_payments
        $sqlPay = "SELECT p.id, p.paid_at, p.method, p.reference, p.amount,
                          i.id AS invoice_id, i.{$invNoCol} AS inv_no
                   FROM invoice_payments p
                   JOIN invoices i ON i.id = p.invoice_id
                   WHERE i.customer_id = ?
                   ORDER BY p.paid_at DESC, p.id DESC LIMIT 200";
        $st = $pdo->prepare($sqlPay); $st->execute([$id]);
        $payments = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];

        // quotes
        $quotes = [];
        if ($this->tableExists('quotes')) {
            $qNoCol = $this->columnExists('quotes','q_no') ? 'q_no' : ($this->columnExists('quotes','quote_no')?'quote_no':'id');
            $totalExpr = $this->columnExists('quotes','total') ? 'q.total' : "(SELECT COALESCE(SUM(line_total),0) FROM quote_items qi WHERE qi.quote_id=q.id)";
            $sqlQ = "SELECT q.id, q.created_at, {$qNoCol} AS q_no, {$totalExpr} AS total, COALESCE(q.status,'') AS status
                     FROM quotes q WHERE q.customer_id=? ORDER BY q.id DESC LIMIT 200";
            $st = $pdo->prepare($sqlQ); $st->execute([$id]);
            $quotes = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];
        }

        // orders (support 'orders' or 'sales_orders')
        $orders = [];
        $ordersTable = $this->tableExists('orders') ? 'orders' : ($this->tableExists('sales_orders') ? 'sales_orders' : null);
        if ($ordersTable) {
            $noCol = $this->columnExists($ordersTable,'so_no') ? 'so_no' :
                     ($this->columnExists($ordersTable,'order_no') ? 'order_no' : 'id');
            $totalExpr = $this->columnExists($ordersTable,'total') ? "o.total" :
                         "(SELECT COALESCE(SUM(line_total),0) FROM ".($ordersTable==='orders'?'order_items':'sales_order_items')." oi WHERE oi.".($ordersTable==='orders'?'order_id':'sales_order_id')."=o.id)";
            $custCol = $this->columnExists($ordersTable,'customer_id') ? 'customer_id' : 'client_id';
            $sqlO = "SELECT o.id, {$noCol} AS so_no, {$totalExpr} AS total,
                            COALESCE(o.status,'') AS status, o.created_at
                     FROM {$ordersTable} o
                     WHERE o.{$custCol} = ?
                     ORDER BY o.id DESC LIMIT 200";
            $st = $pdo->prepare($sqlO); $st->execute([$id]);
            $orders = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];
        }

        // quick AR totals (prepared + qualified to avoid ambiguity)
        $st = $pdo->prepare("SELECT COALESCE(SUM(i.total),0) FROM invoices i WHERE i.customer_id=?");
        $st->execute([$id]); $inv_total = (float)$st->fetchColumn();

        $st = $pdo->prepare("SELECT COALESCE(SUM(p.amount),0)
                             FROM invoice_payments p
                             JOIN invoices i ON i.id=p.invoice_id
                             WHERE i.customer_id=?");
        $st->execute([$id]); $pay_total = (float)$st->fetchColumn();

        $st = $pdo->prepare("SELECT COALESCE(SUM(sr.total),0)
                             FROM sales_returns sr
                             JOIN invoices i ON i.id=sr.sales_invoice_id
                             WHERE i.customer_id=?");
        $st->execute([$id]); $ret_total = (float)$st->fetchColumn();

        $ar_balance = max(0.0, $inv_total - $pay_total - $ret_total);

        $this->view('customers/view', [
            'customer'  => $customer,
            'quotes'    => $quotes,
            'orders'    => $orders,
            'invoices'  => $invoices,
            'payments'  => $payments,
            'ar_balance'=> $ar_balance,
            'inv_total' => $inv_total,
            'pay_total' => $pay_total,
            'ret_total' => $ret_total,
        ]);
    }

    public function statement(): void {
        require_auth();
        $id   = (int)($_GET['id'] ?? 0);
        $from = $_GET['from'] ?? date('Y-m-01');
        $to   = $_GET['to']   ?? date('Y-m-d');

        $pdo = DB::conn();
        $st = $pdo->prepare("SELECT * FROM customers WHERE id=? LIMIT 1");
        $st->execute([$id]);
        $customer = $st->fetch(\PDO::FETCH_ASSOC);
        if (!$customer) { $this->view('errors/404',['message'=>'Customer not found']); return; }

        // Opening AR before $from: invoices - payments - returns
        $sqlInv0 = "SELECT COALESCE(SUM(i.total),0) FROM invoices i WHERE i.customer_id=? AND i.created_at < ?";
        $sqlPay0 = "SELECT COALESCE(SUM(p.amount),0)
                    FROM invoice_payments p
                    JOIN invoices i ON i.id=p.invoice_id
                    WHERE i.customer_id=? AND p.paid_at < ?";
        $sqlRet0 = "SELECT COALESCE(SUM(sr.total),0)
                    FROM sales_returns sr
                    JOIN invoices i ON i.id=sr.sales_invoice_id
                    WHERE i.customer_id=? AND sr.created_at < ?";

        $stX = $pdo->prepare($sqlInv0); $stX->execute([$id,$from]); $inv0 = (float)$stX->fetchColumn();
        $stX = $pdo->prepare($sqlPay0); $stX->execute([$id,$from]); $pay0 = (float)$stX->fetchColumn();
        $stX = $pdo->prepare($sqlRet0); $stX->execute([$id,$from]); $ret0 = (float)$stX->fetchColumn();
        $opening = $inv0 - $pay0 - $ret0;

        // Movements within range
        $invNoCol = $this->columnExists('invoices','inv_no') ? 'inv_no' : 'id';

        $q1 = $pdo->prepare("SELECT i.created_at AS txn_date, 'invoice' AS kind, i.{$invNoCol} AS ref_no,
                                    i.total AS debit, 0 AS credit, i.id AS ref_id
                             FROM invoices i
                             WHERE i.customer_id=? AND DATE(i.created_at) BETWEEN ? AND ?");
        $q1->execute([$id,$from,$to]); $invoices = $q1->fetchAll(\PDO::FETCH_ASSOC) ?: [];

        $q2 = $pdo->prepare("SELECT p.paid_at AS txn_date, 'payment' AS kind, p.reference AS ref_no,
                                    0 AS debit, p.amount AS credit, p.id AS ref_id
                             FROM invoice_payments p
                             JOIN invoices i ON i.id=p.invoice_id
                             WHERE i.customer_id=? AND DATE(p.paid_at) BETWEEN ? AND ?");
        $q2->execute([$id,$from,$to]); $payments = $q2->fetchAll(\PDO::FETCH_ASSOC) ?: [];

        $q3 = $pdo->prepare("SELECT sr.created_at AS txn_date, 'return' AS kind, sr.sr_no AS ref_no,
                                    0 AS debit, sr.total AS credit, sr.id AS ref_id
                             FROM sales_returns sr
                             JOIN invoices i ON i.id=sr.sales_invoice_id
                             WHERE i.customer_id=? AND DATE(sr.created_at) BETWEEN ? AND ?");
        $q3->execute([$id,$from,$to]); $returns = $q3->fetchAll(\PDO::FETCH_ASSOC) ?: [];

        $rows = array_merge($invoices,$payments,$returns);
        usort($rows, function($a,$b){
            if ($a['txn_date'] === $b['txn_date']) return $a['kind'] <=> $b['kind'];
            return strcmp($a['txn_date'],$b['txn_date']);
        });

        $running = $opening;
        foreach ($rows as &$r) {
            $running += (float)$r['debit'] - (float)$r['credit'];
            $r['running'] = $running;
        }
        unset($r);

        $this->view('customers/statement', [
            'customer'=>$customer,
            'from'=>$from,
            'to'=>$to,
            'opening'=>$opening,
            'rows'=>$rows,
            'closing'=>$running
        ]);
    }
}

----- END FILE: app/controllers/customerscontroller.php -----

----- BEGIN FILE: app/controllers/errorcontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;

final class ErrorController extends Controller
{
    public function notFound(): void
    {
        http_response_code(404);
        $this->view('errors/404', []);
    }
}

----- END FILE: app/controllers/errorcontroller.php -----

----- BEGIN FILE: app/controllers/homecontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use App\Core\Env;

final class HomeController extends Controller
{
    public function index(): void
    {
        $dbOk = false;
        $dbError = null;

        try {
            $dbOk = ((int) DB::conn()->query('SELECT 1')->fetchColumn() === 1);
        } catch (\Throwable $e) {
            $dbOk = false;
            $dbError = $e->getMessage(); // safe: no credentials
        }

        $this->view('home/index', [
            'db_ok'    => $dbOk,
            'db_error' => $dbError,
            'debug'    => Env::get('APP_DEBUG', 'false') === 'true',
        ]);
    }
}

----- END FILE: app/controllers/homecontroller.php -----

----- BEGIN FILE: app/controllers/invoicescontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Models\Invoice;
use App\Models\SalesOrder;
use App\Core\DB;
use App\Models\Note;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class InvoicesController extends Controller
{
    public function index(): void {
        require_auth();
        $this->view('invoices/index', ['items' => Invoice::all()]);
    }

    public function show(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $inv = Invoice::find($id);
        if (!$inv) { flash_set('error','Invoice not found.'); redirect('/invoices'); }
        $items = Invoice::items($id);
        $payments = Invoice::payments($id);
        $credits_total = \App\Models\SalesReturn::creditsTotalForInvoice($id);
        $returns = \App\Models\SalesReturn::returnsForInvoice($id);
        $ret_map = \App\Models\SalesReturn::returnedMapByInvoice($id);
        $this->view('invoices/view', [
            'i' => $inv,
            'items' => $items,
            'payments' => $payments,
            'credits_total' => $credits_total,
            'returns' => $returns,
            'ret_map' => $ret_map,
            'notes' => Note::for('sales_invoice', $id),
        ]);
    }

    // Create invoice from order (+ COGS + valued ledger)
    public function createfromorder(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/orders'); }
        $orderId = (int)($_POST['order_id'] ?? 0);

        // find order row
        $list = SalesOrder::all();
        $order = null; foreach ($list as $o) if ((int)$o['id'] === $orderId) { $order = $o; break; }
        if (!$order) { flash_set('error','Order not found.'); redirect('/orders'); }

        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            // 1) create invoice header
            $invNo = Invoice::nextNumber();
            $ins = $pdo->prepare("INSERT INTO invoices (inv_no, sales_order_id, customer_id, tax_rate, subtotal, tax_amount, total, status, cogs_total)
                                  VALUES (?,?,?,?,?,?,?, 'unpaid', 0.00)");
            $ins->execute([
                $invNo, $orderId, (int)$order['customer_id'],
                (float)$order['tax_rate'], (float)$order['subtotal'],
                (float)$order['tax_amount'], (float)$order['total']
            ]);
            $invId = (int)$pdo->lastInsertId();

            // 2) copy items from order to invoice_items
            $oi = SalesOrder::items($orderId);
            $insItem = $pdo->prepare("INSERT INTO invoice_items (invoice_id, product_id, warehouse_id, qty, price, line_total)
                                      VALUES (?,?,?,?,?,?)");
            foreach ($oi as $it) {
                $insItem->execute([
                    $invId, (int)$it['product_id'], (int)$it['warehouse_id'],
                    (int)$it['qty'], (float)$it['price'], (float)$it['line_total']
                ]);
            }

            // 3) COGS + valued inventory movements (SALE) per item
            $cogsTotal = 0.0;

            $stSel = $pdo->prepare("
                SELECT qty_on_hand, qty_reserved, avg_cost
                  FROM product_stocks
                 WHERE product_id=? AND warehouse_id=?
                 FOR UPDATE
            ");

            $stUpd = $pdo->prepare("
                UPDATE product_stocks
                   SET qty_on_hand = qty_on_hand - ?,
                       qty_reserved = GREATEST(qty_reserved - ?, 0)
                 WHERE product_id=? AND warehouse_id=?
            ");

            $insLedger = $pdo->prepare("
                INSERT INTO inventory_ledger
                    (product_id, warehouse_id, doc_type, doc_id, qty_delta, unit_cost, value_delta)
                VALUES (?,?,?,?,?,?,?)
            ");

            $insCogs = $pdo->prepare("
                INSERT INTO cogs_entries
                    (invoice_id, product_id, warehouse_id, qty, unit_cost, line_cost)
                VALUES (?,?,?,?,?,?)
            ");

            foreach ($oi as $it) {
                $productId   = (int)$it['product_id'];
                $warehouseId = (int)$it['warehouse_id'];
                $qty         = (int)$it['qty'];
                if ($productId<=0 || $warehouseId<=0 || $qty<=0) { continue; }

                // lock stock row
                $stSel->execute([$productId, $warehouseId]);
                $row = $stSel->fetch(\PDO::FETCH_ASSOC);
                if (!$row) {
                    throw new \RuntimeException("No stock in warehouse for product #{$productId}.");
                }

                $on   = (int)$row['qty_on_hand'];
                $res  = (int)$row['qty_reserved'];
                $free = $on - $res;
                $avg  = (float)($row['avg_cost'] ?? 0.0);

                // allow if reserved covers the qty, else require free >= qty
                if ($res >= $qty) {
                    // OK: consume reservation
                } else {
                    if ($qty > $free) {
                        throw new \RuntimeException("Insufficient stock to fulfill invoice for product #{$productId}.");
                    }
                }

                // decrement on-hand and release reservation (up to qty)
                $stUpd->execute([$qty, $qty, $productId, $warehouseId]);

                // ledger: sale at current avg
                $insLedger->execute([$productId, $warehouseId, 'sale', $invId, -$qty, $avg, -$qty * $avg]);

                // cogs entry
                $lineCost = $qty * $avg;
                $insCogs->execute([$invId, $productId, $warehouseId, $qty, $avg, $lineCost]);
                $cogsTotal += $lineCost;
            }

            // 4) write cogs_total on invoice
            $pdo->prepare("UPDATE invoices SET cogs_total=? WHERE id=?")->execute([$cogsTotal, $invId]);

            $pdo->commit();
            flash_set('success', 'Invoice '.$invNo.' created.');
            redirect('/invoices/show?id='.$invId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Create invoice failed: '.$e->getMessage());
            redirect('/orders/show?id='.$orderId);
        }
    }

    // Print page
    public function printpage(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $includeNotes = isset($_GET['include_notes']) && $_GET['include_notes'] === '1';
        $inv = Invoice::find($id);
        if (!$inv) { flash_set('error','Invoice not found.'); redirect('/invoices'); }
        $items = Invoice::items($id);
        $publicNotes = $includeNotes ? Note::publicFor('sales_invoice', $id) : [];
        $this->view_raw('invoices/print', [
            'i' => $inv,
            'items' => $items,
            'public_notes' => $publicNotes,
            'include_notes' => $includeNotes,
        ]);
    }
}

----- END FILE: app/controllers/invoicescontroller.php -----

----- BEGIN FILE: app/controllers/makescontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Models\Make;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class MakesController extends Controller
{
    public function index(): void
    {
        require_auth();
        $items = Make::all();
        $this->view('makes/index', ['items' => $items]);
    }

    public function create(): void
    {
        require_auth();
        $this->view('makes/form', ['mode' => 'create', 'item' => null]);
    }

    public function store(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error', 'Invalid session.'); redirect('/makes'); }
        $name = trim((string)($_POST['name'] ?? ''));
        $slug = trim((string)($_POST['slug'] ?? ''));
        if ($name === '' || $slug === '') { flash_set('error', 'Name and slug are required.'); redirect('/makes/create'); }

        try { Make::create($name, $slug); flash_set('success', 'Make created.'); }
        catch (\Throwable $e) { flash_set('error', 'Error: ' . $e->getMessage()); }
        redirect('/makes');
    }

    public function edit(): void
    {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $item = Make::find($id);
        if (!$item) { flash_set('error', 'Make not found.'); redirect('/makes'); }
        $this->view('makes/form', ['mode' => 'edit', 'item' => $item]);
    }

    public function update(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error', 'Invalid session.'); redirect('/makes'); }
        $id = (int)($_POST['id'] ?? 0);
        $name = trim((string)($_POST['name'] ?? ''));
        $slug = trim((string)($_POST['slug'] ?? ''));
        if ($id <= 0 || $name === '' || $slug === '') { flash_set('error', 'Invalid form data.'); redirect('/makes'); }

        try { Make::update($id, $name, $slug); flash_set('success', 'Make updated.'); }
        catch (\Throwable $e) { flash_set('error', 'Error: ' . $e->getMessage()); redirect('/makes/edit?id='.(int)$id); }
        redirect('/makes');
    }

    public function destroy(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error', 'Invalid session.'); redirect('/makes'); }
        $id = (int)($_POST['id'] ?? 0);
        if ($id <= 0) { flash_set('error', 'Invalid id.'); redirect('/makes'); }

        if (!Make::delete($id)) { flash_set('error', 'Cannot delete: there are models under this make.'); }
        else { flash_set('success', 'Make deleted.'); }
        redirect('/makes');
    }
}

----- END FILE: app/controllers/makescontroller.php -----

----- BEGIN FILE: app/controllers/modelscontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Models\VehicleModel;
use App\Models\Make;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class ModelsController extends Controller
{
    public function index(): void
    {
        require_auth();
        $makeId = isset($_GET['make_id']) ? (int)$_GET['make_id'] : null;
        $items = VehicleModel::all($makeId);
        $makes = Make::options();
        $this->view('models/index', ['items' => $items, 'makes' => $makes, 'selected_make' => $makeId]);
    }

    public function create(): void
    {
        require_auth();
        $makes = Make::options();
        $this->view('models/form', ['mode' => 'create', 'item' => null, 'makes' => $makes]);
    }

    public function store(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error', 'Invalid session.'); redirect('/models'); }

        $makeId = (int)($_POST['make_id'] ?? 0);
        $name   = trim((string)($_POST['name'] ?? ''));
        $slug   = trim((string)($_POST['slug'] ?? ''));

        if ($makeId <= 0 || $name === '' || $slug === '') {
            flash_set('error', 'All fields are required.');
            redirect('/models/create');
        }

        try { VehicleModel::create($makeId, $name, $slug); flash_set('success', 'Model created.'); }
        catch (\Throwable $e) { flash_set('error', 'Error: ' . $e->getMessage()); redirect('/models/create'); }

        redirect('/models?make_id=' . $makeId);
    }

    public function edit(): void
    {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $item = VehicleModel::find($id);
        if (!$item) { flash_set('error', 'Model not found.'); redirect('/models'); }
        $makes = Make::options();
        $this->view('models/form', ['mode' => 'edit', 'item' => $item, 'makes' => $makes]);
    }

    public function update(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error', 'Invalid session.'); redirect('/models'); }

        $id     = (int)($_POST['id'] ?? 0);
        $makeId = (int)($_POST['make_id'] ?? 0);
        $name   = trim((string)($_POST['name'] ?? ''));
        $slug   = trim((string)($_POST['slug'] ?? ''));

        if ($id <= 0 || $makeId <= 0 || $name === '' || $slug === '') {
            flash_set('error', 'Invalid form data.');
            redirect('/models');
        }

        try { VehicleModel::update($id, $makeId, $name, $slug); flash_set('success', 'Model updated.'); }
        catch (\Throwable $e) { flash_set('error', 'Error: ' . $e->getMessage()); redirect('/models/edit?id='.(int)$id); }

        redirect('/models?make_id=' . $makeId);
    }

    public function destroy(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error', 'Invalid session.'); redirect('/models'); }

        $id = (int)($_POST['id'] ?? 0);
        if ($id <= 0) { flash_set('error', 'Invalid id.'); redirect('/models'); }

        // fetch to retain filter context (optional)
        $item = VehicleModel::find($id);
        $ok = VehicleModel::delete($id);
        if ($ok) flash_set('success', 'Model deleted.'); else flash_set('error', 'Delete failed.');
        $redirMake = $item['make_id'] ?? null;
        redirect('/models' . ($redirMake ? '?make_id=' . (int)$redirMake : ''));
    }
}

----- END FILE: app/controllers/modelscontroller.php -----

----- BEGIN FILE: app/controllers/notescontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Models\Note;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class NotesController extends Controller
{
    public function store(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/'); }

        $entityType = (string)($_POST['entity_type'] ?? '');
        $entityId   = (int)($_POST['entity_id'] ?? 0);
        $isPublic   = isset($_POST['is_public']) && $_POST['is_public'] ? 1 : 0;
        $body       = trim((string)($_POST['body'] ?? ''));
        $returnTo   = (string)($_POST['_return'] ?? '/');

        if ($entityType === '' || $entityId <= 0 || $body === '') {
            flash_set('error','Note text is required.');
            redirect($returnTo ?: '/');
        }

        // Try a few common session keys to get the email
        $email = (string)(
            $_SESSION['user_email']
            ?? ($_SESSION['auth_email'] ?? '')
            ?? ($_SESSION['user']['email'] ?? '')
            ?? 'system'
        );
        $userId = isset($_SESSION['user_id']) ? (int)$_SESSION['user_id'] : null;

        Note::create([
            'entity_type'   => $entityType,
            'entity_id'     => $entityId,
            'is_public'     => $isPublic,
            'body'          => $body,
            'created_by'    => $email,
            'created_by_id' => $userId,
        ]);

        flash_set('success','Note added.');
        redirect($returnTo ?: '/');
    }

    public function destroy(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/'); }

        $id = (int)($_POST['id'] ?? 0);
        $returnTo = (string)($_POST['_return'] ?? '/');
        if ($id > 0) {
            Note::delete($id);
            flash_set('success','Note deleted.');
        }
        redirect($returnTo ?: '/');
    }
	
	public function update(): void
{
    require_auth();
    if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/'); }

    $id       = (int)($_POST['id'] ?? 0);
    $body     = trim((string)($_POST['body'] ?? ''));
    $isPublic = isset($_POST['is_public']) && $_POST['is_public'] ? 1 : 0;
    $returnTo = (string)($_POST['_return'] ?? '/');

    if ($id <= 0 || $body === '') {
        flash_set('error','Note text is required.');
        redirect($returnTo ?: '/');
    }

    Note::update($id, $body, (bool)$isPublic);
    flash_set('success','Note updated.');
    redirect($returnTo ?: '/');
}
	
}

----- END FILE: app/controllers/notescontroller.php -----

----- BEGIN FILE: app/controllers/orderscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Models\SalesOrder;
use App\Models\Note;
use function App\Core\require_auth;
use function App\Core\redirect;

final class OrdersController extends Controller
{
  public function index(): void {
    require_auth();
    $this->view('orders/index', ['items'=>SalesOrder::all()]);
  }

  public function show(): void {
    require_auth();
    $id=(int)($_GET['id']??0);
    $items = SalesOrder::items($id);
    $list  = SalesOrder::all();
    $order = null; foreach ($list as $o) if((int)$o['id']===$id){ $order=$o; break; }
    if(!$order){ $this->redirect('/orders'); return; }
    $this->view('orders/view', ['o'=>$order,'items'=>$items,'notes' => Note::for('sales_order', $id)]);
  }
  public function printpage(): void
{
    require_auth();
    $id = (int)($_GET['id'] ?? 0);
    $includeNotes = isset($_GET['include_notes']) && $_GET['include_notes'] === '1';

    // fetch one order; we used SalesOrder::all() previously, but here we’ll reuse that pattern:
    $list  = \App\Models\SalesOrder::all();
    $order = null; foreach ($list as $o) if ((int)$o['id'] === $id) { $order = $o; break; }
    if (!$order) { flash_set('error','Order not found.'); redirect('/orders'); }

    $items = \App\Models\SalesOrder::items($id);
    $publicNotes = $includeNotes ? Note::publicFor('sales_order', $id) : [];

    $this->view_raw('orders/print', [
        'o' => $order,
        'items' => $items,
        'public_notes' => $publicNotes,
        'include_notes' => $includeNotes,
    ]);
}
}

----- END FILE: app/controllers/orderscontroller.php -----

----- BEGIN FILE: app/controllers/paymentscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Models\Invoice;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;
use App\Core\DB;

final class PaymentsController extends Controller
{
    public function store(): void {
    require_auth();
    if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/invoices'); }

    $invoiceId = (int)($_POST['invoice_id'] ?? 0);
    $amount    = (float)($_POST['amount'] ?? 0);
    $paidAt    = (string)($_POST['paid_at'] ?? '');
    $method    = trim((string)($_POST['method'] ?? 'cash'));
    $reference = trim((string)($_POST['reference'] ?? ''));
    $note      = trim((string)($_POST['note'] ?? ''));
    $return    = (string)($_POST['_return'] ?? '/invoices');

    $inv = \App\Models\Invoice::find($invoiceId);
    if (!$inv) { flash_set('error','Invoice not found.'); redirect($return); }

    // Block edits once paid
    if (($inv['status'] ?? '') === 'paid') {
        flash_set('error','Invoice is fully paid; payments are locked.');
        redirect($return);
    }

    // Prevent overpayment (cap to remaining)
	$credits = \App\Models\SalesReturn::creditsTotalForInvoice((int)$inv['id']);
	$remaining = max(0.0, (float)$inv['total'] - (float)$inv['paid_amount'] - (float)$credits);
    if ($remaining <= 0.0) {
        flash_set('error','Nothing to pay; invoice is already fully paid.');
        redirect($return);
    }
    $capped = false;
    if ($amount > $remaining) {
        $amount = $remaining;
        $capped = true;
    }
    if ($amount <= 0.0 || $paidAt === '') {
        flash_set('error','Payment requires a date and a positive amount.');
        redirect($return);
    }

    $pdo = \App\Core\DB::conn();
    $st = $pdo->prepare("INSERT INTO invoice_payments (invoice_id, paid_at, method, reference, amount, note)
                         VALUES (?,?,?,?,?,?)");
    $st->execute([$invoiceId, $paidAt, $method, $reference, $amount, $note]);
    $paymentId = (int)$pdo->lastInsertId();

    \App\Models\Invoice::recalcPaidAmount($invoiceId);

    // Optional activity log
    if (function_exists('\App\Core\activity_log')) {
        \App\Core\activity_log('payment.add', 'sales_invoice', $invoiceId, [
            'payment_id' => $paymentId,
            'amount'     => $amount,
            'method'     => $method,
            'reference'  => $reference,
        ]);
    }

    flash_set('success', $capped ? 'Payment recorded (amount capped to remaining).' : 'Payment recorded.');
    redirect($return);
}
	
	public function index(): void
{
    require_auth();
    // Show latest payments with invoice and customer
    $sql = "SELECT p.*, i.inv_no, i.id AS invoice_id, c.name AS customer_name
            FROM invoice_payments p
            JOIN invoices i ON i.id = p.invoice_id
            JOIN customers c ON c.id = i.customer_id
            ORDER BY p.id DESC
            LIMIT 200";
    $rows = \App\Core\DB::conn()->query($sql)->fetchAll(\PDO::FETCH_ASSOC) ?: [];
    $this->view('payments/index', ['rows' => $rows]);
}

public function create(): void
{
    require_auth();
    $invoiceId = (int)($_GET['invoice_id'] ?? 0);
    $returnTo  = (string)($_GET['_return'] ?? '/invoices');
    $inv = \App\Models\Invoice::find($invoiceId);
    if (!$inv) {
        flash_set('error', 'Invoice not found.');
        redirect('/invoices');
    }
    $this->view('payments/create', [
        'i'        => $inv,
        'returnTo' => $returnTo ?: '/invoices/show?id='.$invoiceId,
        // default datetime-local value: now
        'now'      => date('Y-m-d\TH:i'),
    ]);
}
	public function destroy(): void {
    require_auth();
    if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/invoices'); }

    $id        = (int)($_POST['id'] ?? 0);
    $invoiceId = (int)($_POST['invoice_id'] ?? 0);
    $return    = (string)($_POST['_return'] ?? '/invoices');

    $inv = \App\Models\Invoice::find($invoiceId);
    if (!$inv) { flash_set('error','Invoice not found.'); redirect($return); }

    // Block edits once paid
    if (($inv['status'] ?? '') === 'paid') {
        flash_set('error','Invoice is fully paid; payments are locked.');
        redirect($return);
    }

    if ($id > 0) {
        \App\Core\DB::conn()->prepare("DELETE FROM invoice_payments WHERE id=?")->execute([$id]);

        \App\Models\Invoice::recalcPaidAmount($invoiceId);

        if (function_exists('\App\Core\activity_log')) {
            \App\Core\activity_log('payment.delete', 'sales_invoice', $invoiceId, ['payment_id' => $id]);
        }

        flash_set('success','Payment deleted.');
    }
    redirect($return);
}
}

----- END FILE: app/controllers/paymentscontroller.php -----

----- BEGIN FILE: app/controllers/productscontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Models\Product;
use App\Models\Category;
use App\Models\Make;
use App\Models\VehicleModel;
use App\Models\Warehouse;
use App\Models\Note;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class ProductsController extends Controller
{
    public function index(): void
    {
        require_auth();
        $q    = isset($_GET['q']) ? trim((string)$_GET['q']) : null;
        $cat  = isset($_GET['category_id']) ? (int)$_GET['category_id'] : null;
        $make = isset($_GET['make_id']) ? (int)$_GET['make_id'] : null;
        $model= isset($_GET['model_id']) ? (int)$_GET['model_id'] : null;

        $items = Product::all($q ?: null, $cat ?: null, $make ?: null, $model ?: null);
        $this->view('products/index', [
            'items' => $items,
            'q' => $q, 'category_id'=>$cat, 'make_id'=>$make, 'model_id'=>$model,
            'categories' => Category::all(),
            'makes' => Make::options(),
            'models' => VehicleModel::all($make ?: null)
        ]);
    }

    public function create(): void
    {
        require_auth();
        $this->view('products/form', [
            'mode'=>'create',
            'item'=>['code'=>Product::nextCode()],
            'categories'=>Category::all(),
            'makes'=>Make::options(),
            'models'=>VehicleModel::all()
        ]);
    }

    public function store(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/products'); }

        $data = $this->readForm();
        if ($data['name']==='' || $data['code']==='') { flash_set('error','Code and name are required.'); redirect('/products/create'); }

        try {
            $id = Product::create($data);
            flash_set('success','Product created.');
            redirect('/products/stock?id='.$id);
        } catch (\Throwable $e) {
            flash_set('error','Error: '.$e->getMessage());
            redirect('/products/create');
        }
    }

    public function edit(): void
    {
        require_auth();
        $id=(int)($_GET['id']??0);
        $item = Product::find($id);
        if(!$item){ flash_set('error','Product not found.'); redirect('/products'); }
        $this->view('products/form', [
            'mode'=>'edit','item'=>$item,
            'categories'=>Category::all(),
            'makes'=>Make::options(),
            'models'=>VehicleModel::all($item['make_id'] ? (int)$item['make_id'] : null),
			'notes'=> Note::for('product', (int)$it['id'])
        ]);
    }

    public function update(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/products'); }
        $id=(int)($_POST['id']??0);
        $data = $this->readForm();
        if($id<=0){ flash_set('error','Invalid id.'); redirect('/products'); }

        try { Product::update($id,$data); flash_set('success','Product updated.'); }
        catch(\Throwable $e){ flash_set('error','Error: '.$e->getMessage()); redirect('/products/edit?id='.$id); }

        redirect('/products');
    }

    public function destroy(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/products'); }
        $id=(int)($_POST['id']??0);
        if($id<=0){ flash_set('error','Invalid id.'); redirect('/products'); }
        try { Product::delete($id); flash_set('success','Product deleted.'); }
        catch(\Throwable $e){ flash_set('error','Error: '.$e->getMessage()); }
        redirect('/products');
    }

    public function stock(): void
    {
        require_auth();
        $id=(int)($_GET['id']??0);
        $item = Product::find($id);
        if(!$item){ flash_set('error','Product not found.'); redirect('/products'); }
        $rows = Product::stocks($id);
        $this->view('products/stock', ['item'=>$item,'rows'=>$rows]);
    }

    public function savestock(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/products'); }
        $id=(int)($_POST['id']??0);
        if($id<=0){ flash_set('error','Invalid product id.'); redirect('/products'); }

        // posted arrays: qty_on[wid], qty_res[wid]
        $rows = [];
        foreach (($_POST['qty_on'] ?? []) as $wid => $on) {
            $rows[(int)$wid]['on'] = (int)$on;
        }
        foreach (($_POST['qty_res'] ?? []) as $wid => $res) {
            $rows[(int)$wid]['res'] = (int)$res;
        }
        Product::saveStocks($id, $rows);
        flash_set('success','Stock updated.');
        redirect('/products/stock?id='.$id);
    }

    private function readForm(): array
    {
        return [
            'code' => trim((string)($_POST['code'] ?? '')),
            'name' => trim((string)($_POST['name'] ?? '')),
            'category_id' => $_POST['category_id'] !== '' ? (int)$_POST['category_id'] : null,
            'make_id' => $_POST['make_id'] !== '' ? (int)$_POST['make_id'] : null,
            'model_id' => $_POST['model_id'] !== '' ? (int)$_POST['model_id'] : null,
            'cost' => (float)($_POST['cost'] ?? 0),
            'price' => (float)($_POST['price'] ?? 0),
        ];
    }
}

----- END FILE: app/controllers/productscontroller.php -----

----- BEGIN FILE: app/controllers/purchaseinvoicescontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use App\Models\PurchaseInvoice;
use App\Models\PurchaseOrder;
use App\Models\Note;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class PurchaseInvoicesController extends Controller
{
    public function index(): void {
        require_auth();
        $this->view('purchaseinvoices/index', ['items' => PurchaseInvoice::all()]);
    }

public function show(): void {
    require_auth();
    $id = (int)($_GET['id'] ?? 0);
    $pi = \App\Models\PurchaseInvoice::find($id);
    if (!$pi) { flash_set('error','Invoice not found.'); redirect('/purchaseinvoices'); }

    $items = \App\Models\PurchaseInvoice::poItems($id);
    $receivedMap = \App\Models\PurchaseInvoice::receivedMapByPo((int)$pi['purchase_order_id']);
    $receipts = \App\Models\PurchaseInvoice::receipts($id);
    $payments = \App\Models\SupplierPayment::forInvoice($id);
	$credits_total = \App\Models\PurchaseReturn::creditsTotalForInvoice($id);
	$pr_returns    = \App\Models\PurchaseReturn::returnsForInvoice($id);
	$rec_map       = \App\Models\PurchaseReturn::receivedMapByInvoice($id);
	$ret_map       = \App\Models\PurchaseReturn::returnedMapByInvoice($id);
	
    $this->view('purchaseinvoices/view', [
        'pi'       => $pi,
        'items'    => $items,
        'received' => $receivedMap,
        'receipts' => $receipts,
        'payments' => $payments,
		'credits_total' => $credits_total,
  		'pr_returns'    => $pr_returns,
  		'rec_map'       => $rec_map,
  		'ret_map'       => $ret_map,
        'notes'    => \App\Models\Note::for('purchase_invoice', $id),
    ]);
}

    public function createfrompo(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseorders'); }
        $poId = (int)($_POST['purchase_order_id'] ?? 0);
        $po = PurchaseOrder::find($poId);
        if (!$po) { flash_set('error','PO not found.'); redirect('/purchaseorders'); }

        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            $piNo = PurchaseInvoice::nextNumber();
            $ins = $pdo->prepare("INSERT INTO purchase_invoices
                (pi_no, purchase_order_id, supplier_id, subtotal, tax_rate, tax_amount, total)
                VALUES (?,?,?,?,?,?,?)");
            $ins->execute([
                $piNo, $poId, (int)$po['supplier_id'], (float)$po['subtotal'],
                (float)$po['tax_rate'], (float)$po['tax_amount'], (float)$po['total']
            ]);
            $piId = (int)$pdo->lastInsertId();

            $pdo->commit();
            flash_set('success', 'Purchase invoice '.$piNo.' created.');
            redirect('/purchaseinvoices/show?id='.$piId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Create invoice failed: '.$e->getMessage());
            redirect('/purchaseorders/show?id='.$poId);
        }
    }

    public function printpage(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $includeNotes = isset($_GET['include_notes']) && $_GET['include_notes'] === '1';
        $pi = PurchaseInvoice::find($id);
        if (!$pi) { flash_set('error','Invoice not found.'); redirect('/purchaseinvoices'); }

        $items = PurchaseInvoice::poItems($id);
        $publicNotes = $includeNotes ? Note::publicFor('purchase_invoice', $id) : [];
        $this->view_raw('purchaseinvoices/print', [
            'pi' => $pi,
            'items' => $items,
            'public_notes' => $publicNotes,
            'include_notes' => $includeNotes,
        ]);
    }
}

----- END FILE: app/controllers/purchaseinvoicescontroller.php -----

----- BEGIN FILE: app/controllers/purchaseorderscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use App\Models\PurchaseOrder;
use App\Models\Supplier;
use App\Models\Note;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class PurchaseOrdersController extends Controller
{
    public function index(): void {
        require_auth();
        $this->view('purchaseorders/index', ['items' => PurchaseOrder::all()]);
    }

    public function create(): void {
        require_auth();
        $suppliers  = Supplier::all();
        $products   = DB::conn()->query("SELECT id, code, name, price FROM products ORDER BY code")->fetchAll(\PDO::FETCH_ASSOC) ?: [];
        $warehouses = DB::conn()->query("SELECT id, name FROM warehouses ORDER BY name")->fetchAll(\PDO::FETCH_ASSOC) ?: [];
        $this->view('purchaseorders/form', [
            'mode' => 'create',
            'po'   => ['po_no'=>PurchaseOrder::nextNumber(), 'supplier_id'=>'', 'tax_rate'=>0, 'subtotal'=>0, 'tax_amount'=>0, 'total'=>0, 'status'=>'draft'],
            'items'=> [],
            'suppliers'=>$suppliers, 'products'=>$products, 'warehouses'=>$warehouses,
        ]);
    }

    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseorders'); }
        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            $poNo = PurchaseOrder::nextNumber();
            $supplierId = (int)($_POST['supplier_id'] ?? 0);
            $taxRate = (float)($_POST['tax_rate'] ?? 0);

            $items = $this->readItems();
            if (!$items) { throw new \RuntimeException('At least one item is required.'); }

            $subtotal = 0.0;
            foreach ($items as &$it) {
                $it['qty'] = max(1, (int)$it['qty']);
                $it['price'] = (float)$it['price'];
                $it['line_total'] = $it['qty'] * $it['price'];
                $subtotal += $it['line_total'];
            }
            $taxAmount = round($subtotal * ($taxRate / 100), 2);
            $total = $subtotal + $taxAmount;

            $ins = $pdo->prepare("INSERT INTO purchase_orders (po_no, supplier_id, status, tax_rate, subtotal, tax_amount, total)
                                  VALUES (?,?,?,?,?,?,?)");
            $ins->execute([$poNo, $supplierId, 'draft', $taxRate, $subtotal, $taxAmount, $total]);
            $poId = (int)$pdo->lastInsertId();

            $insItem = $pdo->prepare("INSERT INTO purchase_order_items (purchase_order_id, product_id, warehouse_id, qty, price, line_total)
                                      VALUES (?,?,?,?,?,?)");
            foreach ($items as $it) {
                $insItem->execute([$poId, (int)$it['product_id'], (int)$it['warehouse_id'], (int)$it['qty'], (float)$it['price'], (float)$it['line_total']]);
            }

            $pdo->commit();
            flash_set('success','PO created: '.$poNo);
            redirect('/purchaseorders/show?id='.$poId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Save failed: '.$e->getMessage());
            redirect('/purchaseorders/create');
        }
    }

    public function edit(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $po = PurchaseOrder::find($id);
        if (!$po) { flash_set('error','Not found.'); redirect('/purchaseorders'); }
        if (($po['status'] ?? 'draft') !== 'draft') {
            flash_set('error','Only draft POs can be edited.');
            redirect('/purchaseorders/show?id='.$id);
        }
        $suppliers  = Supplier::all();
        $products   = DB::conn()->query("SELECT id, code, name, price FROM products ORDER BY code")->fetchAll(\PDO::FETCH_ASSOC) ?: [];
        $warehouses = DB::conn()->query("SELECT id, name FROM warehouses ORDER BY name")->fetchAll(\PDO::FETCH_ASSOC) ?: [];
        $this->view('purchaseorders/form', [
            'mode'=>'edit', 'po'=>$po, 'items'=>PurchaseOrder::items($id),
            'suppliers'=>$suppliers, 'products'=>$products, 'warehouses'=>$warehouses,
        ]);
    }

    public function update(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseorders'); }
        $id = (int)($_POST['id'] ?? 0);
        $po = PurchaseOrder::find($id);
        if (!$po) { flash_set('error','Not found.'); redirect('/purchaseorders'); }
        if (($po['status'] ?? 'draft') !== 'draft') {
            flash_set('error','Only draft POs can be edited.');
            redirect('/purchaseorders/show?id='.$id);
        }

        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            $supplierId = (int)($_POST['supplier_id'] ?? 0);
            $taxRate = (float)($_POST['tax_rate'] ?? 0);
            $items = $this->readItems();
            if (!$items) { throw new \RuntimeException('At least one item is required.'); }

            $subtotal = 0.0;
            foreach ($items as &$it) {
                $it['qty'] = max(1, (int)$it['qty']);
                $it['price'] = (float)$it['price'];
                $it['line_total'] = $it['qty'] * $it['price'];
                $subtotal += $it['line_total'];
            }
            $taxAmount = round($subtotal * ($taxRate/100), 2);
            $total = $subtotal + $taxAmount;

            $pdo->prepare("UPDATE purchase_orders SET supplier_id=?, tax_rate=?, subtotal=?, tax_amount=?, total=? WHERE id=?")
                ->execute([$supplierId, $taxRate, $subtotal, $taxAmount, $total, $id]);

            $pdo->prepare("DELETE FROM purchase_order_items WHERE purchase_order_id=?")->execute([$id]);
            $insItem = $pdo->prepare("INSERT INTO purchase_order_items (purchase_order_id, product_id, warehouse_id, qty, price, line_total)
                                      VALUES (?,?,?,?,?,?)");
            foreach ($items as $it) {
                $insItem->execute([$id, (int)$it['product_id'], (int)$it['warehouse_id'], (int)$it['qty'], (float)$it['price'], (float)$it['line_total']]);
            }

            $pdo->commit();
            flash_set('success','PO updated.');
            redirect('/purchaseorders/show?id='.$id);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Update failed: '.$e->getMessage());
            redirect('/purchaseorders/edit?id='.$id);
        }
    }

    public function show(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $po = PurchaseOrder::find($id);
        if (!$po) { flash_set('error','Not found.'); redirect('/purchaseorders'); }
        $items = PurchaseOrder::items($id);
        $this->view('purchaseorders/view', [
            'po' => $po, 'items' => $items, 'notes' => Note::for('purchase_order', $id),
        ]);
    }

    public function markordered(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseorders'); }
        $id = (int)($_POST['id'] ?? 0);
        $po = PurchaseOrder::find($id);
        if (!$po) { flash_set('error','Not found.'); redirect('/purchaseorders'); }
        if (($po['status'] ?? 'draft') !== 'draft') {
            flash_set('error','Only draft POs can be marked as ordered.');
            redirect('/purchaseorders/show?id='.$id);
        }
        DB::conn()->prepare("UPDATE purchase_orders SET status='ordered' WHERE id=?")->execute([$id]);
        flash_set('success','PO marked as ordered.');
        redirect('/purchaseorders/show?id='.$id);
    }

    public function printpage(): void
    {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $includeNotes = isset($_GET['include_notes']) && $_GET['include_notes'] === '1';
        $po = PurchaseOrder::find($id);
        if (!$po) { flash_set('error','Not found.'); redirect('/purchaseorders'); }
        $items = PurchaseOrder::items($id);
        $publicNotes = $includeNotes ? Note::publicFor('purchase_order', $id) : [];
        $this->view_raw('purchaseorders/print', [
            'po'=>$po, 'items'=>$items, 'public_notes'=>$publicNotes, 'include_notes'=>$includeNotes
        ]);
    }

    private function readItems(): array {
        $rows = [];
        $pids = $_POST['item_product_id'] ?? [];
        $wids = $_POST['item_warehouse_id'] ?? [];
        $qtys = $_POST['item_qty'] ?? [];
        $prices = $_POST['item_price'] ?? [];
        $n = max(count($pids), count($wids), count($qtys), count($prices));
        for ($i=0; $i<$n; $i++) {
            $pid = (int)($pids[$i] ?? 0);
            $wid = (int)($wids[$i] ?? 0);
            $q   = (int)($qtys[$i] ?? 0);
            $pr  = (float)($prices[$i] ?? 0);
            if ($pid>0 && $wid>0 && $q>0 && $pr>=0) {
                $rows[] = ['product_id'=>$pid, 'warehouse_id'=>$wid, 'qty'=>$q, 'price'=>$pr];
            }
        }
        return $rows;
    }
	
	public function markclosed(): void {
    require_auth();
    if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseorders'); }
    $id = (int)($_POST['id'] ?? 0);
    $po = \App\Models\PurchaseOrder::find($id);
    if (!$po) { flash_set('error','Not found.'); redirect('/purchaseorders'); }
    if (($po['status'] ?? '') !== 'received') {
        flash_set('error','Only received POs can be closed.');
        redirect('/purchaseorders/show?id='.$id);
    }
    \App\Core\DB::conn()->prepare("UPDATE purchase_orders SET status='closed' WHERE id=?")->execute([$id]);
    flash_set('success','PO closed.');
    redirect('/purchaseorders/show?id='.$id);
}
}

----- END FILE: app/controllers/purchaseorderscontroller.php -----

----- BEGIN FILE: app/controllers/purchasereturnscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use App\Models\PurchaseReturn;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class PurchaseReturnsController extends Controller
{
    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseinvoices'); }

        $piId = (int)($_POST['invoice_id'] ?? 0);
        if ($piId <= 0) { flash_set('error','Missing invoice.'); redirect('/purchaseinvoices'); }

        $pdo = DB::conn();

        // invoice + supplier
        $st = $pdo->prepare("SELECT pi.*, s.name AS supplier_name
                             FROM purchase_invoices pi
                             JOIN suppliers s ON s.id = pi.supplier_id
                             WHERE pi.id=?");
        $st->execute([$piId]);
        $pi = $st->fetch(\PDO::FETCH_ASSOC);
        if (!$pi) { flash_set('error','Invoice not found.'); redirect('/purchaseinvoices'); }

        // maps
        $received = PurchaseReturn::receivedMapByInvoice($piId);
        $returned = PurchaseReturn::returnedMapByInvoice($piId);

        // submission
        $pids   = $_POST['ret_product_id']   ?? [];
        $wids   = $_POST['ret_warehouse_id'] ?? [];
        $qtys   = $_POST['ret_qty']          ?? [];
        $prices = $_POST['ret_price']        ?? [];

        $lines = []; $subtotal = 0.0;
        for ($i=0, $n=max(count($pids),count($wids),count($qtys),count($prices)); $i<$n; $i++) {
            $pid   = (int)($pids[$i] ?? 0);
            $wid   = (int)($wids[$i] ?? 0);
            $qty   = (int)($qtys[$i] ?? 0);
            $price = (float)($prices[$i] ?? 0);
            if ($pid<=0 || $wid<=0 || $qty<=0) continue;

            $key = $pid.':'.$wid;
            $rec = (int)($received[$key] ?? 0);
            $ret = (int)($returned[$key] ?? 0);
            $remain = max(0, $rec - $ret);
            if ($remain <= 0) continue;
            if ($qty > $remain) $qty = $remain;

            $lineTotal = round($qty * $price, 2);
            $subtotal += $lineTotal;

            $lines[] = compact('pid','wid','qty','price','lineTotal');
            $returned[$key] = ($returned[$key] ?? 0) + $qty;
        }

        if (!$lines) { flash_set('error','Nothing to return.'); redirect('/purchaseinvoices/show?id='.$piId); }

        $taxRate   = (float)($pi['tax_rate'] ?? 0);
        $taxAmount = round($subtotal * $taxRate / 100, 2);
        $total     = round($subtotal + $taxAmount, 2);

        $pdo->beginTransaction();
        try {
            $prNo = PurchaseReturn::nextNumber();
            $pdo->prepare("INSERT INTO purchase_returns
                (pr_no, purchase_invoice_id, supplier_id, subtotal, tax_rate, tax_amount, total)
                VALUES (?,?,?,?,?,?,?)")
                ->execute([$prNo, $piId, (int)$pi['supplier_id'], $subtotal, $taxRate, $taxAmount, $total]);
            $prId = (int)$pdo->lastInsertId();

            $ins = $pdo->prepare("INSERT INTO purchase_return_items
                (purchase_return_id, product_id, warehouse_id, qty, price, line_total)
                VALUES (?,?,?,?,?,?)");

            foreach ($lines as $ln) {
                $ins->execute([$prId, $ln['pid'], $ln['wid'], $ln['qty'], $ln['price'], $ln['lineTotal']]);

                // DECREMENT stock (product_stocks has no id)
                $upd = $pdo->prepare("UPDATE product_stocks
                                      SET qty_on_hand = GREATEST(qty_on_hand - ?, 0)
                                      WHERE product_id=? AND warehouse_id=?");
                $upd->execute([$ln['qty'], $ln['pid'], $ln['wid']]);
            }

            $pdo->commit();
            flash_set('success','Debit note '.$prNo.' created and stock reduced.');
            redirect('/purchaseinvoices/show?id='.$piId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Create purchase return failed: '.$e->getMessage());
            redirect('/purchaseinvoices/show?id='.$piId);
        }
    }

    public function printnote(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        if ($id<=0) { redirect('/purchaseinvoices'); }

        $pr = PurchaseReturn::findHead($id);
        if (!$pr) { flash_set('error','Debit note not found.'); redirect('/purchaseinvoices'); }

        $pdo = DB::conn();
        $st = $pdo->prepare("SELECT pi.*, s.name AS supplier_name
                             FROM purchase_invoices pi
                             JOIN suppliers s ON s.id = pi.supplier_id
                             WHERE pi.id=?");
        $st->execute([(int)$pr['purchase_invoice_id']]);
        $pi = $st->fetch(\PDO::FETCH_ASSOC) ?: [];

        $this->view_raw('purchasereturns/print', [
            'pr'    => $pr,
            'items' => PurchaseReturn::items((int)$pr['id']),
            'pi'    => $pi,
        ]);
    }
}

----- END FILE: app/controllers/purchasereturnscontroller.php -----

----- BEGIN FILE: app/controllers/quotescontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use App\Models\Quote;
use App\Models\Customer;
use App\Models\Product;
use App\Models\Warehouse;
use App\Models\SalesOrder;
use App\Models\Note;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class QuotesController extends Controller
{
    public function index(): void
    {
        require_auth();
        $this->view('quotes/index', ['items' => Quote::all()]);
    }

    public function create(): void
    {
        require_auth();
        $this->view('quotes/form', [
            'mode' => 'create',
            'quote_no' => Quote::nextNumber(),
            'customers' => Customer::options(),
            'warehouses' => Warehouse::options(),
            'products' => $this->productOptions(),
            'item_rows' => 3, // show 3 blank lines initially
        ]);
    }

    public function store(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error', 'Invalid session.'); redirect('/quotes'); }

        $cust = (int)($_POST['customer_id'] ?? 0);
        $tax  = (float)($_POST['tax_rate'] ?? 0);
        $exp  = (string)($_POST['expires_at'] ?? '');
        $qs   = $this->readItems();
		// Ensure we do not reserve more than available (sum duplicates per product/warehouse)
$want = [];
foreach ($qs as $q) {
    $key = $q['product_id'].':'.$q['warehouse_id'];
    $want[$key] = ($want[$key] ?? 0) + (int)$q['qty'];
}
foreach ($want as $key => $qty) {
    [$pid, $wid] = array_map('intval', explode(':', $key, 2));
    $avail = $this->availableQty($pid, $wid);
    if ($qty > $avail) {
        $label = $this->productLabel($pid);
        flash_set('error', "Insufficient stock to reserve ($label @ selected warehouse). Available: $avail, Requested: $qty.");
        redirect('/quotes/create'); // do NOT save/reserve anything
    }
}
// ensure price defaults from product when not provided or zero
foreach ($qs as &$q) {
    if (empty($q['price']) || (float)$q['price'] <= 0) {
        $q['price'] = $this->productPrice((int)$q['product_id']);
    }
}
unset($q);
        if ($cust<=0 || !$qs) { flash_set('error','Customer and at least one line item are required.'); redirect('/quotes/create'); }

        $pdo = DB::conn();
        $pdo->beginTransaction();
        try {
            $no = Quote::nextNumber();
            // compute totals
            $subtotal = 0.00;
            foreach ($qs as $q) { $subtotal += $q['qty'] * $q['price']; }
            $tax_amount = round($subtotal * ($tax/100), 2);
            $total = round($subtotal + $tax_amount, 2);

            $ins = $pdo->prepare('INSERT INTO quotes (quote_no, customer_id, status, tax_rate, subtotal, tax_amount, total, expires_at)
                                  VALUES (?,?,?,?,?,?,?,?)');
            $ins->execute([$no, $cust, 'sent', $tax, $subtotal, $tax_amount, $total, $exp ?: null]);
            $quoteId = (int)$pdo->lastInsertId();

            $insIt = $pdo->prepare('INSERT INTO quote_items (quote_id, product_id, warehouse_id, qty, price, line_total)
                                    VALUES (?, ?, ?, ?, ?, ?)');
            foreach ($qs as $q) {
                $lt = round($q['qty'] * $q['price'], 2);
                $insIt->execute([$quoteId, $q['product_id'], $q['warehouse_id'], $q['qty'], $q['price'], $lt]);
                // reserve stock
                Product::adjustReserved($q['product_id'], $q['warehouse_id'], $q['qty']);
            }

            $pdo->commit();
            flash_set('success', 'Quote created and stock reserved.');
            redirect('/quotes/show?id=' . $quoteId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error', 'Error: ' . $e->getMessage());
            redirect('/quotes');
        }
    }

    public function show(): void
    {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $quote = Quote::find($id);
         if (!$quote) {
        flash_set('error', 'Quote not found.');
        $this->view('quotes/index', ['items' => Quote::all()]); // no redirect
        return;
    }
        $items = Quote::items($id);
		// preflight stock check: block if any line cannot be fulfilled
foreach ($items as $it) {
    $pid = (int)$it['product_id'];
    $wid = (int)$it['warehouse_id'];
    $q   = (int)$it['qty'];
    if (!\App\Models\Product::canFulfill($pid, $wid, $q)) {
        flash_set('error', 'Insufficient stock to convert ('
            . htmlspecialchars($it['product_code'].' — '.$it['product_name'])
            . ' @ ' . htmlspecialchars($it['warehouse_name']) . ').');
        redirect('/quotes/show?id=' . $id);
    }
}
        $this->view('quotes/view', ['q'=>$quote, 'items'=>$items, 'notes' => Note::for('quote', $id),]);
    }

    public function cancel(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/quotes'); }
        $id = (int)($_POST['id'] ?? 0);
        $q = Quote::find($id);
        if (!$q || $q['status'] !== 'sent') { flash_set('error','Only sent quotes can be cancelled.'); redirect('/quotes'); }

        $pdo = DB::conn();
        $pdo->beginTransaction();
        try {
            // release reservations
            $items = Quote::items($id);
            foreach ($items as $it) {
                Product::adjustReserved((int)$it['product_id'], (int)$it['warehouse_id'], -((int)$it['qty']));
            }
            $pdo->prepare('UPDATE quotes SET status="cancelled" WHERE id=?')->execute([$id]);
            $pdo->commit();
            flash_set('success','Quote cancelled and reservation released.');
            redirect('/quotes/show?id='.$id);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Error: '.$e->getMessage());
            redirect('/quotes');
        }
    }

    public function expire(): void
    {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/quotes'); }
        $id = (int)($_POST['id'] ?? 0);
        $q = Quote::find($id);
        if (!$q || $q['status'] !== 'sent') { flash_set('error','Only sent quotes can be expired.'); redirect('/quotes'); }

        $pdo = DB::conn();
        $pdo->beginTransaction();
        try {
            $items = Quote::items($id);
            foreach ($items as $it) {
                Product::adjustReserved((int)$it['product_id'], (int)$it['warehouse_id'], -((int)$it['qty']));
            }
            $pdo->prepare('UPDATE quotes SET status="expired" WHERE id=?')->execute([$id]);
            $pdo->commit();
            flash_set('success','Quote marked as expired and reservation released.');
            redirect('/quotes/show?id='.$id);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Error: '.$e->getMessage());
            redirect('/quotes');
        }
    }

    private function productOptions(): array
    {
        // minimal product list (id, display)
        $sql = "SELECT p.id,
                   CONCAT(p.code, ' — ', p.name) AS label,
                   p.price
            FROM products p
            ORDER BY p.name";
    return DB::conn()->query($sql)->fetchAll(\PDO::FETCH_ASSOC) ?: [];
    }

private function productPrice(int $id): float
{
    $st = DB::conn()->prepare('SELECT price FROM products WHERE id = ?');
    $st->execute([$id]);
    return (float)$st->fetchColumn();
}

    private function readItems(): array
    {
        $pids = $_POST['product_id'] ?? [];
        $wids = $_POST['warehouse_id'] ?? [];
        $qtys = $_POST['qty'] ?? [];
        $prices = $_POST['price'] ?? [];

        $rows = [];
        for ($i=0; $i < count($pids); $i++) {
            $pid = (int)($pids[$i] ?? 0);
            $wid = (int)($wids[$i] ?? 0);
            $q   = (int)($qtys[$i] ?? 0);
            $pr  = (float)($prices[$i] ?? 0);
            if ($pid>0 && $wid>0 && $q>0) {
                $rows[] = ['product_id'=>$pid,'warehouse_id'=>$wid,'qty'=>$q,'price'=>$pr];
            }
        }
        return $rows;
    }
	
	public function convert(): void
{
    require_auth();
    if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/quotes'); }
    $id = (int)($_POST['id'] ?? 0);
    $q  = Quote::find($id);
    if (!$q || $q['status'] !== 'sent') { flash_set('error','Only sent quotes can be converted.'); redirect('/quotes'); }

    $pdo = DB::conn(); $pdo->beginTransaction();
    try {
        $items = Quote::items($id);
        $soNo = SalesOrder::nextNumber();
        $insSo = $pdo->prepare("INSERT INTO sales_orders (so_no, quote_id, customer_id, status, tax_rate, subtotal, tax_amount, total)
                                VALUES (?,?,?,?,?,?,?,?)");
        $insSo->execute([$soNo, $id, $q['customer_id'], 'open', $q['tax_rate'], $q['subtotal'], $q['tax_amount'], $q['total']]);
        $soId = (int)$pdo->lastInsertId();

        $insItem = $pdo->prepare("INSERT INTO sales_order_items (sales_order_id, product_id, warehouse_id, qty, price, line_total)
                                  VALUES (?,?,?,?,?,?)");
        foreach ($items as $it) {
            $qty = (int)$it['qty'];
            $insItem->execute([$soId, (int)$it['product_id'], (int)$it['warehouse_id'], $qty, (float)$it['price'], (float)$it['line_total']]);
            // move from reserved to consumed
            Product::consumeFromReservation((int)$it['product_id'], (int)$it['warehouse_id'], $qty);
        }

        $pdo->prepare('UPDATE quotes SET status="ordered" WHERE id=?')->execute([$id]);
        $pdo->commit();
        flash_set('success','Converted to Sales Order ' . $soNo . ' and stock deducted.');
        redirect('/orders/show?id='.$soId);
    } catch (\Throwable $e) {
        $pdo->rollBack();
        flash_set('error','Convert failed: '.$e->getMessage());
        redirect('/quotes/show?id='.$id);
    }
}
private function availableQty(int $productId, int $warehouseId): int
{
    $st = DB::conn()->prepare('SELECT qty_on_hand, qty_reserved
                               FROM product_stocks
                               WHERE product_id=? AND warehouse_id=?');
    $st->execute([$productId, $warehouseId]);
    $row = $st->fetch(\PDO::FETCH_ASSOC) ?: ['qty_on_hand'=>0,'qty_reserved'=>0];
    $on  = (int)$row['qty_on_hand'];
    $res = (int)$row['qty_reserved'];
    return max(0, $on - $res);
}

private function productLabel(int $id): string
{
    $st = DB::conn()->prepare('SELECT CONCAT(code, " — ", name) FROM products WHERE id=?');
    $st->execute([$id]);
    return (string)($st->fetchColumn() ?: ('#'.$id));
}

public function printpage(): void
{
    require_auth();
    $id = (int)($_GET['id'] ?? 0);
    $includeNotes = isset($_GET['include_notes']) && $_GET['include_notes'] === '1';

    $quote = \App\Models\Quote::find($id);
    if (!$quote) { flash_set('error','Quote not found.'); redirect('/quotes'); }

    $items = \App\Models\Quote::items($id);
    $publicNotes = $includeNotes ? Note::publicFor('quote', $id) : [];

    $this->view_raw('quotes/print', [
        'q' => $quote,
        'items' => $items,
        'public_notes' => $publicNotes,
        'include_notes' => $includeNotes,
    ]);
}

}

----- END FILE: app/controllers/quotescontroller.php -----

----- BEGIN FILE: app/controllers/receiptscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use App\Models\PurchaseInvoice;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class ReceiptsController extends Controller
{
    /** Receive multiple lines for a Purchase Invoice (caps to remaining; increments stock; updates avg_cost; writes ledger) */
    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseinvoices'); }

        $piId = (int)($_POST['invoice_id'] ?? 0);
        $pi = PurchaseInvoice::find($piId);
        if (!$pi) { flash_set('error','Invoice not found.'); redirect('/purchaseinvoices'); }
        $poId = (int)$pi['purchase_order_id'];

        // Load ordered items (by PO) and current received
        $items = PurchaseInvoice::poItems($piId);
        $ordered = [];
        foreach ($items as $it) {
            $key = $it['product_id'].':'.$it['warehouse_id'];
            $ordered[$key] = (int)$it['qty'];
        }
        $received = PurchaseInvoice::receivedMapByPo($poId);

        // Read submitted quantities
        $pids   = $_POST['rec_product_id']   ?? [];
        $wids   = $_POST['rec_warehouse_id'] ?? [];
        $qtys   = $_POST['rec_qty']          ?? [];
        $prices = $_POST['rec_price']        ?? [];

        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            $insRec = $pdo->prepare("INSERT INTO receipts (purchase_invoice_id, product_id, warehouse_id, qty, price)
                                     VALUES (?,?,?,?,?)");

            $changed = false;

            for ($i=0, $n=max(count($pids),count($wids),count($qtys),count($prices)); $i<$n; $i++) {
                $pid   = (int)($pids[$i]   ?? 0);
                $wid   = (int)($wids[$i]   ?? 0);
                $qty   = (int)($qtys[$i]   ?? 0);
                $price = (float)($prices[$i] ?? 0);

                if ($pid<=0 || $wid<=0 || $qty<=0) continue;

                $key = $pid.':'.$wid;
                $ord = (int)($ordered[$key] ?? 0);
                $rec = (int)($received[$key] ?? 0);
                $remain = max(0, $ord - $rec);
                if ($remain <= 0) { continue; }

                if ($qty > $remain) { $qty = $remain; }

                // 1) Insert receipt line
                $insRec->execute([$piId, $pid, $wid, $qty, $price]);
                $receiptId = (int)$pdo->lastInsertId();
                $changed = true;

                // 2) Recompute weighted average cost & increment stock (composite key, no 'id' column)
                // lock row
                $st = $pdo->prepare("
                    SELECT qty_on_hand, avg_cost
                    FROM product_stocks
                    WHERE product_id=? AND warehouse_id=?
                    FOR UPDATE
                ");
                $st->execute([$pid, $wid]);
                $row = $st->fetch(\PDO::FETCH_ASSOC);

                if ($row) {
                    $oldQty  = (int)$row['qty_on_hand'];
                    $oldCost = (float)($row['avg_cost'] ?? 0.0);
                    $newQty  = $oldQty + $qty;
                    $newAvg  = $newQty > 0 ? ( ($oldQty * $oldCost) + ($qty * $price) ) / $newQty : 0.0;

                    $upd = $pdo->prepare("
                        UPDATE product_stocks
                           SET qty_on_hand = ?, avg_cost = ?
                         WHERE product_id=? AND warehouse_id=?
                    ");
                    $upd->execute([$newQty, $newAvg, $pid, $wid]);
                } else {
                    // first time: avg_cost = this purchase price
                    $ins = $pdo->prepare("
                        INSERT INTO product_stocks (product_id, warehouse_id, qty_on_hand, qty_reserved, avg_cost)
                        VALUES (?,?,?,?,?)
                    ");
                    $ins->execute([$pid, $wid, $qty, 0, $price]);
                }

                // 3) Valued inventory ledger (receipt)
                $pdo->prepare("
                    INSERT INTO inventory_ledger
                        (product_id, warehouse_id, doc_type, doc_id, qty_delta, unit_cost, value_delta)
                    VALUES (?,?,?,?,?,?,?)
                ")->execute([$pid, $wid, 'receipt', $receiptId, $qty, $price, $qty * $price]);

                // update local received map for this submission
                $received[$key] = ($received[$key] ?? 0) + $qty;
            }

            // If fully received, mark PO as received
            if ($changed) {
                $allOk = true;
                foreach ($ordered as $k => $ordQty) {
                    $recQty = (int)($received[$k] ?? 0);
                    if ($recQty < $ordQty) { $allOk = false; break; }
                }
                if ($allOk) {
                    $pdo->prepare("UPDATE purchase_orders SET status='received' WHERE id=?")->execute([$poId]);
                }
            }

            $pdo->commit();
            flash_set('success', $changed ? 'Receipt posted.' : 'Nothing to receive.');
            redirect('/purchaseinvoices/show?id='.$piId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error', 'Receive failed: '.$e->getMessage());
            redirect('/purchaseinvoices/show?id='.$piId);
        }
    }

    /** Optional: delete a receipt line and decrement stock (logs a valued adjustment in ledger; avg_cost unchanged) */
    public function destroy(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseinvoices'); }

        $id = (int)($_POST['id'] ?? 0);
        $piId = (int)($_POST['invoice_id'] ?? 0);

        if ($id <= 0 || $piId <= 0) { redirect('/purchaseinvoices'); }

        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            // fetch the receipt
            $st = $pdo->prepare("SELECT * FROM receipts WHERE id=? AND purchase_invoice_id=? FOR UPDATE");
            $st->execute([$id, $piId]);
            $r = $st->fetch(\PDO::FETCH_ASSOC);

            if ($r) {
                $pid = (int)$r['product_id'];
                $wid = (int)$r['warehouse_id'];
                $qty = (int)$r['qty'];

                // lock stock to read current avg_cost
                $st2 = $pdo->prepare("SELECT qty_on_hand, avg_cost FROM product_stocks WHERE product_id=? AND warehouse_id=? FOR UPDATE");
                $st2->execute([$pid,$wid]);
                $stock = $st2->fetch(\PDO::FETCH_ASSOC) ?: ['qty_on_hand'=>0,'avg_cost'=>0.0];
                $avg = (float)($stock['avg_cost'] ?? 0.0);

                // decrement stock by composite key
                $pdo->prepare("
                    UPDATE product_stocks
                       SET qty_on_hand = GREATEST(qty_on_hand - ?, 0)
                     WHERE product_id=? AND warehouse_id=?
                ")->execute([$qty, $pid, $wid]);

                // valued ledger: treat as adjustment (negative)
                $pdo->prepare("
                    INSERT INTO inventory_ledger
                        (product_id, warehouse_id, doc_type, doc_id, qty_delta, unit_cost, value_delta)
                    VALUES (?,?,?,?,?,?,?)
                ")->execute([$pid, $wid, 'adjustment', $id, -$qty, $avg, -$qty * $avg]);

                // delete receipt line
                $pdo->prepare("DELETE FROM receipts WHERE id=?")->execute([$id]);
            }

            $pdo->commit();
            flash_set('success','Receipt deleted.');
            redirect('/purchaseinvoices/show?id='.$piId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Delete failed: '.$e->getMessage());
            redirect('/purchaseinvoices/show?id='.$piId);
        }
    }

    public function printgrn(): void {
        require_auth();
        $piId = (int)($_GET['invoice_id'] ?? 0);
        $pi = \App\Models\PurchaseInvoice::find($piId);
        if (!$pi) { flash_set('error','Invoice not found.'); redirect('/purchaseinvoices'); }
        $items    = \App\Models\PurchaseInvoice::poItems($piId);
        $receipts = \App\Models\PurchaseInvoice::receipts($piId);
        $this->view_raw('receipts/print', [
            'pi'       => $pi,
            'items'    => $items,
            'receipts' => $receipts,
        ]);
    }
}

----- END FILE: app/controllers/receiptscontroller.php -----

----- BEGIN FILE: app/controllers/reportscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;

use function App\Core\require_auth;

final class ReportsController extends Controller
{
    /** AP Aging (existing) */
    public function apaging(): void {
        require_auth();
        $asof = $_GET['asof'] ?? date('Y-m-d');

        $pdo = DB::conn();
        $sql = "
        SELECT s.id AS supplier_id, s.name AS supplier_name,
               SUM(CASE WHEN age<=30  THEN outstanding ELSE 0 END) AS bucket_0_30,
               SUM(CASE WHEN age BETWEEN 31 AND 60 THEN outstanding ELSE 0 END) AS bucket_31_60,
               SUM(CASE WHEN age BETWEEN 61 AND 90 THEN outstanding ELSE 0 END) AS bucket_61_90,
               SUM(CASE WHEN age>90  THEN outstanding ELSE 0 END) AS bucket_90_plus,
               SUM(outstanding) AS total
        FROM (
          SELECT pi.id, pi.supplier_id,
                 GREATEST(
                   pi.total
                   - COALESCE((
                       SELECT SUM(sp.amount) FROM supplier_payments sp
                       WHERE sp.purchase_invoice_id=pi.id AND sp.paid_at<=?
                     ),0)
                   - COALESCE((
                       SELECT SUM(pr.total) FROM purchase_returns pr
                       WHERE pr.purchase_invoice_id=pi.id AND pr.created_at<=?
                     ),0)
                 ,0) AS outstanding,
                 DATEDIFF(?, pi.created_at) AS age
          FROM purchase_invoices pi
          WHERE pi.created_at<=?
        ) x
        JOIN suppliers s ON s.id = x.supplier_id
        WHERE outstanding > 0
        GROUP BY s.id, s.name
        ORDER BY s.name";
        $st = $pdo->prepare($sql);
        $st->execute([$asof,$asof,$asof,$asof]);
        $rows = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];

        $totals = ['b0'=>0,'b31'=>0,'b61'=>0,'b90'=>0,'total'=>0];
        foreach ($rows as $r) {
            $totals['b0']   += (float)$r['bucket_0_30'];
            $totals['b31']  += (float)$r['bucket_31_60'];
            $totals['b61']  += (float)$r['bucket_61_90'];
            $totals['b90']  += (float)$r['bucket_90_plus'];
            $totals['total']+= (float)$r['total'];
        }

        $this->view('reports/ap_aging', [
            'asof'   => $asof,
            'rows'   => $rows,
            'totals' => $totals,
        ]);
    }

    /** AR Aging (new) */
    public function araging(): void {
        require_auth();
        $asof = $_GET['asof'] ?? date('Y-m-d');

        $pdo = DB::conn();
        $sql = "
        SELECT c.id AS customer_id, c.name AS customer_name,
               SUM(CASE WHEN age<=30  THEN outstanding ELSE 0 END) AS bucket_0_30,
               SUM(CASE WHEN age BETWEEN 31 AND 60 THEN outstanding ELSE 0 END) AS bucket_31_60,
               SUM(CASE WHEN age BETWEEN 61 AND 90 THEN outstanding ELSE 0 END) AS bucket_61_90,
               SUM(CASE WHEN age>90  THEN outstanding ELSE 0 END) AS bucket_90_plus,
               SUM(outstanding) AS total
        FROM (
          SELECT i.id, i.customer_id,
                 GREATEST(
                   i.total
                   - COALESCE((
                       SELECT SUM(ip.amount) FROM invoice_payments ip
                       WHERE ip.invoice_id=i.id AND ip.paid_at<=?
                     ),0)
                   - COALESCE((
                       SELECT SUM(sr.total) FROM sales_returns sr
                       WHERE sr.sales_invoice_id=i.id AND sr.created_at<=?
                     ),0)
                 ,0) AS outstanding,
                 DATEDIFF(?, i.created_at) AS age
          FROM invoices i
          WHERE i.created_at<=?
        ) x
        JOIN customers c ON c.id = x.customer_id
        WHERE outstanding > 0
        GROUP BY c.id, c.name
        ORDER BY c.name";
        $st = $pdo->prepare($sql);
        $st->execute([$asof,$asof,$asof,$asof]);
        $rows = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];

        $totals = ['b0'=>0,'b31'=>0,'b61'=>0,'b90'=>0,'total'=>0];
        foreach ($rows as $r) {
            $totals['b0']   += (float)$r['bucket_0_30'];
            $totals['b31']  += (float)$r['bucket_31_60'];
            $totals['b61']  += (float)$r['bucket_61_90'];
            $totals['b90']  += (float)$r['bucket_90_plus'];
            $totals['total']+= (float)$r['total'];
        }

        $this->view('reports/ar_aging', [
            'asof'   => $asof,
            'rows'   => $rows,
            'totals' => $totals,
        ]);
    }

    /** Inventory Valuation (weighted average) */
    public function inventoryvaluation(): void {
        require_auth();
        $pdo = DB::conn();
        $rows = $pdo->query("
            SELECT ps.product_id, ps.warehouse_id, ps.qty_on_hand, ps.avg_cost,
                   (ps.qty_on_hand * ps.avg_cost) AS value,
                   p.code AS product_code, p.name AS product_name,
                   w.name AS warehouse_name
            FROM product_stocks ps
            JOIN products p   ON p.id=ps.product_id
            JOIN warehouses w ON w.id=ps.warehouse_id
            ORDER BY w.name, p.code, p.name
        ")->fetchAll(\PDO::FETCH_ASSOC) ?: [];

        $tot = ['qty'=>0,'value'=>0.0];
        foreach ($rows as $r) {
            $tot['qty']   += (int)$r['qty_on_hand'];
            $tot['value'] += (float)$r['value'];
        }

        $this->view('reports/inventory_valuation', ['rows'=>$rows, 'tot'=>$tot]);
    }
}

----- END FILE: app/controllers/reportscontroller.php -----

----- BEGIN FILE: app/controllers/salesreturnscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use App\Models\SalesReturn;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class SalesReturnsController extends Controller
{
    /** Create a credit note (sales return) from an invoice */
    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/invoices'); }

        $invoiceId = (int)($_POST['invoice_id'] ?? 0);
        if ($invoiceId <= 0) { flash_set('error','Missing invoice.'); redirect('/invoices'); }

        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            // 1) Issued per (product, warehouse) from invoice items
            $sqlIssued = "SELECT product_id, warehouse_id, SUM(qty) AS qty, MAX(price) AS price
                          FROM invoice_items WHERE invoice_id=? GROUP BY product_id, warehouse_id";
            $st = $pdo->prepare($sqlIssued); $st->execute([$invoiceId]);
            $issuedMap = []; $priceMap = [];
            foreach ($st->fetchAll(\PDO::FETCH_ASSOC) ?: [] as $r) {
                $k = ((int)$r['product_id']).':'.((int)$r['warehouse_id']);
                $issuedMap[$k] = (int)$r['qty'];
                $priceMap[$k]  = (float)$r['price'];
            }

            // 2) Returned so far for that invoice
            $returnedMap = SalesReturn::returnedMapByInvoice($invoiceId);

            // 3) Read posted arrays (compatible with your invoices/view.php)
            $pids = $_POST['ret_product_id'] ?? ($_POST['product_id'] ?? []);
            $wids = $_POST['ret_warehouse_id'] ?? ($_POST['warehouse_id'] ?? []);
            $qtys = $_POST['ret_qty'] ?? ($_POST['qty'] ?? []);
            $prs  = $_POST['ret_price'] ?? ($_POST['price'] ?? []);

            $lines = [];
            for ($i=0,$n=max(count($pids),count($wids),count($qtys)); $i<$n; $i++) {
                $pid = (int)($pids[$i] ?? 0);
                $wid = (int)($wids[$i] ?? 0);
                $qty = (int)($qtys[$i] ?? 0);
                if ($pid<=0 || $wid<=0 || $qty<=0) continue;

                $k   = $pid.':'.$wid;
                $iss = (int)($issuedMap[$k] ?? 0);
                $ret = (int)($returnedMap[$k] ?? 0);
                $rem = max(0, $iss - $ret);
                if ($rem <= 0) continue;
                if ($qty > $rem) $qty = $rem;

                $price = isset($prs[$i]) && $prs[$i] !== '' ? (float)$prs[$i] : (float)($priceMap[$k] ?? 0);
                $lines[] = ['product_id'=>$pid,'warehouse_id'=>$wid,'qty'=>$qty,'price'=>$price];
            }

            if (!$lines) {
                $pdo->rollBack();
                flash_set('info','Nothing to return.');
                redirect('/invoices/show?id='.$invoiceId);
            }

            // 4) Create header number
            $srNo = SalesReturn::nextNumber();
            $pdo->prepare("INSERT INTO sales_returns (sr_no, sales_invoice_id, total) VALUES (?,?,0.00)")
                ->execute([$srNo, $invoiceId]);
            $srId = (int)$pdo->lastInsertId();

            // 5) Insert items, increase on-hand, ledger, simple COGS reversal
            $insItem = $pdo->prepare("INSERT INTO sales_return_items (sales_return_id, product_id, warehouse_id, qty, price, line_total)
                                      VALUES (?,?,?,?,?,?)");
            $stSel = $pdo->prepare("SELECT qty_on_hand, avg_cost FROM product_stocks WHERE product_id=? AND warehouse_id=? FOR UPDATE");
            $stUpd = $pdo->prepare("UPDATE product_stocks SET qty_on_hand = qty_on_hand + ? WHERE product_id=? AND warehouse_id=?");
            $stIns = $pdo->prepare("INSERT INTO product_stocks (product_id, warehouse_id, qty_on_hand, qty_reserved, avg_cost) VALUES (?,?,?,?,?)");
            $insLed= $pdo->prepare("INSERT INTO inventory_ledger (product_id, warehouse_id, doc_type, doc_id, qty_delta, unit_cost, value_delta)
                                    VALUES (?,?,?,?,?,?,?)");
            $insCogs = $pdo->prepare("INSERT INTO cogs_entries (invoice_id, product_id, warehouse_id, qty, unit_cost, line_cost)
                                      VALUES (?,?,?,?,?,?)");

            $subtotal = 0.0; $cogsReversal = 0.0;

            foreach ($lines as $ln) {
                $pid   = (int)$ln['product_id'];
                $wid   = (int)$ln['warehouse_id'];
                $qty   = (int)$ln['qty'];
                $price = (float)$ln['price'];
                $line  = $qty * $price;

                // stock row
                $stSel->execute([$pid,$wid]);
                $row = $stSel->fetch(\PDO::FETCH_ASSOC);
                if ($row) {
                    $avg = (float)$row['avg_cost'];
                    $stUpd->execute([$qty,$pid,$wid]);
                } else {
                    $avg = 0.0;
                    $stIns->execute([$pid,$wid,$qty,0,0.0]);
                }

                // ledger at current avg
                $insLed->execute([$pid,$wid,'sales_return',$srId, +$qty, $avg, +$qty*$avg]);

                // cogs reversal at current avg (negative qty/value in cogs_entries)
                $insCogs->execute([$invoiceId,$pid,$wid, -$qty, $avg, -$qty*$avg]);
                $cogsReversal += (-$qty * $avg); // negative value to add to cogs_total

                // item
                $insItem->execute([$srId,$pid,$wid,$qty,$price,$line]);
                $subtotal += $line;
            }

            // 6) Update SR total (no-tax in table) and adjust invoice cogs_total down
            $pdo->prepare("UPDATE sales_returns SET total=? WHERE id=?")->execute([$subtotal, $srId]);
            if ($cogsReversal !== 0.0) {
                $pdo->prepare("UPDATE invoices SET cogs_total = GREATEST(cogs_total + ?, 0.00) WHERE id=?")
                    ->execute([$cogsReversal, $invoiceId]);
            }

            $pdo->commit();
            flash_set('success', "Credit Note {$srNo} created.");
            redirect('/invoices/show?id='.$invoiceId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Create credit note failed: '.$e->getMessage());
            redirect('/invoices/show?id='.$invoiceId);
        }
    }

    /** Minimal SR view (list lines + link to print) */
    public function show(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        if ($id<=0) { redirect('/invoices'); }
        $pdo = DB::conn();

        $st = $pdo->prepare("SELECT sr.*, i.inv_no
                               FROM sales_returns sr
                               JOIN invoices i ON i.id = sr.sales_invoice_id
                              WHERE sr.id=?");
        $st->execute([$id]);
        $sr = $st->fetch(\PDO::FETCH_ASSOC);
        if (!$sr) { $this->view('errors/404',['message'=>'Credit note not found']); return; }

        $this->view('salesreturns/view', [
            'sr'    => $sr,
            'items' => SalesReturn::items((int)$sr['id']),
        ]);
    }

    /** Print credit note (compute subtotal/tax for your print.php) */
    public function printpage(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        if ($id<=0) { redirect('/invoices'); }
        $pdo = DB::conn();

        $st = $pdo->prepare("SELECT sr.*, i.inv_no, i.id AS invoice_id, i.tax_rate
                               FROM sales_returns sr
                               JOIN invoices i ON i.id = sr.sales_invoice_id
                              WHERE sr.id=?");
        $st->execute([$id]);
        $sr = $st->fetch(\PDO::FETCH_ASSOC);
        if (!$sr) { $this->view('errors/404',['message'=>'Credit note not found']); return; }

        // invoice + client name (alias as client_name to match your print.php)
        $st = $pdo->prepare("SELECT i.*, c.name AS client_name
                               FROM invoices i
                               JOIN customers c ON c.id = i.customer_id
                              WHERE i.id=?");
        $st->execute([(int)$sr['invoice_id']]);
        $inv = $st->fetch(\PDO::FETCH_ASSOC) ?: [];

        $items = SalesReturn::items((int)$sr['id']);

        // compute subtotal/tax/total for printing (your template expects these keys)
        $subtotal = 0.0;
        foreach ($items as $it) { $subtotal += (float)($it['line_total'] ?? 0); }
        $taxRate   = isset($sr['tax_rate']) ? (float)$sr['tax_rate'] : (float)($inv['tax_rate'] ?? 0.0);
        $taxAmount = round($subtotal * $taxRate / 100, 2);
        $total     = $subtotal + $taxAmount;

        $sr['subtotal']   = $subtotal;
        $sr['tax_rate']   = $taxRate;
        $sr['tax_amount'] = $taxAmount;
        $sr['total']      = $total;

        $this->view_raw('salesreturns/print', [
            'sr'    => $sr,
            'items' => $items,
            'inv'   => $inv,
        ]);
    }
}

----- END FILE: app/controllers/salesreturnscontroller.php -----

----- BEGIN FILE: app/controllers/supplierpaymentscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Models\PurchaseInvoice;
use App\Models\SupplierPayment;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;
use function App\Core\activity_log;

final class SupplierPaymentsController extends Controller
{
    public function index(): void {
        require_auth();
        $this->view('supplierpayments/index', ['items' => SupplierPayment::all(200)]);
    }

    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseinvoices'); }

        $invoiceId = (int)($_POST['invoice_id'] ?? 0);
        $amount    = (float)($_POST['amount'] ?? 0);
        $paidAt    = (string)($_POST['paid_at'] ?? '');
        $method    = trim((string)($_POST['method'] ?? 'cash'));
        $reference = trim((string)($_POST['reference'] ?? ''));
        $note      = trim((string)($_POST['note'] ?? ''));
        $return    = (string)($_POST['_return'] ?? '/purchaseinvoices');

        $pi = PurchaseInvoice::find($invoiceId);
        if (!$pi) { flash_set('error','Invoice not found.'); redirect($return); }

        if (($pi['status'] ?? 'unpaid') === 'paid') {
            flash_set('error','Invoice is fully paid; payments are locked.');
            redirect($return);
        }

        $credits = \App\Models\PurchaseReturn::creditsTotalForInvoice((int)$pi['id']);
		$remaining = max(0.0, (float)$pi['total'] - (float)$pi['paid_amount'] - (float)$credits);
        if ($remaining <= 0.0) {
            flash_set('error','Nothing to pay; invoice is already fully paid.');
            redirect($return);
        }
        $capped = false;
        if ($amount > $remaining) { $amount = $remaining; $capped = true; }
        if ($amount <= 0.0 || $paidAt === '') {
            flash_set('error','Payment requires a date and a positive amount.');
            redirect($return);
        }

        $id = SupplierPayment::create([
            'supplier_id' => (int)$pi['supplier_id'],
            'purchase_invoice_id' => $invoiceId,
            'paid_at' => $paidAt,
            'method' => $method,
            'reference' => $reference,
            'amount' => $amount,
            'note' => $note,
        ]);

        PurchaseInvoice::recalcPaidAmount($invoiceId);

        if (function_exists('App\Core\activity_log')) {
            activity_log('ap.add', 'purchase_invoice', $invoiceId, [
                'payment_id'=>$id, 'amount'=>$amount, 'method'=>$method, 'reference'=>$reference
            ]);
        }

        flash_set('success', $capped ? 'Supplier payment recorded (amount capped to remaining).' : 'Supplier payment recorded.');
        redirect($return);
    }

    public function destroy(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/purchaseinvoices'); }

        $id        = (int)($_POST['id'] ?? 0);
        $invoiceId = (int)($_POST['invoice_id'] ?? 0);
        $return    = (string)($_POST['_return'] ?? '/purchaseinvoices');

        $pi = PurchaseInvoice::find($invoiceId);
        if (!$pi) { flash_set('error','Invoice not found.'); redirect($return); }

        if (($pi['status'] ?? 'unpaid') === 'paid') {
            flash_set('error','Invoice is fully paid; payments are locked.');
            redirect($return);
        }

        if ($id > 0) {
            SupplierPayment::delete($id);
            PurchaseInvoice::recalcPaidAmount($invoiceId);

            if (function_exists('App\Core\activity_log')) {
                activity_log('ap.delete', 'purchase_invoice', $invoiceId, ['payment_id'=>$id]);
            }
            flash_set('success','Supplier payment deleted.');
        }
        redirect($return);
    }
}

----- END FILE: app/controllers/supplierpaymentscontroller.php -----

----- BEGIN FILE: app/controllers/supplierscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Models\Supplier;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class SuppliersController extends Controller
{
    public function index(): void {
        require_auth();
        $items = \App\Models\Supplier::allWithBalance();
    $this->view('suppliers/index', ['items' => $items]);
    }

    public function create(): void {
        require_auth();
        $this->view('suppliers/form', ['mode'=>'create', 'item'=>['name'=>'','phone'=>'','email'=>'','address'=>'']]);
    }

    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/suppliers'); }
        $d = [
            'name' => trim((string)($_POST['name'] ?? '')),
            'phone' => trim((string)($_POST['phone'] ?? '')),
            'email' => trim((string)($_POST['email'] ?? '')),
            'address' => trim((string)($_POST['address'] ?? '')),
        ];
        if ($d['name'] === '') { flash_set('error','Name is required.'); redirect('/suppliers/create'); }
        $id = Supplier::create($d);
        flash_set('success','Supplier created.');
        redirect('/suppliers/edit?id='.$id);
    }

    public function edit(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $it = Supplier::find($id);
        if (!$it) { flash_set('error','Not found.'); redirect('/suppliers'); }
        $this->view('suppliers/form', ['mode'=>'edit', 'item'=>$it]);
    }

    public function update(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/suppliers'); }
        $id = (int)($_POST['id'] ?? 0);
        $it = Supplier::find($id);
        if (!$it) { flash_set('error','Not found.'); redirect('/suppliers'); }
        $d = [
            'name' => trim((string)($_POST['name'] ?? '')),
            'phone' => trim((string)($_POST['phone'] ?? '')),
            'email' => trim((string)($_POST['email'] ?? '')),
            'address' => trim((string)($_POST['address'] ?? '')),
        ];
        if ($d['name'] === '') { flash_set('error','Name is required.'); redirect('/suppliers/edit?id='.$id); }
        Supplier::update($id, $d);
        flash_set('success','Supplier saved.');
        redirect('/suppliers/edit?id='.$id);
    }

    public function destroy(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/suppliers'); }
        $id = (int)($_POST['id'] ?? 0);
        if ($id > 0) { Supplier::delete($id); flash_set('success','Supplier deleted.'); }
        redirect('/suppliers');
    }
	
	public function statement(): void {
        require_auth();
        $id   = (int)($_GET['id'] ?? 0);
        $from = $_GET['from'] ?? date('Y-m-01');     // default: this month start
        $to   = $_GET['to']   ?? date('Y-m-d');      // default: today

        $supplier = Supplier::find($id);
        if (!$supplier) {
            $this->view('errors/404', ['message' => 'Supplier not found']); return;
        }

        $opening   = Supplier::apOpeningBalance($id, $from);
        $rows      = Supplier::apMovements($id, $from, $to);

        // running balance
        $running = $opening;
        foreach ($rows as &$r) {
            $running += (float)$r['debit'] - (float)$r['credit'];
            $r['running'] = $running;
        }
        unset($r);

        $this->view('suppliers/statement', [
            'supplier' => $supplier,
            'from'     => $from,
            'to'       => $to,
            'opening'  => $opening,
            'rows'     => $rows,
            'closing'  => $running,
        ]);
    }
	public function show(): void {
    \App\Core\require_auth();

    $id = (int)($_GET['id'] ?? 0);
    if ($id <= 0) { \App\Core\redirect('/suppliers'); }

    $pdo = \App\Core\DB::conn();

    // supplier row
    $supplier = \App\Models\Supplier::find($id);
    if (!$supplier) {
        $this->view('errors/404', ['message' => 'Supplier not found']); return;
    }

    // purchase orders
    $st = $pdo->prepare("SELECT id, po_no, status, total, created_at
                         FROM purchase_orders
                         WHERE supplier_id=? ORDER BY id DESC LIMIT 200");
    $st->execute([$id]);
    $po_list = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];

    // receipts (delivered items) for this supplier (via PI)
    $sqlReceipts = "SELECT r.id, r.created_at, p.code AS product_code, p.name AS product_name,
                           w.name AS warehouse_name, r.qty, r.price, (r.qty*r.price) AS line_total,
                           pi.id AS purchase_invoice_id, pi.pi_no
                    FROM receipts r
                    JOIN purchase_invoices pi ON pi.id = r.purchase_invoice_id
                    JOIN products p ON p.id = r.product_id
                    JOIN warehouses w ON w.id = r.warehouse_id
                    WHERE pi.supplier_id = ?
                    ORDER BY r.id DESC LIMIT 200";
    $st = $pdo->prepare($sqlReceipts); $st->execute([$id]);
    $receipt_items = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];

    // purchase invoices
    $st = $pdo->prepare("SELECT id, pi_no, total, paid_amount, status, created_at
                         FROM purchase_invoices
                         WHERE supplier_id=? ORDER BY id DESC LIMIT 200");
    $st->execute([$id]);
    $pi_list = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];

    // supplier payments (AP)
    $st = $pdo->prepare("SELECT id, paid_at, method, reference, amount
                         FROM supplier_payments
                         WHERE supplier_id=? ORDER BY paid_at DESC, id DESC LIMIT 200");
    $st->execute([$id]);
    $spayments = $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];

    // quick AP totals
    $inv_total = (float)$pdo->query("SELECT COALESCE(SUM(total),0) FROM purchase_invoices WHERE supplier_id=".$id)->fetchColumn();
    $pay_total = (float)$pdo->query("SELECT COALESCE(SUM(amount),0) FROM supplier_payments WHERE supplier_id=".$id)->fetchColumn();
    $ret_total = (float)$pdo->query("SELECT COALESCE(SUM(total),0) FROM purchase_returns WHERE supplier_id=".$id)->fetchColumn();
    $ap_balance = max(0.0, $inv_total - $pay_total - $ret_total);

    $this->view('suppliers/view', [
        'supplier'      => $supplier,
        'po_list'       => $po_list,
        'receipt_items' => $receipt_items,
        'pi_list'       => $pi_list,
        'spayments'     => $spayments,
        'ap_balance'    => $ap_balance,
        'inv_total'     => $inv_total,
        'pay_total'     => $pay_total,
        'ret_total'     => $ret_total,
    ]);
}
}

----- END FILE: app/controllers/supplierscontroller.php -----

----- BEGIN FILE: app/controllers/transferscontroller.php -----
<?php declare(strict_types=1);
namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use PDO;

use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class TransfersController extends Controller
{
    public function index(): void {
        require_auth();
        $pdo = DB::conn();
        $rows = $pdo->query("SELECT id,tr_no,from_warehouse_id,to_warehouse_id,created_at FROM stock_transfers ORDER BY id DESC LIMIT 200")
                    ->fetchAll(PDO::FETCH_ASSOC) ?: [];
        // map warehouse names
        $ws = $pdo->query("SELECT id,name FROM warehouses")->fetchAll(PDO::FETCH_KEY_PAIR) ?: [];
        foreach ($rows as &$r) {
            $r['from_name'] = $ws[(int)$r['from_warehouse_id']] ?? ('#'.$r['from_warehouse_id']);
            $r['to_name']   = $ws[(int)$r['to_warehouse_id']]   ?? ('#'.$r['to_warehouse_id']);
        }
        unset($r);
        $this->view('transfers/index', ['items'=>$rows]);
    }

    public function create(): void {
        require_auth();
        $pdo = DB::conn();
        $warehouses = $pdo->query("SELECT id,name FROM warehouses ORDER BY name")->fetchAll(PDO::FETCH_ASSOC) ?: [];
        $products   = $pdo->query("SELECT id, code, name FROM products ORDER BY code, name")->fetchAll(PDO::FETCH_ASSOC) ?: [];
        $this->view('transfers/form', ['warehouses'=>$warehouses, 'products'=>$products]);
    }

    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/transfers'); }

        $from = (int)($_POST['from_warehouse_id'] ?? 0);
        $to   = (int)($_POST['to_warehouse_id'] ?? 0);
        $note = trim((string)($_POST['note'] ?? ''));
        $pids = $_POST['product_id'] ?? [];
        $qtys = $_POST['qty'] ?? [];

        if ($from<=0 || $to<=0 || $from===$to) {
            flash_set('error','Choose different From/To warehouses.'); redirect('/transfers/create');
        }

        $pdo = DB::conn(); $pdo->beginTransaction();
        try {
            // insert header with placeholder number
            $pdo->prepare("INSERT INTO stock_transfers (tr_no, from_warehouse_id, to_warehouse_id, note) VALUES ('',?,?,?)")
                ->execute([$from,$to,$note]);
            $trId = (int)$pdo->lastInsertId();
            $trNo = 'TR'.date('ymd').'-'.str_pad((string)$trId, 4, '0', STR_PAD_LEFT);
            $pdo->prepare("UPDATE stock_transfers SET tr_no=? WHERE id=?")->execute([$trNo,$trId]);

            $insItem = $pdo->prepare("INSERT INTO stock_transfer_items (stock_transfer_id, product_id, qty) VALUES (?,?,?)");

            for ($i=0, $n=max(count($pids),count($qtys)); $i<$n; $i++) {
                $pid = (int)($pids[$i] ?? 0);
                $qty = (int)($qtys[$i] ?? 0);
                if ($pid<=0 || $qty<=0) continue;

                // 1) lock source stock (composite key) and read avg_cost
                $st = $pdo->prepare("
                    SELECT qty_on_hand, qty_reserved, avg_cost
                      FROM product_stocks
                     WHERE product_id=? AND warehouse_id=?
                     FOR UPDATE
                ");
                $st->execute([$pid, $from]);
                $src = $st->fetch(PDO::FETCH_ASSOC);

                $on  = (int)($src['qty_on_hand'] ?? 0);
                $res = (int)($src['qty_reserved'] ?? 0);
                $free = $on - $res;
                if ($qty > $free) {
                    throw new \RuntimeException("Insufficient free stock for product #{$pid} in source warehouse.");
                }
                $srcAvg = (float)($src['avg_cost'] ?? 0.0);

                // 2) decrement source on-hand
                $pdo->prepare("UPDATE product_stocks SET qty_on_hand = qty_on_hand - ? WHERE product_id=? AND warehouse_id=?")
                    ->execute([$qty, $pid, $from]);

                // 3) ledger: transfer_out at source avg
                $pdo->prepare("
                    INSERT INTO inventory_ledger (product_id, warehouse_id, doc_type, doc_id, qty_delta, unit_cost, value_delta)
                    VALUES (?,?,?,?,?,?,?)
                ")->execute([$pid, $from, 'transfer_out', $trId, -$qty, $srcAvg, -$qty * $srcAvg]);

                // 4) increment destination and recompute dest avg using source avg as incoming unit cost
                $st = $pdo->prepare("
                    SELECT qty_on_hand, avg_cost
                      FROM product_stocks
                     WHERE product_id=? AND warehouse_id=?
                     FOR UPDATE
                ");
                $st->execute([$pid,$to]);
                $dst = $st->fetch(PDO::FETCH_ASSOC);

                if ($dst) {
                    $oldQty  = (int)$dst['qty_on_hand'];
                    $oldCost = (float)$dst['avg_cost'];
                    $newQty  = $oldQty + $qty;
                    $newAvg  = $newQty > 0 ? ( ($oldQty * $oldCost) + ($qty * $srcAvg) ) / $newQty : $srcAvg;

                    $pdo->prepare("UPDATE product_stocks SET qty_on_hand=?, avg_cost=? WHERE product_id=? AND warehouse_id=?")
                        ->execute([$newQty, $newAvg, $pid, $to]);
                } else {
                    $pdo->prepare("INSERT INTO product_stocks (product_id, warehouse_id, qty_on_hand, qty_reserved, avg_cost) VALUES (?,?,?,?,?)")
                        ->execute([$pid,$to,$qty,0,$srcAvg]);
                }

                // 5) ledger: transfer_in at same unit cost
                $pdo->prepare("
                    INSERT INTO inventory_ledger (product_id, warehouse_id, doc_type, doc_id, qty_delta, unit_cost, value_delta)
                    VALUES (?,?,?,?,?,?,?)
                ")->execute([$pid, $to, 'transfer_in', $trId, $qty, $srcAvg, $qty * $srcAvg]);

                // 6) item row
                $insItem->execute([$trId,$pid,$qty]);
            }

            $pdo->commit();
            flash_set('success',"Transfer {$trNo} created.");
            redirect('/transfers/show?id='.$trId);
        } catch (\Throwable $e) {
            $pdo->rollBack();
            flash_set('error','Save failed: '.$e->getMessage());
            redirect('/transfers/create');
        }
    }

    public function show(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        if ($id<=0) { redirect('/transfers'); }

        $pdo = DB::conn();
        $st = $pdo->prepare("SELECT * FROM stock_transfers WHERE id=? LIMIT 1");
        $st->execute([$id]);
        $t = $st->fetch(PDO::FETCH_ASSOC);
        if (!$t) { $this->view('errors/404',['message'=>'Transfer not found']); return; }

        $items = $pdo->prepare("SELECT i.*, p.code AS product_code, p.name AS product_name
                                FROM stock_transfer_items i
                                JOIN products p ON p.id=i.product_id
                                WHERE i.stock_transfer_id=? ORDER BY i.id");
        $items->execute([$id]);
        $rows = $items->fetchAll(PDO::FETCH_ASSOC) ?: [];

        $ws = $pdo->query("SELECT id,name FROM warehouses")->fetchAll(PDO::FETCH_KEY_PAIR) ?: [];
        $t['from_name'] = $ws[(int)$t['from_warehouse_id']] ?? ('#'.$t['from_warehouse_id']);
        $t['to_name']   = $ws[(int)$t['to_warehouse_id']]   ?? ('#'.$t['to_warehouse_id']);

        $this->view('transfers/view', ['t'=>$t,'items'=>$rows]);
    }

    public function printnote(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        if ($id<=0) { redirect('/transfers'); }

        $pdo = DB::conn();
        $st = $pdo->prepare("SELECT * FROM stock_transfers WHERE id=? LIMIT 1");
        $st->execute([$id]);
        $t = $st->fetch(PDO::FETCH_ASSOC);
        if (!$t) { $this->view('errors/404',['message'=>'Transfer not found']); return; }

        $items = $pdo->prepare("SELECT i.*, p.code AS product_code, p.name AS product_name
                                FROM stock_transfer_items i
                                JOIN products p ON p.id=i.product_id
                                WHERE i.stock_transfer_id=? ORDER BY i.id");
        $items->execute([$id]);
        $rows = $items->fetchAll(PDO::FETCH_ASSOC) ?: [];

        $ws = $pdo->query("SELECT id,name FROM warehouses")->fetchAll(PDO::FETCH_KEY_PAIR) ?: [];
        $t['from_name'] = $ws[(int)$t['from_warehouse_id']] ?? ('#'.$t['from_warehouse_id']);
        $t['to_name']   = $ws[(int)$t['to_warehouse_id']]   ?? ('#'.$t['to_warehouse_id']);

        $this->view('transfers/print', ['t'=>$t,'items'=>$rows]);
    }
}

----- END FILE: app/controllers/transferscontroller.php -----

----- BEGIN FILE: app/controllers/usercontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Core\DB;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class UserController extends Controller
{
    public function profile(): void
    {
        require_auth();
        $this->view('user/profile', []);
    }

    public function changepassword(): void
    {
        require_auth();

        if (!verify_csrf_post()) {
            http_response_code(419);
            flash_set('error', 'Invalid session token. Please try again.');
            redirect('/profile');
        }

        $current = (string)($_POST['current_password'] ?? '');
        $new     = (string)($_POST['new_password'] ?? '');
        $confirm = (string)($_POST['new_password_confirm'] ?? '');

        if ($new === '' || $confirm === '' || $current === '') {
            flash_set('error', 'All fields are required.');
            redirect('/profile');
        }
        if ($new !== $confirm) {
            flash_set('error', 'New passwords do not match.');
            redirect('/profile');
        }
        if (strlen($new) < 8) {
            flash_set('error', 'New password must be at least 8 characters.');
            redirect('/profile');
        }

        $uid = (int)($_SESSION['user']['id'] ?? 0);
        $stmt = DB::conn()->prepare('SELECT password_hash FROM users WHERE id = ? LIMIT 1');
        $stmt->execute([$uid]);
        $row = $stmt->fetch();
        if (!$row || !password_verify($current, $row['password_hash'])) {
            flash_set('error', 'Current password is incorrect.');
            redirect('/profile');
        }

        $newHash = password_hash($new, PASSWORD_BCRYPT);
        $upd = DB::conn()->prepare('UPDATE users SET password_hash = ? WHERE id = ?');
        $upd->execute([$newHash, $uid]);

        flash_set('success', 'Password updated successfully.');
        redirect('/profile');
    }
}

----- END FILE: app/controllers/usercontroller.php -----

----- BEGIN FILE: app/controllers/warehousescontroller.php -----
<?php declare(strict_types=1);

namespace App\Controllers;

use App\Core\Controller;
use App\Models\Warehouse;
use App\Models\Note;
use function App\Core\require_auth;
use function App\Core\verify_csrf_post;
use function App\Core\flash_set;
use function App\Core\redirect;

final class WarehousesController extends Controller
{
    public function index(): void {
        require_auth();
        $this->view('warehouses/index', ['items' => Warehouse::all()]);
    }
    public function create(): void {
        require_auth();
        $this->view('warehouses/form', ['mode'=>'create','item'=>null]);
    }
    public function store(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/warehouses'); }
        $code = trim((string)($_POST['code'] ?? ''));
        $name = trim((string)($_POST['name'] ?? ''));
        $loc  = trim((string)($_POST['location'] ?? ''));
        if ($code===''||$name===''){ flash_set('error','Code and name are required.'); redirect('/warehouses/create'); }
        try { Warehouse::create($code,$name,$loc ?: null); flash_set('success','Warehouse created.'); }
        catch(\Throwable $e){ flash_set('error','Error: '.$e->getMessage()); }
        redirect('/warehouses');
    }
    public function edit(): void {
        require_auth();
        $id = (int)($_GET['id'] ?? 0);
        $item = Warehouse::find($id);
        if(!$item){ flash_set('error','Not found.'); redirect('/warehouses'); }
        $this->view('warehouses/form',['mode'=>'edit','item'=>$item,'notes'=> Note::for('warehouse', (int)$it['id'])]);
    }
    public function update(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/warehouses'); }
        $id=(int)($_POST['id']??0);
        $code=trim((string)($_POST['code']??'')); $name=trim((string)($_POST['name']??'')); $loc=trim((string)($_POST['location']??''));
        if($id<=0||$code===''||$name===''){ flash_set('error','Invalid form data.'); redirect('/warehouses'); }
        try { Warehouse::update($id,$code,$name,$loc?:null); flash_set('success','Warehouse updated.'); }
        catch(\Throwable $e){ flash_set('error','Error: '.$e->getMessage()); redirect('/warehouses/edit?id='.$id); }
        redirect('/warehouses');
    }
    public function destroy(): void {
        require_auth();
        if (!verify_csrf_post()) { flash_set('error','Invalid session.'); redirect('/warehouses'); }
        $id=(int)($_POST['id']??0);
        if($id<=0){ flash_set('error','Invalid id.'); redirect('/warehouses'); }
        if(!Warehouse::delete($id)){ flash_set('error','Cannot delete: stock exists.'); }
        else { flash_set('success','Warehouse deleted.'); }
        redirect('/warehouses');
    }
}

----- END FILE: app/controllers/warehousescontroller.php -----

----- BEGIN FILE: app/core/bootstrap.php -----
<?php declare(strict_types=1);

// PSR-ish autoloader (lowercase files)
spl_autoload_register(function ($class) {
    $prefix = 'App\\';
    if (strpos($class, $prefix) === 0) {
        $relative = substr($class, strlen($prefix));
        $relative = str_replace('\\', '/', $relative);
        $path = __DIR__ . '/../' . strtolower($relative) . '.php';
        if (file_exists($path)) {
            require $path;
        }
    }
});

require __DIR__ . '/env.php';
require __DIR__ . '/helpers.php';
require __DIR__ . '/flash.php';

use App\Core\Env;

// timezone & error display from .env
date_default_timezone_set(Env::get('APP_TIMEZONE', 'UTC'));
$debug = Env::get('APP_DEBUG', 'false') === 'true';
ini_set('display_errors', $debug ? '1' : '0');
error_reporting(E_ALL);

// secure session
if (session_status() !== PHP_SESSION_ACTIVE) {
    $isHttps = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off');
    session_set_cookie_params([
        'lifetime' => 0,
        'path'     => '/',
        'secure'   => $isHttps,
        'httponly' => true,
        'samesite' => 'Lax',
    ]);
    session_start();
}

----- END FILE: app/core/bootstrap.php -----

----- BEGIN FILE: app/core/controller.php -----
<?php declare(strict_types=1);

namespace App\Core;

abstract class Controller
{
    protected function view(string $view, array $params = []): void
    {
        extract($params, EXTR_OVERWRITE);

        $content = $this->render($view, $params);

        // layout wrapper
        include __DIR__ . '/../views/layouts/main.php';
    }

protected function view_raw(string $view, array $params = []): void
{
    // Render a view file directly, without layouts (perfect for print/PDF).
    extract($params, EXTR_SKIP);
    $__view_file = __DIR__ . '/../views/' . $view . '.php';
    if (!is_file($__view_file)) {
        throw new \RuntimeException("View not found: {$view}");
    }
    include $__view_file;
}

    protected function render(string $view, array $params = []): string
    {
        extract($params, EXTR_OVERWRITE);
        ob_start();
        include __DIR__ . '/../views/' . $view . '.php';
        return (string) ob_get_clean();
    }
}

----- END FILE: app/core/controller.php -----

----- BEGIN FILE: app/core/db.php -----
<?php declare(strict_types=1);

namespace App\Core;

use PDO;
use PDOException;
use RuntimeException;

final class DB
{
    private static ?PDO $pdo = null;

    public static function conn(): PDO
    {
        if (self::$pdo !== null) {
            return self::$pdo;
        }

        $host = Env::get('DB_HOST', '127.0.0.1');
        $port = Env::get('DB_PORT', '3306');
        $name = Env::get('DB_NAME', '');
        $user = Env::get('DB_USER', '');
        $pass = Env::get('DB_PASS', '');

        $dsn = "mysql:host={$host};port={$port};dbname={$name};charset=utf8mb4";

        try {
            self::$pdo = new PDO(
                $dsn,
                $user,
                $pass,
                [
                    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                    PDO::ATTR_EMULATE_PREPARES   => false,
                ]
            );
        } catch (PDOException $e) {
            // don’t leak credentials; expose reason
            throw new RuntimeException("Database connection failed: " . $e->getMessage(), 0, $e);
        }

        return self::$pdo;
    }
}

----- END FILE: app/core/db.php -----

----- BEGIN FILE: app/core/env.php -----
<?php declare(strict_types=1);

namespace App\Core;

final class Env
{
    private static ?array $cache = null;

    public static function get(string $key, ?string $default = null): ?string
    {
        if (self::$cache === null) {
            $file = __DIR__ . '/../../config/.env';
            self::$cache = file_exists($file)
                ? parse_ini_file($file, false, INI_SCANNER_TYPED) ?: []
                : [];
        }
        return isset(self::$cache[$key]) ? (string) self::$cache[$key] : $default;
    }
}

function env(string $key, ?string $default = null): ?string
{
    return Env::get($key, $default);
}

----- END FILE: app/core/env.php -----

----- BEGIN FILE: app/core/flash.php -----
<?php declare(strict_types=1);

namespace App\Core;

function flash_set(string $type, string $message): void
{
    $_SESSION['flash'][$type] = $message;
}

function flash_get(string $type): ?string
{
    if (!isset($_SESSION['flash'][$type])) return null;
    $msg = $_SESSION['flash'][$type];
    unset($_SESSION['flash'][$type]);
    return $msg;
}

function has_flash(string $type): bool
{
    return isset($_SESSION['flash'][$type]);
}



function require_auth(): void
{
    if (!auth_check()) {
        flash_set('error', 'Please log in to continue.');
        redirect('/login');
    }
}

----- END FILE: app/core/flash.php -----

----- BEGIN FILE: app/core/helpers.php -----
<?php declare(strict_types=1);

namespace App\Core;

function base_url(string $path = ''): string
{
    $base = Env::get('APP_URL', '/');
    return rtrim($base, '/') . '/' . ltrim($path, '/');
}

function format_note_html(string $text): string {
    // 1) escape HTML
    $safe = htmlspecialchars($text, ENT_QUOTES, 'UTF-8');

    // 2) linkify http/https URLs (very conservative pattern)
    $safe = preg_replace(
        '~(https?://[^\s<]+)~i',
        '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>',
        $safe
    );

    // 3) newlines -> <br>
    return nl2br($safe, false);
}

/**
 * Build a URL to current path with a replaced/added query param.
 * Minimal helper for pagination/checkbox toggles.
 */
function url_with_query(array $pairs): string {
    $uri  = $_SERVER['REQUEST_URI'] ?? '/';
    $parts = parse_url($uri);
    $path = $parts['path'] ?? '/';
    parse_str($parts['query'] ?? '', $q);
    foreach ($pairs as $k => $v) {
        if ($v === null) unset($q[$k]); else $q[$k] = $v;
    }
    $qs = http_build_query($q);
    return $path . ($qs ? ('?' . $qs) : '');
}
function redirect(string $to): void
{
    // If already absolute (http/https), use as-is
    if (preg_match('~^https?://~i', $to)) {
        header('Location: ' . $to);
    } else {
        header('Location: ' . base_url($to));
    }
    exit;
}
function activity_log(string $action, string $entity_type, int $entity_id, array $meta = []): void
{
    try {
        if (!isset($_SESSION)) { session_start(); }
        $actor = $_SESSION['user']['email'] ?? 'system';
        $pdo = DB::conn();
        $st = $pdo->prepare("INSERT INTO activity_log (actor, action, entity_type, entity_id, meta)
                             VALUES (?,?,?,?,?)");
        $st->execute([$actor, $action, $entity_type, $entity_id, json_encode($meta, JSON_UNESCAPED_UNICODE)]);
    } catch (\Throwable $e) {
        // logging is best-effort; ignore failures
    }
}
/** CSRF utilities */
function csrf_token(): string
{
    if (empty($_SESSION['csrf'])) {
        $_SESSION['csrf'] = bin2hex(random_bytes(32));
    }
    return $_SESSION['csrf'];
}
function csrf_field(): string
{
    return '<input type="hidden" name="_token" value="' . htmlspecialchars(csrf_token(), ENT_QUOTES, 'UTF-8') . '">';
}
function verify_csrf_post(): bool
{
    return isset($_POST['_token'], $_SESSION['csrf']) && hash_equals($_SESSION['csrf'], (string)$_POST['_token']);
}

/** Simple auth helpers */
function auth_user(): ?array
{
    return $_SESSION['user'] ?? null;
}
function auth_check(): bool
{
    return isset($_SESSION['user']);
}

----- END FILE: app/core/helpers.php -----

----- BEGIN FILE: app/core/logger.php -----
<?php declare(strict_types=1);

namespace App\Core;

final class Logger
{
    public static function log(string $level, string $message, array $context = []): void
    {
        $dir = __DIR__ . '/../../storage/logs';
        if (!is_dir($dir)) {
            @mkdir($dir, 0775, true);
        }
        $line = sprintf(
            "%s %s %s %s%s",
            date('c'),
            strtoupper($level),
            $message,
            $context ? json_encode($context, JSON_UNESCAPED_SLASHES) : '',
            PHP_EOL
        );
        @file_put_contents($dir . '/app.log', $line, FILE_APPEND | LOCK_EX);
    }
    public static function info(string $message, array $context = []): void  { self::log('info',  $message, $context); }
    public static function error(string $message, array $context = []): void { self::log('error', $message, $context); }
}

----- END FILE: app/core/logger.php -----

----- BEGIN FILE: app/core/router.php -----
<?php declare(strict_types=1);

namespace App\Core;

final class Router
{
    private array $routes = ['GET' => [], 'POST' => []];

    public function get(string $path, $action): void { $this->routes['GET'][$path] = $action; }
    public function post(string $path, $action): void { $this->routes['POST'][$path] = $action; }

    public function dispatch(): void
    {
        $method = $_SERVER['REQUEST_METHOD'] ?? 'GET';
        $uri    = parse_url($_SERVER['REQUEST_URI'] ?? '/', PHP_URL_PATH) ?: '/';

        $action = $this->routes[$method][$uri] ?? null;

        if ($action === null) {
            (new \App\Controllers\ErrorController())->notFound();
            return;
        }

        if (is_callable($action)) {
            $action();
            return;
        }

        if (is_string($action) && strpos($action, '@') !== false) {
            [$controllerFile, $methodName] = explode('@', $action, 2);
            $class = $this->resolveControllerClass($controllerFile);
            $fqcn  = '\\App\\Controllers\\' . $class;
            if (!class_exists($fqcn)) {
                // class autoload will try to include app/controllers/{lower}.php
            }
            if (!class_exists($fqcn)) {
                throw new \RuntimeException("Controller class {$fqcn} not found");
            }
            $controller = new $fqcn();
            if (!method_exists($controller, $methodName)) {
                throw new \RuntimeException("Method {$methodName} not found on {$fqcn}");
            }
            $controller->{$methodName}();
            return;
        }

        throw new \RuntimeException('Invalid route action');
    }

    private function resolveControllerClass(string $file): string
    {
        $file = strtolower($file);
        if (str_ends_with($file, 'controller')) {
            $base = substr($file, 0, -10);
            return ucfirst($base) . 'Controller';
        }
        return ucfirst($file);
    }
}

----- END FILE: app/core/router.php -----

----- BEGIN FILE: app/models/category.php -----
<?php declare(strict_types=1);

namespace App\Models;

use App\Core\DB;
use PDO;

final class Category
{
    public static function all(): array
    {
        $stmt = DB::conn()->query('SELECT c.id, c.name, c.slug, c.parent_id,
                  p.name AS parent_name
               FROM categories c
               LEFT JOIN categories p ON p.id = c.parent_id
               ORDER BY COALESCE(p.name, c.name), c.name');
        return $stmt->fetchAll() ?: [];
    }

    public static function find(int $id): ?array
    {
        $stmt = DB::conn()->prepare('SELECT * FROM categories WHERE id = ? LIMIT 1');
        $stmt->execute([$id]);
        $row = $stmt->fetch(PDO::FETCH_ASSOC);
        return $row ?: null;
    }

    public static function create(?int $parentId, string $name, string $slug): int
    {
        $stmt = DB::conn()->prepare('INSERT INTO categories (parent_id, name, slug) VALUES (?, ?, ?)');
        $stmt->execute([$parentId, $name, $slug]);
        return (int) DB::conn()->lastInsertId();
    }

    public static function update(int $id, ?int $parentId, string $name, string $slug): void
    {
        $stmt = DB::conn()->prepare('UPDATE categories SET parent_id = ?, name = ?, slug = ? WHERE id = ?');
        $stmt->execute([$parentId, $name, $slug, $id]);
    }

    public static function delete(int $id): bool
    {
        // prevent deleting if it has children
        $check = DB::conn()->prepare('SELECT COUNT(*) FROM categories WHERE parent_id = ?');
        $check->execute([$id]);
        if ((int)$check->fetchColumn() > 0) return false;

        $stmt = DB::conn()->prepare('DELETE FROM categories WHERE id = ?');
        return $stmt->execute([$id]);
    }

    public static function options(int $excludeId = 0): array
    {
        $stmt = DB::conn()->prepare('SELECT id, name FROM categories WHERE id <> ? ORDER BY name');
        $stmt->execute([$excludeId]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
}

----- END FILE: app/models/category.php -----

----- BEGIN FILE: app/models/customer.php -----
<?php declare(strict_types=1);

namespace App\Models;

use App\Core\DB;
use PDO;

final class Customer
{
    public static function all(): array {
        $st = DB::conn()->query('SELECT id, name, phone, email FROM customers ORDER BY name');
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
    public static function find(int $id): ?array {
        $st = DB::conn()->prepare('SELECT * FROM customers WHERE id=? LIMIT 1');
        $st->execute([$id]);
        $r = $st->fetch(PDO::FETCH_ASSOC);
        return $r ?: null;
    }
    public static function create(array $d): int {
        $st = DB::conn()->prepare('INSERT INTO customers (name, phone, email, address) VALUES (?,?,?,?)');
        $st->execute([$d['name'], $d['phone'], $d['email'], $d['address']]);
        return (int)DB::conn()->lastInsertId();
    }
    public static function update(int $id, array $d): void {
        $st = DB::conn()->prepare('UPDATE customers SET name=?, phone=?, email=?, address=? WHERE id=?');
        $st->execute([$d['name'], $d['phone'], $d['email'], $d['address'], $id]);
    }
    public static function delete(int $id): bool {
        // allow delete if no quotes
        $q = DB::conn()->prepare('SELECT COUNT(*) FROM quotes WHERE customer_id=?');
        $q->execute([$id]);
        if ((int)$q->fetchColumn() > 0) return false;
        $st = DB::conn()->prepare('DELETE FROM customers WHERE id=?');
        return $st->execute([$id]);
    }
    public static function options(): array {
        $st = DB::conn()->query('SELECT id, name FROM customers ORDER BY name');
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
}

----- END FILE: app/models/customer.php -----

----- BEGIN FILE: app/models/invoice.php -----
<?php declare(strict_types=1);
namespace App\Models;

use App\Core\DB;
use PDO;

final class Invoice
{
    public static function nextNumber(): string {
        $y = date('Y');
        $st = DB::conn()->prepare("SELECT LPAD(COALESCE(MAX(CAST(SUBSTRING(inv_no,6) AS UNSIGNED)),0)+1,4,'0')
                                   FROM invoices WHERE inv_no LIKE CONCAT('INV',$y,'-%')");
        $st->execute();
        $seq = (string)($st->fetchColumn() ?: '0001');
        return 'INV'.$y.'-'.$seq;
    }

    public static function all(): array {
        $sql = "SELECT i.*, c.name AS customer_name
                FROM invoices i JOIN customers c ON c.id=i.customer_id
                ORDER BY i.id DESC";
        return DB::conn()->query($sql)->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function find(int $id): ?array {
        $st = DB::conn()->prepare("SELECT i.*, c.name AS customer_name
                                   FROM invoices i JOIN customers c ON c.id=i.customer_id
                                   WHERE i.id=?");
        $st->execute([$id]);
        $row = $st->fetch(PDO::FETCH_ASSOC);
        return $row ?: null;
    }

    public static function items(int $id): array {
        $sql = "SELECT it.*, p.code AS product_code, p.name AS product_name, w.name AS warehouse_name
                FROM invoice_items it
                JOIN products p ON p.id=it.product_id
                JOIN warehouses w ON w.id=it.warehouse_id
                WHERE it.invoice_id=?";
        $st = DB::conn()->prepare($sql); $st->execute([$id]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function payments(int $id): array {
        $st = DB::conn()->prepare("SELECT * FROM invoice_payments WHERE invoice_id=? ORDER BY id DESC");
        $st->execute([$id]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function recalcPaidAmount(int $id): void {
        $pdo = DB::conn();
        $sum = (float)($pdo->prepare("SELECT COALESCE(SUM(amount),0) FROM invoice_payments WHERE invoice_id=?")
                            ->execute([$id]) ? $pdo->query("SELECT COALESCE(SUM(amount),0) FROM invoice_payments WHERE invoice_id={$id}")->fetchColumn() : 0);
        // safer:
        $st = $pdo->prepare("SELECT COALESCE(SUM(amount),0) FROM invoice_payments WHERE invoice_id=?");
        $st->execute([$id]); $sum = (float)$st->fetchColumn();

        $st2 = $pdo->prepare("SELECT total FROM invoices WHERE id=?");
        $st2->execute([$id]); $total = (float)$st2->fetchColumn();

        $status = ($sum <= 0.0) ? 'unpaid' : (($sum + 0.00001 < $total) ? 'partial' : 'paid');
        $upd = $pdo->prepare("UPDATE invoices SET paid_amount=?, status=? WHERE id=?");
        $upd->execute([$sum, $status, $id]);
    }
}

----- END FILE: app/models/invoice.php -----

----- BEGIN FILE: app/models/make.php -----
<?php declare(strict_types=1);

namespace App\Models;

use App\Core\DB;
use PDO;

final class Make
{
    public static function all(): array
    {
        $stmt = DB::conn()->query('SELECT id, name, slug FROM makes ORDER BY name');
        return $stmt->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function find(int $id): ?array
    {
        $stmt = DB::conn()->prepare('SELECT * FROM makes WHERE id = ? LIMIT 1');
        $stmt->execute([$id]);
        $row = $stmt->fetch(PDO::FETCH_ASSOC);
        return $row ?: null;
    }

    public static function create(string $name, string $slug): int
    {
        $stmt = DB::conn()->prepare('INSERT INTO makes (name, slug) VALUES (?, ?)');
        $stmt->execute([$name, $slug]);
        return (int) DB::conn()->lastInsertId();
    }

    public static function update(int $id, string $name, string $slug): void
    {
        $stmt = DB::conn()->prepare('UPDATE makes SET name = ?, slug = ? WHERE id = ?');
        $stmt->execute([$name, $slug, $id]);
    }

    public static function delete(int $id): bool
    {
        // block delete if models exist
        $check = DB::conn()->prepare('SELECT COUNT(*) FROM vehicle_models WHERE make_id = ?');
        $check->execute([$id]);
        if ((int)$check->fetchColumn() > 0) return false;

        $stmt = DB::conn()->prepare('DELETE FROM makes WHERE id = ?');
        return $stmt->execute([$id]);
    }

    public static function options(): array
    {
        $stmt = DB::conn()->query('SELECT id, name FROM makes ORDER BY name');
        return $stmt->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
}

----- END FILE: app/models/make.php -----

----- BEGIN FILE: app/models/note.php -----
<?php declare(strict_types=1);

namespace App\Models;

use App\Core\DB;

final class Note
{
    public static function for(string $entityType, int $entityId): array
    {
        $st = DB::conn()->prepare(
            'SELECT id, is_public, body, created_by, created_at
             FROM notes
             WHERE entity_type = ? AND entity_id = ?
             ORDER BY id DESC'
        );
        $st->execute([$entityType, $entityId]);
        return $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];
    }

    public static function publicFor(string $entityType, int $entityId): array
    {
        $st = DB::conn()->prepare(
            'SELECT id, body, created_by, created_at
             FROM notes
             WHERE entity_type = ? AND entity_id = ? AND is_public = 1
             ORDER BY id DESC'
        );
        $st->execute([$entityType, $entityId]);
        return $st->fetchAll(\PDO::FETCH_ASSOC) ?: [];
    }

    public static function create(array $d): int
    {
        $st = DB::conn()->prepare(
            'INSERT INTO notes (entity_type, entity_id, is_public, body, created_by, created_by_id)
             VALUES (?, ?, ?, ?, ?, ?)'
        );
        $st->execute([
            $d['entity_type'], $d['entity_id'], $d['is_public'] ? 1 : 0,
            $d['body'], $d['created_by'], $d['created_by_id'] ?? null
        ]);
        return (int)DB::conn()->lastInsertId();
    }

    public static function delete(int $id): void
    {
        DB::conn()->prepare('DELETE FROM notes WHERE id = ?')->execute([$id]);
    }
	
	public static function update(int $id, string $body, bool $isPublic): void
{
    DB::conn()->prepare(
        'UPDATE notes SET body = ?, is_public = ? WHERE id = ?'
    )->execute([$body, $isPublic ? 1 : 0, $id]);
}
	
}

----- END FILE: app/models/note.php -----

----- BEGIN FILE: app/models/product.php -----
<?php declare(strict_types=1);

namespace App\Models;

use App\Core\DB;
use PDO;

final class Product
{
    public static function nextCode(): string
    {
        $st = DB::conn()->query("SELECT LPAD(IFNULL(MAX(CAST(SUBSTRING(code,4) AS UNSIGNED)),0)+1,4,'0') AS seq
                                 FROM products WHERE code REGEXP '^PRD[0-9]+$'");
        $seq = (string)($st->fetchColumn() ?: '0001');
        return 'PRD' . $seq;
    }

    public static function all(?string $q = null, ?int $cat = null, ?int $make = null, ?int $model = null): array
    {
        $sql = "SELECT p.*, c.name AS category_name, mk.name AS make_name, vm.name AS model_name,
                       COALESCE(SUM(ps.qty_on_hand),0) AS on_hand,
                       COALESCE(SUM(ps.qty_reserved),0) AS reserved
                FROM products p
                LEFT JOIN categories c ON c.id=p.category_id
                LEFT JOIN makes mk ON mk.id=p.make_id
                LEFT JOIN vehicle_models vm ON vm.id=p.model_id
                LEFT JOIN product_stocks ps ON ps.product_id=p.id
                WHERE 1=1";
        $args = [];
        if ($q)   { $sql .= " AND (p.name LIKE ? OR p.code LIKE ?)"; $args[]="%$q%"; $args[]="%$q%"; }
        if ($cat) { $sql .= " AND p.category_id=?"; $args[]=$cat; }
        if ($make){ $sql .= " AND p.make_id=?";     $args[]=$make; }
        if ($model){$sql.=" AND p.model_id=?";      $args[]=$model; }
        $sql .= " GROUP BY p.id ORDER BY p.name";

        $st = DB::conn()->prepare($sql);
        $st->execute($args);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function find(int $id): ?array
    {
        $st = DB::conn()->prepare('SELECT * FROM products WHERE id=? LIMIT 1');
        $st->execute([$id]);
        $r = $st->fetch(PDO::FETCH_ASSOC);
        return $r ?: null;
    }

    public static function create(array $data): int
    {
        $st = DB::conn()->prepare('INSERT INTO products (code, name, category_id, make_id, model_id, cost, price)
                                   VALUES (?, ?, ?, ?, ?, ?, ?)');
        $st->execute([
            $data['code'], $data['name'],
            $data['category_id'] ?: null,
            $data['make_id'] ?: null,
            $data['model_id'] ?: null,
            $data['cost'], $data['price']
        ]);
        return (int)DB::conn()->lastInsertId();
    }

    public static function update(int $id, array $data): void
    {
        $st = DB::conn()->prepare('UPDATE products SET code=?, name=?, category_id=?, make_id=?, model_id=?, cost=?, price=? WHERE id=?');
        $st->execute([
            $data['code'], $data['name'],
            $data['category_id'] ?: null,
            $data['make_id'] ?: null,
            $data['model_id'] ?: null,
            $data['cost'], $data['price'],
            $id
        ]);
    }

    public static function delete(int $id): bool
    {
        $st = DB::conn()->prepare('DELETE FROM products WHERE id=?');
        return $st->execute([$id]);
    }

    /** stocks **/

    public static function stocks(int $productId): array
    {
        $st = DB::conn()->prepare('SELECT w.id, w.name,
                  COALESCE(ps.qty_on_hand,0) AS qty_on_hand,
                  COALESCE(ps.qty_reserved,0) AS qty_reserved
               FROM warehouses w
               LEFT JOIN product_stocks ps ON ps.warehouse_id=w.id AND ps.product_id=?
               ORDER BY w.name');
        $st->execute([$productId]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function saveStocks(int $productId, array $rows): void
    {
        $pdo = DB::conn();
        $ins = $pdo->prepare('INSERT INTO product_stocks (product_id, warehouse_id, qty_on_hand, qty_reserved)
                              VALUES (?, ?, ?, ?)
                              ON DUPLICATE KEY UPDATE qty_on_hand=VALUES(qty_on_hand), qty_reserved=VALUES(qty_reserved)');
        foreach ($rows as $wid => $pair) {
            $on  = max(0, (int)($pair['on'] ?? 0));
            $res = max(0, (int)($pair['res'] ?? 0));
            $ins->execute([$productId, (int)$wid, $on, $res]);
        }
    }
	
	public static function adjustReserved(int $productId, int $warehouseId, int $delta): void
	{
    $pdo = DB::conn();
    // upsert then clamp at >= 0
    $pdo->prepare('INSERT INTO product_stocks (product_id, warehouse_id, qty_on_hand, qty_reserved)
                   VALUES (?, ?, 0, ?)
                   ON DUPLICATE KEY UPDATE qty_reserved = GREATEST(0, qty_reserved + VALUES(qty_reserved))')
        ->execute([$productId, $warehouseId, $delta]);
	}

public static function consumeFromReservation(int $productId, int $warehouseId, int $qty): void
{
    // qty_reserved -= qty, qty_on_hand -= qty (clamped at >=0), single atomic statement
    DB::conn()->prepare("
      INSERT INTO product_stocks (product_id, warehouse_id, qty_on_hand, qty_reserved)
      VALUES (?, ?, 0, 0)
      ON DUPLICATE KEY UPDATE
        qty_reserved = GREATEST(0, qty_reserved - ?),
        qty_on_hand = GREATEST(0, qty_on_hand - ?)
    ")->execute([$productId, $warehouseId, $qty, $qty]);
}
public static function canFulfill(int $productId, int $warehouseId, int $qty): bool
{
    $st = DB::conn()->prepare(
        'SELECT qty_on_hand, qty_reserved FROM product_stocks WHERE product_id=? AND warehouse_id=?'
    );
    $st->execute([$productId, $warehouseId]);
    $row = $st->fetch(\PDO::FETCH_ASSOC);
    $on  = (int)($row['qty_on_hand'] ?? 0);
    // here we check we have enough on-hand to consume the reservation
    return $on >= $qty;
}

}

----- END FILE: app/models/product.php -----

----- BEGIN FILE: app/models/purchaseinvoice.php -----
<?php declare(strict_types=1);
namespace App\Models;

use App\Core\DB;
use PDO;

final class PurchaseInvoice
{
    public static function nextNumber(): string {
        $y = date('Y');
        $st = DB::conn()->prepare("SELECT LPAD(COALESCE(MAX(CAST(SUBSTRING(pi_no,6) AS UNSIGNED)),0)+1,4,'0')
                                   FROM purchase_invoices WHERE pi_no LIKE CONCAT('PI',$y,'-%')");
        $st->execute();
        $seq = (string)($st->fetchColumn() ?: '0001');
        return 'PI'.$y.'-'.$seq;
    }

    public static function all(): array {
        $sql = "SELECT pi.*, s.name AS supplier_name, po.po_no
                FROM purchase_invoices pi
                JOIN suppliers s ON s.id = pi.supplier_id
                JOIN purchase_orders po ON po.id = pi.purchase_order_id
                ORDER BY pi.id DESC";
        return DB::conn()->query($sql)->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function find(int $id): ?array {
        $st = DB::conn()->prepare("SELECT pi.*, s.name AS supplier_name, po.po_no
                                   FROM purchase_invoices pi
                                   JOIN suppliers s ON s.id = pi.supplier_id
                                   JOIN purchase_orders po ON po.id = pi.purchase_order_id
                                   WHERE pi.id = ?");
        $st->execute([$id]);
        $row = $st->fetch(PDO::FETCH_ASSOC);
        return $row ?: null;
    }

    /** Items come from the PO that this PI belongs to */
    public static function poItems(int $invoiceId): array {
        $sql = "SELECT i.*, p.code AS product_code, p.name AS product_name, w.name AS warehouse_name
                FROM purchase_invoices pi
                JOIN purchase_orders po ON po.id = pi.purchase_order_id
                JOIN purchase_order_items i ON i.purchase_order_id = po.id
                JOIN products p ON p.id = i.product_id
                JOIN warehouses w ON w.id = i.warehouse_id
                WHERE pi.id = ?";
        $st = DB::conn()->prepare($sql); $st->execute([$invoiceId]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    /** Map of received qty so far for this PI's PO: key "product_id:warehouse_id" => qty */
    public static function receivedMapByPo(int $poId): array {
        $sql = "SELECT r.product_id, r.warehouse_id, SUM(r.qty) AS qty
                FROM receipts r
                JOIN purchase_invoices pi ON pi.id = r.purchase_invoice_id
                WHERE pi.purchase_order_id = ?
                GROUP BY r.product_id, r.warehouse_id";
        $st = DB::conn()->prepare($sql); $st->execute([$poId]);
        $map = [];
        foreach ($st->fetchAll(PDO::FETCH_ASSOC) ?: [] as $row) {
            $map[$row['product_id'].':'.$row['warehouse_id']] = (int)$row['qty'];
        }
        return $map;
    }
	
	public static function receipts(int $invoiceId): array {
    $sql = "SELECT r.*, p.code AS product_code, p.name AS product_name, w.name AS warehouse_name
            FROM receipts r
            JOIN products p   ON p.id = r.product_id
            JOIN warehouses w ON w.id = r.warehouse_id
            WHERE r.purchase_invoice_id = ?
            ORDER BY r.id DESC";
    $st = DB::conn()->prepare($sql);
    $st->execute([$invoiceId]);
    return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
}
public static function recalcPaidAmount(int $invoiceId): void
{
    $pdo = DB::conn();

    $st = $pdo->prepare("SELECT COALESCE(SUM(amount),0) FROM supplier_payments WHERE purchase_invoice_id=?");
    $st->execute([$invoiceId]);
    $paid = (float)$st->fetchColumn();

    $st2 = $pdo->prepare("SELECT total FROM purchase_invoices WHERE id=?");
    $st2->execute([$invoiceId]);
    $total = (float)($st2->fetchColumn() ?: 0);

    $status = 'unpaid';
    if ($paid <= 0.0) {
        $status = 'unpaid';
    } elseif ($paid + 0.0001 < $total) {
        $status = 'partial';
    } else {
        $paid = min($paid, $total); // cap display
        $status = 'paid';
    }

    $upd = $pdo->prepare("UPDATE purchase_invoices SET paid_amount=?, status=? WHERE id=?");
    $upd->execute([$paid, $status, $invoiceId]);
}
}

----- END FILE: app/models/purchaseinvoice.php -----

----- BEGIN FILE: app/models/purchaseorder.php -----
<?php declare(strict_types=1);
namespace App\Models;

use App\Core\DB;
use PDO;

final class PurchaseOrder
{
    public static function nextNumber(): string {
        $y = date('Y');
        $st = DB::conn()->prepare("SELECT LPAD(COALESCE(MAX(CAST(SUBSTRING(po_no,6) AS UNSIGNED)),0)+1,4,'0')
                                   FROM purchase_orders WHERE po_no LIKE CONCAT('PO',$y,'-%')");
        $st->execute();
        $seq = (string)($st->fetchColumn() ?: '0001');
        return 'PO'.$y.'-'.$seq;
    }

    public static function all(): array {
        $sql = "SELECT po.*, s.name AS supplier_name
                FROM purchase_orders po
                JOIN suppliers s ON s.id = po.supplier_id
                ORDER BY po.id DESC";
        return DB::conn()->query($sql)->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function find(int $id): ?array {
        $st = DB::conn()->prepare("SELECT po.*, s.name AS supplier_name
                                   FROM purchase_orders po
                                   JOIN suppliers s ON s.id = po.supplier_id
                                   WHERE po.id=?");
        $st->execute([$id]);
        $row = $st->fetch(PDO::FETCH_ASSOC);
        return $row ?: null;
    }

    public static function items(int $poId): array {
        $sql = "SELECT i.*, p.code AS product_code, p.name AS product_name, w.name AS warehouse_name
                FROM purchase_order_items i
                JOIN products p ON p.id = i.product_id
                JOIN warehouses w ON w.id = i.warehouse_id
                WHERE i.purchase_order_id = ?";
        $st = DB::conn()->prepare($sql); $st->execute([$poId]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
}

----- END FILE: app/models/purchaseorder.php -----

----- BEGIN FILE: app/models/purchasereturn.php -----
<?php declare(strict_types=1);
namespace App\Models;

use App\Core\DB;
use PDO;

final class PurchaseReturn
{
    public static function nextNumber(): string {
        $y = date('Y');
        $st = DB::conn()->prepare("
            SELECT LPAD(COALESCE(MAX(CAST(SUBSTRING(pr_no,6) AS UNSIGNED)),0)+1,4,'0')
            FROM purchase_returns
            WHERE pr_no LIKE CONCAT('PR', ?, '-%')
        ");
        $st->execute([$y]);
        $seq = (string)($st->fetchColumn() ?: '0001');
        return 'PR'.$y.'-'.$seq;
    }

    /** Map of received qty by (product,warehouse) for a PI */
    public static function receivedMapByInvoice(int $piId): array {
        $sql = "SELECT product_id, warehouse_id, SUM(qty) AS qty
                FROM receipts WHERE purchase_invoice_id=? GROUP BY product_id, warehouse_id";
        $st = DB::conn()->prepare($sql); $st->execute([$piId]);
        $map = [];
        foreach ($st->fetchAll(PDO::FETCH_ASSOC) ?: [] as $r) {
            $map[$r['product_id'].':'.$r['warehouse_id']] = (int)$r['qty'];
        }
        return $map;
    }

    /** Map of already returned qty for a PI */
    public static function returnedMapByInvoice(int $piId): array {
        $sql = "SELECT pri.product_id, pri.warehouse_id, SUM(pri.qty) AS qty
                FROM purchase_return_items pri
                JOIN purchase_returns pr ON pr.id = pri.purchase_return_id
                WHERE pr.purchase_invoice_id = ?
                GROUP BY pri.product_id, pri.warehouse_id";
        $st = DB::conn()->prepare($sql); $st->execute([$piId]);
        $map = [];
        foreach ($st->fetchAll(PDO::FETCH_ASSOC) ?: [] as $r) {
            $map[$r['product_id'].':'.$r['warehouse_id']] = (int)$r['qty'];
        }
        return $map;
    }

    /** History lines for a PI */
    public static function returnsForInvoice(int $piId): array {
        $sql = "SELECT pr.id AS purchase_return_id, pr.pr_no, pr.created_at,
                       pri.id AS item_id, pri.product_id, pri.warehouse_id, pri.qty, pri.price, pri.line_total,
                       p.code AS product_code, p.name AS product_name, w.name AS warehouse_name
                FROM purchase_returns pr
                JOIN purchase_return_items pri ON pri.purchase_return_id = pr.id
                JOIN products p   ON p.id = pri.product_id
                JOIN warehouses w ON w.id = pri.warehouse_id
                WHERE pr.purchase_invoice_id = ?
                ORDER BY pr.id DESC, pri.id DESC";
        $st = DB::conn()->prepare($sql); $st->execute([$piId]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    /** Total debit (credit from supplier) amount to reduce AP */
    public static function creditsTotalForInvoice(int $piId): float {
        $st = DB::conn()->prepare("SELECT COALESCE(SUM(total),0) FROM purchase_returns WHERE purchase_invoice_id=?");
        $st->execute([$piId]);
        return (float)$st->fetchColumn();
    }

    public static function findHead(int $id): ?array {
        $st = DB::conn()->prepare("SELECT * FROM purchase_returns WHERE id=?");
        $st->execute([$id]);
        $row = $st->fetch(PDO::FETCH_ASSOC);
        return $row ?: null;
    }

    public static function items(int $id): array {
        $sql = "SELECT pri.*, p.code AS product_code, p.name AS product_name, w.name AS warehouse_name
                FROM purchase_return_items pri
                JOIN products p   ON p.id = pri.product_id
                JOIN warehouses w ON w.id = pri.warehouse_id
                WHERE pri.purchase_return_id=?
                ORDER BY pri.id ASC";
        $st = DB::conn()->prepare($sql); $st->execute([$id]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
}

----- END FILE: app/models/purchasereturn.php -----

----- BEGIN FILE: app/models/quote.php -----
<?php declare(strict_types=1);

namespace App\Models;

use App\Core\DB;
use PDO;

final class Quote
{
    public static function nextNumber(): string
    {
        $y = date('Y');
        $st = DB::conn()->prepare(
            "SELECT LPAD(COALESCE(MAX(CAST(SUBSTRING(quote_no, 6) AS UNSIGNED)),0)+1,4,'0')
             FROM quotes WHERE quote_no LIKE CONCAT('Q',$y,'-%')"
        );
        $st->execute();
        $seq = (string)$st->fetchColumn();
        if ($seq === '') $seq = '0001';
        return 'Q' . $y . '-' . $seq;
    }

    public static function all(): array
    {
        $sql = "SELECT q.*, c.name AS customer_name
                FROM quotes q
                JOIN customers c ON c.id=q.customer_id
                ORDER BY q.id DESC";
        return DB::conn()->query($sql)->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function find(int $id): ?array
    {
        $st = DB::conn()->prepare('SELECT * FROM quotes WHERE id=? LIMIT 1');
        $st->execute([$id]);
        $r = $st->fetch(PDO::FETCH_ASSOC);
        return $r ?: null;
    }

    public static function items(int $quoteId): array
    {
        $sql = "SELECT qi.*, p.code AS product_code, p.name AS product_name, w.name AS warehouse_name
                FROM quote_items qi
                JOIN products p ON p.id=qi.product_id
                JOIN warehouses w ON w.id=qi.warehouse_id
                WHERE qi.quote_id=? ORDER BY qi.id";
        $st = DB::conn()->prepare($sql);
        $st->execute([$quoteId]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
}

----- END FILE: app/models/quote.php -----

----- BEGIN FILE: app/models/salesorder.php -----
<?php declare(strict_types=1);
namespace App\Models;
use App\Core\DB; use PDO;

final class SalesOrder
{
  public static function nextNumber(): string {
    $y = date('Y');
    $st = DB::conn()->prepare("SELECT LPAD(COALESCE(MAX(CAST(SUBSTRING(so_no,6) AS UNSIGNED)),0)+1,4,'0')
                               FROM sales_orders WHERE so_no LIKE CONCAT('SO',$y,'-%')");
    $st->execute();
    $seq = (string)($st->fetchColumn() ?: '0001');
    return 'SO'.$y.'-'.$seq;
  }

  public static function all(): array {
    $sql = "SELECT so.*, c.name AS customer_name
            FROM sales_orders so JOIN customers c ON c.id=so.customer_id
            ORDER BY so.id DESC";
    return DB::conn()->query($sql)->fetchAll(PDO::FETCH_ASSOC) ?: [];
  }

  public static function items(int $id): array {
    $sql = "SELECT i.*, p.code AS product_code, p.name AS product_name, w.name AS warehouse_name
            FROM sales_order_items i
            JOIN products p ON p.id=i.product_id
            JOIN warehouses w ON w.id=i.warehouse_id
            WHERE i.sales_order_id=?";
    $st = DB::conn()->prepare($sql); $st->execute([$id]);
    return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
  }
}

----- END FILE: app/models/salesorder.php -----

----- BEGIN FILE: app/models/salesreturn.php -----
<?php declare(strict_types=1);
namespace App\Models;

use App\Core\DB;
use PDO;

final class SalesReturn
{
    /** SRYYYY-#### (per year) */
    public static function nextNumber(): string {
        $y = date('Y');
        $st = DB::conn()->prepare("
            SELECT LPAD(COALESCE(MAX(CAST(SUBSTRING(sr_no,6) AS UNSIGNED)),0)+1,4,'0')
            FROM sales_returns
            WHERE sr_no LIKE CONCAT('SR', ?, '-%')
        ");
        $st->execute([$y]);
        $seq = (string)$st->fetchColumn();
        if ($seq === '' || $seq === null) { $seq = '0001'; }
        return 'SR'.$y.'-'.$seq;
    }

    /** Returned quantities map for an invoice: key "product:warehouse" => qty */
    public static function returnedMapByInvoice(int $invoiceId): array {
        $sql = "SELECT sri.product_id, sri.warehouse_id, SUM(sri.qty) AS qty
                  FROM sales_return_items sri
                  JOIN sales_returns sr ON sr.id = sri.sales_return_id
                 WHERE sr.sales_invoice_id = ?
                 GROUP BY sri.product_id, sri.warehouse_id";
        $st = DB::conn()->prepare($sql);
        $st->execute([$invoiceId]);
        $map = [];
        foreach ($st->fetchAll(PDO::FETCH_ASSOC) ?: [] as $r) {
            $map[(int)$r['product_id'].':'.(int)$r['warehouse_id']] = (int)$r['qty'];
        }
        return $map;
    }

    /** History rows for an invoice (used under invoice view) */
    public static function returnsForInvoice(int $invoiceId): array {
        $sql = "SELECT 
                    sri.sales_return_id,
                    sr.sr_no,
                    sr.created_at AS created_at,
                    p.code AS product_code,
                    p.name AS product_name,
                    w.name AS warehouse_name,
                    sri.qty,
                    sri.price
                FROM sales_return_items sri
                JOIN sales_returns sr ON sr.id = sri.sales_return_id
                JOIN products p       ON p.id = sri.product_id
                JOIN warehouses w     ON w.id = sri.warehouse_id
                WHERE sr.sales_invoice_id = ?
                ORDER BY sr.id DESC, sri.id ASC";
        $st = DB::conn()->prepare($sql);
        $st->execute([$invoiceId]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    /** Items for a specific credit note */
    public static function items(int $returnId): array {
        $sql = "SELECT 
                    sri.*,
                    p.code AS product_code,
                    p.name AS product_name,
                    w.name AS warehouse_name
                FROM sales_return_items sri
                JOIN products p   ON p.id = sri.product_id
                JOIN warehouses w ON w.id = sri.warehouse_id
                WHERE sri.sales_return_id = ?
                ORDER BY sri.id ASC";
        $st = DB::conn()->prepare($sql);
        $st->execute([$returnId]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    /** Sum of credits for an invoice (used for balance in invoice view) */
    public static function creditsTotalForInvoice(int $invoiceId): float {
        $st = DB::conn()->prepare("SELECT COALESCE(SUM(total),0) FROM sales_returns WHERE sales_invoice_id=?");
        $st->execute([$invoiceId]);
        return (float)$st->fetchColumn();
    }
}

----- END FILE: app/models/salesreturn.php -----

----- BEGIN FILE: app/models/supplier.php -----
<?php declare(strict_types=1);
namespace App\Models;

use App\Core\DB;
use PDO;

final class Supplier
{
    public static function all(): array {
        $sql = "SELECT * FROM suppliers ORDER BY name";
        return DB::conn()->query($sql)->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function find(int $id): ?array {
        $st = DB::conn()->prepare("SELECT * FROM suppliers WHERE id=?");
        $st->execute([$id]);
        $row = $st->fetch(PDO::FETCH_ASSOC);
        return $row ?: null;
    }

    public static function create(array $d): int {
        $st = DB::conn()->prepare("INSERT INTO suppliers (name, phone, email, address) VALUES (?,?,?,?)");
        $st->execute([$d['name'], $d['phone'], $d['email'], $d['address']]);
        return (int)DB::conn()->lastInsertId();
    }

    public static function update(int $id, array $d): void {
        $st = DB::conn()->prepare("UPDATE suppliers SET name=?, phone=?, email=?, address=? WHERE id=?");
        $st->execute([$d['name'], $d['phone'], $d['email'], $d['address'], $id]);
    }

    public static function delete(int $id): void {
        DB::conn()->prepare("DELETE FROM suppliers WHERE id=?")->execute([$id]);
    }
	public static function allWithBalance(): array {
    $sql = "SELECT s.*,
                   COALESCE(pi_sum,0) - COALESCE(pay_sum,0) AS balance
            FROM suppliers s
            LEFT JOIN (
              SELECT supplier_id, SUM(total) AS pi_sum
              FROM purchase_invoices GROUP BY supplier_id
            ) t1 ON t1.supplier_id = s.id
            LEFT JOIN (
              SELECT supplier_id, SUM(amount) AS pay_sum
              FROM supplier_payments GROUP BY supplier_id
            ) t2 ON t2.supplier_id = s.id
            ORDER BY s.name";
    return DB::conn()->query($sql)->fetchAll(\PDO::FETCH_ASSOC) ?: [];
}
/** Opening balance strictly before $from (invoices - payments - returns) */
    public static function apOpeningBalance(int $supplierId, string $from): float {
        $pdo = DB::conn();

        $sqlInv = "SELECT COALESCE(SUM(total),0) FROM purchase_invoices
                   WHERE supplier_id=? AND created_at < ?";
        $sqlPay = "SELECT COALESCE(SUM(amount),0) FROM supplier_payments
                   WHERE supplier_id=? AND paid_at < ?";
        $sqlRet = "SELECT COALESCE(SUM(total),0) FROM purchase_returns
                   WHERE supplier_id=? AND created_at < ?";

        $inv = (float)self::scalar($pdo, $sqlInv, [$supplierId, $from]);
        $pay = (float)self::scalar($pdo, $sqlPay, [$supplierId, $from]);
        $ret = (float)self::scalar($pdo, $sqlRet, [$supplierId, $from]);

        return $inv - $pay - $ret;
    }

    /** Movements between dates inclusive. Debit increases AP, Credit decreases. */
    public static function apMovements(int $supplierId, string $from, string $to): array {
        $pdo = DB::conn();

        // Invoices (debit)
        $q1 = $pdo->prepare("
            SELECT created_at AS txn_date, 'invoice' AS kind, pi_no AS ref_no,
                   total AS debit, 0 AS credit, id AS ref_id
            FROM purchase_invoices
            WHERE supplier_id=? AND DATE(created_at) BETWEEN ? AND ?
        ");
        $q1->execute([$supplierId, $from, $to]);
        $invoices = $q1->fetchAll(PDO::FETCH_ASSOC) ?: [];

        // Payments (credit)
        $q2 = $pdo->prepare("
            SELECT paid_at AS txn_date, 'payment' AS kind, reference AS ref_no,
                   0 AS debit, amount AS credit, id AS ref_id
            FROM supplier_payments
            WHERE supplier_id=? AND DATE(paid_at) BETWEEN ? AND ?
        ");
        $q2->execute([$supplierId, $from, $to]);
        $payments = $q2->fetchAll(PDO::FETCH_ASSOC) ?: [];

        // Purchase returns / debit notes (credit)
        $q3 = $pdo->prepare("
            SELECT created_at AS txn_date, 'return' AS kind, pr_no AS ref_no,
                   0 AS debit, total AS credit, id AS ref_id
            FROM purchase_returns
            WHERE supplier_id=? AND DATE(created_at) BETWEEN ? AND ?
        ");
        $q3->execute([$supplierId, $from, $to]);
        $returns = $q3->fetchAll(PDO::FETCH_ASSOC) ?: [];

        $all = array_merge($invoices, $payments, $returns);

        usort($all, function($a,$b){
            if ($a['txn_date'] === $b['txn_date']) return $a['kind'] <=> $b['kind'];
            return strcmp($a['txn_date'], $b['txn_date']);
        });

        return $all;
    }

    /** AP aging snapshot grouped by supplier as of a date (inclusive) */
    public static function apAgingSnapshot(string $asOf): array {
        $pdo = DB::conn();

        // Outstanding per invoice = total - payments_to_invoice - returns_for_invoice
        // Then bucket by invoice age (days since created_at)
        $sql = "
        SELECT s.id AS supplier_id, s.name AS supplier_name,
               SUM(CASE WHEN age<=30  THEN outstanding ELSE 0 END) AS bucket_0_30,
               SUM(CASE WHEN age BETWEEN 31 AND 60 THEN outstanding ELSE 0 END) AS bucket_31_60,
               SUM(CASE WHEN age BETWEEN 61 AND 90 THEN outstanding ELSE 0 END) AS bucket_61_90,
               SUM(CASE WHEN age>90  THEN outstanding ELSE 0 END) AS bucket_90_plus,
               SUM(outstanding) AS total
        FROM (
          SELECT pi.id, pi.supplier_id,
                 GREATEST(
                   pi.total
                   - COALESCE((
                       SELECT SUM(sp.amount) FROM supplier_payments sp
                       WHERE sp.purchase_invoice_id=pi.id AND sp.paid_at<=?
                     ),0)
                   - COALESCE((
                       SELECT SUM(pr.total) FROM purchase_returns pr
                       WHERE pr.purchase_invoice_id=pi.id AND pr.created_at<=?
                     ),0)
                 ,0) AS outstanding,
                 DATEDIFF(?, pi.created_at) AS age
          FROM purchase_invoices pi
          WHERE pi.created_at<=?
        ) x
        JOIN suppliers s ON s.id = x.supplier_id
        WHERE outstanding > 0
        GROUP BY s.id, s.name
        ORDER BY s.name";

        $st = $pdo->prepare($sql);
        $st->execute([$asOf, $asOf, $asOf, $asOf]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    private static function scalar(\PDO $pdo, string $sql, array $params) {
        $st = $pdo->prepare($sql); $st->execute($params);
        return $st->fetchColumn();
    }
}


----- END FILE: app/models/supplier.php -----

----- BEGIN FILE: app/models/supplierpayment.php -----
<?php declare(strict_types=1);
namespace App\Models;

use App\Core\DB;
use PDO;

final class SupplierPayment
{
    public static function forInvoice(int $invoiceId): array {
        $sql = "SELECT sp.*, s.name AS supplier_name
                FROM supplier_payments sp
                JOIN suppliers s ON s.id = sp.supplier_id
                WHERE sp.purchase_invoice_id = ?
                ORDER BY sp.paid_at DESC, sp.id DESC";
        $st = DB::conn()->prepare($sql);
        $st->execute([$invoiceId]);
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function all(int $limit = 200): array {
        $sql = "SELECT sp.*, s.name AS supplier_name, pi.pi_no
                FROM supplier_payments sp
                JOIN suppliers s ON s.id = sp.supplier_id
                JOIN purchase_invoices pi ON pi.id = sp.purchase_invoice_id
                ORDER BY sp.paid_at DESC, sp.id DESC
                LIMIT ?";
        $st = DB::conn()->prepare($sql);
        $st->bindValue(1, $limit, PDO::PARAM_INT);
        $st->execute();
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function create(array $d): int {
        $st = DB::conn()->prepare("INSERT INTO supplier_payments (supplier_id, purchase_invoice_id, paid_at, method, reference, amount, note)
                                   VALUES (?,?,?,?,?,?,?)");
        $st->execute([
            (int)$d['supplier_id'], (int)$d['purchase_invoice_id'], (string)$d['paid_at'],
            (string)$d['method'], (string)($d['reference'] ?? ''), (float)$d['amount'], (string)($d['note'] ?? '')
        ]);
        return (int)DB::conn()->lastInsertId();
    }

    public static function delete(int $id): void {
        DB::conn()->prepare("DELETE FROM supplier_payments WHERE id=?")->execute([$id]);
    }
}

----- END FILE: app/models/supplierpayment.php -----

----- BEGIN FILE: app/models/vehiclemodel.php -----
<?php declare(strict_types=1);

namespace App\Models;

use App\Core\DB;
use PDO;

final class VehicleModel
{
    public static function all(?int $makeId = null): array
    {
        if ($makeId) {
            $stmt = DB::conn()->prepare('SELECT vm.id, vm.name, vm.slug, m.name AS make_name, vm.make_id
                                         FROM vehicle_models vm
                                         JOIN makes m ON m.id = vm.make_id
                                         WHERE vm.make_id = ?
                                         ORDER BY m.name, vm.name');
            $stmt->execute([$makeId]);
        } else {
            $stmt = DB::conn()->query('SELECT vm.id, vm.name, vm.slug, m.name AS make_name, vm.make_id
                                       FROM vehicle_models vm
                                       JOIN makes m ON m.id = vm.make_id
                                       ORDER BY m.name, vm.name');
        }
        return $stmt->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }

    public static function find(int $id): ?array
    {
        $stmt = DB::conn()->prepare('SELECT * FROM vehicle_models WHERE id = ? LIMIT 1');
        $stmt->execute([$id]);
        $row = $stmt->fetch(PDO::FETCH_ASSOC);
        return $row ?: null;
    }

    public static function create(int $makeId, string $name, string $slug): int
    {
        $stmt = DB::conn()->prepare('INSERT INTO vehicle_models (make_id, name, slug) VALUES (?, ?, ?)');
        $stmt->execute([$makeId, $name, $slug]);
        return (int) DB::conn()->lastInsertId();
    }

    public static function update(int $id, int $makeId, string $name, string $slug): void
    {
        $stmt = DB::conn()->prepare('UPDATE vehicle_models SET make_id = ?, name = ?, slug = ? WHERE id = ?');
        $stmt->execute([$makeId, $name, $slug, $id]);
    }

    public static function delete(int $id): bool
    {
        $stmt = DB::conn()->prepare('DELETE FROM vehicle_models WHERE id = ?');
        return $stmt->execute([$id]);
    }
}

----- END FILE: app/models/vehiclemodel.php -----

----- BEGIN FILE: app/models/warehouse.php -----
<?php declare(strict_types=1);

namespace App\Models;

use App\Core\DB;
use PDO;

final class Warehouse
{
    public static function all(): array {
        $st = DB::conn()->query('SELECT id, code, name, location FROM warehouses ORDER BY name');
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
    public static function find(int $id): ?array {
        $st = DB::conn()->prepare('SELECT * FROM warehouses WHERE id = ? LIMIT 1');
        $st->execute([$id]); $r = $st->fetch(PDO::FETCH_ASSOC);
        return $r ?: null;
    }
    public static function create(string $code, string $name, ?string $loc): int {
        $st = DB::conn()->prepare('INSERT INTO warehouses (code, name, location) VALUES (?, ?, ?)');
        $st->execute([$code, $name, $loc]);
        return (int)DB::conn()->lastInsertId();
    }
    public static function update(int $id, string $code, string $name, ?string $loc): void {
        $st = DB::conn()->prepare('UPDATE warehouses SET code=?, name=?, location=? WHERE id=?');
        $st->execute([$code, $name, $loc, $id]);
    }
    public static function delete(int $id): bool {
        // block delete if any stock rows exist
        $c = DB::conn()->prepare('SELECT COUNT(*) FROM product_stocks WHERE warehouse_id=?');
        $c->execute([$id]);
        if ((int)$c->fetchColumn() > 0) return false;
        $st = DB::conn()->prepare('DELETE FROM warehouses WHERE id=?');
        return $st->execute([$id]);
    }
    public static function options(): array {
        $st = DB::conn()->query('SELECT id, name FROM warehouses ORDER BY name');
        return $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
    }
}

----- END FILE: app/models/warehouse.php -----

----- BEGIN FILE: app/views/adjustments/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
/** @var array $warehouses, $products */
?>
<section>
  <h2>New Stock Adjustment</h2>
  <form method="post" action="<?= base_url('/adjustments') ?>">
    <?= csrf_field() ?>
    <div style="display:flex;gap:12px;flex-wrap:wrap;">
      <label>Warehouse
        <select name="warehouse_id" required style="padding:8px;border:1px solid #ddd;border-radius:6px;min-width:220px;">
          <option value="">-- choose --</option>
          <?php foreach ($warehouses as $w): ?>
            <option value="<?= (int)$w['id'] ?>"><?= htmlspecialchars($w['name'],ENT_QUOTES,'UTF-8') ?></option>
          <?php endforeach; ?>
        </select>
      </label>
      <label>Reason
        <select name="reason" style="padding:8px;border:1px solid #ddd;border-radius:6px;min-width:160px;">
          <option value="count">Stock count</option>
          <option value="damage">Damage</option>
          <option value="shrink">Shrink</option>
          <option value="other">Other</option>
        </select>
      </label>
    </div>

    <table id="lines" style="width:100%;border-collapse:collapse;margin-top:12px;">
      <thead><tr>
        <th style="border-bottom:1px solid #eee;padding:8px;">Product</th>
        <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Qty change (+/-)</th>
        <th style="border-bottom:1px solid #eee;padding:8px;">&nbsp;</th>
      </tr></thead>
      <tbody></tbody>
    </table>

    <p><button type="button" id="add-line" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#fff;cursor:pointer;">+ Add line</button></p>

    <p>
      <label>Note<br>
        <textarea name="note" rows="3" style="width:100%;padding:8px;border:1px solid #ddd;border-radius:6px;"></textarea>
      </label>
    </p>

    <p><button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Save Adjustment</button>
       <a href="<?= base_url('/adjustments') ?>" style="margin-left:8px;">Cancel</a></p>
  </form>
</section>

<script>
(function(){
  const products = <?= json_encode($products, JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_AMP|JSON_HEX_QUOT) ?>;
  const tbody = document.querySelector('#lines tbody');
  const btn   = document.getElementById('add-line');

  function addRow() {
    const tr = document.createElement('tr');

    const tdProd = document.createElement('td');
    tdProd.style.padding='8px'; tdProd.style.borderBottom='1px solid #f2f2f4';
    const sel = document.createElement('select');
    sel.name='product_id[]';
    sel.required = true;
    sel.style.cssText = 'padding:8px;border:1px solid #ddd;border-radius:6px;min-width:320px;';
    sel.innerHTML = '<option value="">-- choose product --</option>' +
      products.map(p => `<option value="${p.id}">${(p.code||'') + ' — ' + (p.name||'')}</option>`).join('');
    tdProd.appendChild(sel);

    const tdQty = document.createElement('td');
    tdQty.style.padding='8px'; tdQty.style.borderBottom='1px solid #f2f2f4'; tdQty.style.textAlign='right';
    const qty = document.createElement('input');
    qty.type='number'; qty.name='qty_change[]'; qty.step='1'; qty.required = true;
    qty.placeholder = 'e.g. 5 or -2';
    qty.style.cssText='padding:8px;border:1px solid #ddd;border-radius:6px;width:140px;text-align:right;';
    tdQty.appendChild(qty);

    const tdAct = document.createElement('td');
    tdAct.style.padding='8px'; tdAct.style.borderBottom='1px solid #f2f2f4';
    const rm = document.createElement('button');
    rm.type='button'; rm.textContent='Remove';
    rm.style.cssText='padding:6px 10px;border:1px solid #cc0000;color:#cc0000;background:#fff;border-radius:8px;cursor:pointer;';
    rm.addEventListener('click', ()=>tr.remove());
    tdAct.appendChild(rm);

    tr.appendChild(tdProd); tr.appendChild(tdQty); tr.appendChild(tdAct);
    tbody.appendChild(tr);
  }

  btn.addEventListener('click', addRow);
  addRow();
})();
</script>

----- END FILE: app/views/adjustments/form.php -----

----- BEGIN FILE: app/views/adjustments/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Stock Adjustments</h2>
  <p><a class="no-print" href="<?= base_url('/adjustments/create') ?>">New Adjustment</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">AD #</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Reason</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Action</th>
    </tr></thead>
    <tbody>
      <?php foreach (($items ?? []) as $a): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($a['adj_no'],ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($a['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($a['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($a['reason'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
          <a href="<?= base_url('/adjustments/show?id='.(int)$a['id']) ?>">Open</a> ·
          <a href="<?= base_url('/adjustments/print?id='.(int)$a['id']) ?>">Print</a>
        </td>
      </tr>
      <?php endforeach; ?>
      <?php if (empty($items)): ?><tr><td colspan="5" style="padding:12px;">No adjustments yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/adjustments/index.php -----

----- BEGIN FILE: app/views/adjustments/print.php -----
<?php
use function App\Core\base_url;
/** @var array $a,$items */
?>
<section class="printable">
  <!-- Optional logo: <img src="/public/img/logo.png" alt="Logo" style="height:48px"> -->
  <h2>Stock Adjustment</h2>
  <p><strong>AD #:</strong> <?= htmlspecialchars($a['adj_no'],ENT_QUOTES,'UTF-8') ?><br>
     <strong>Date:</strong> <?= htmlspecialchars($a['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?><br>
     <strong>Warehouse:</strong> <?= htmlspecialchars($a['warehouse_name'],ENT_QUOTES,'UTF-8') ?><br>
     <strong>Reason:</strong> <?= htmlspecialchars($a['reason'],ENT_QUOTES,'UTF-8') ?></p>

  <?php if (!empty($a['note'])): ?>
    <p><strong>Note:</strong> <?= nl2br(htmlspecialchars($a['note'],ENT_QUOTES,'UTF-8')) ?></p>
  <?php endif; ?>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #000;padding:6px;">Product</th>
      <th style="text-align:right;border-bottom:1px solid #000;padding:6px;">Qty change</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $it): ?>
      <tr>
        <td style="padding:6px;border-bottom:1px solid #000;"><?= htmlspecialchars(($it['product_code'] ?? '').' — '.($it['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:6px;border-bottom:1px solid #000;text-align:right;"><?= (int)$it['qty_change'] ?></td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>

  <p class="no-print" style="margin-top:10px;"><button onclick="window.print()">Print</button> · <a href="<?= base_url('/adjustments/show?id='.(int)$a['id']) ?>">Back</a></p>
</section>
<style>
@media print {
  .no-print, nav, header, footer { display:none !important; }
  body { margin: 0; }
}
</style>

----- END FILE: app/views/adjustments/print.php -----

----- BEGIN FILE: app/views/adjustments/view.php -----
<?php
use function App\Core\base_url;
/** @var array $a,$items */
?>
<section>
  <h2>Adjustment <?= htmlspecialchars($a['adj_no'],ENT_QUOTES,'UTF-8') ?></h2>
  <p>Date: <?= htmlspecialchars($a['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></p>
  <p>Warehouse: <strong><?= htmlspecialchars($a['warehouse_name'],ENT_QUOTES,'UTF-8') ?></strong> · Reason: <strong><?= htmlspecialchars($a['reason'],ENT_QUOTES,'UTF-8') ?></strong></p>
  <?php if (!empty($a['note'])): ?>
    <p><strong>Note:</strong> <?= nl2br(htmlspecialchars($a['note'],ENT_QUOTES,'UTF-8')) ?></p>
  <?php endif; ?>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty change</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $it): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars(($it['product_code'] ?? '').' — '.($it['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$it['qty_change'] ?></td>
      </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="2" style="padding:12px;">No lines.</td></tr><?php endif; ?>
    </tbody>
  </table>

  <p style="margin-top:10px;">
    <a href="<?= base_url('/adjustments') ?>">Back</a> ·
    <a href="<?= base_url('/adjustments/print?id='.(int)$a['id']) ?>">Print</a>
  </p>
</section>

----- END FILE: app/views/adjustments/view.php -----

----- BEGIN FILE: app/views/auth/login.php -----
<?php use function App\Core\csrf_field; ?>
<section>
  <h2>Login</h2>
  <p>Enter your credentials.</p>
  <?php if (!empty($error)): ?>
    <div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;">
      <?= htmlspecialchars($error, ENT_QUOTES, 'UTF-8') ?>
    </div>
  <?php endif; ?>
  <form method="post" action="/login" style="display:grid;gap:12px;max-width:380px;">
    <?= csrf_field() ?>
    <label>
      <div>Email</div>
      <input type="email" name="email" required style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <label>
      <div>Password</div>
      <input type="password" name="password" required style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;">Sign in</button>
  </form>
</section>

----- END FILE: app/views/auth/login.php -----

----- BEGIN FILE: app/views/categories/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2><?= $mode === 'create' ? 'New Category' : 'Edit Category' ?></h2>

  <form method="post" action="<?= $mode === 'create' ? base_url('/categories') : base_url('/categories/update') ?>" style="display:grid;gap:12px;max-width:520px;">
    <?= csrf_field() ?>
    <?php if ($mode === 'edit'): ?>
      <input type="hidden" name="id" value="<?= (int)$item['id'] ?>">
    <?php endif; ?>

    <label>
      <div>Name</div>
      <input type="text" name="name" required value="<?= htmlspecialchars($item['name'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>

    <label>
      <div>Slug (unique, URL-safe)</div>
      <input type="text" name="slug" required value="<?= htmlspecialchars($item['slug'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>

    <label>
      <div>Parent (optional)</div>
      <select name="parent_id" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
        <option value="">— none —</option>
        <?php foreach ($options as $opt): ?>
          <option value="<?= (int)$opt['id'] ?>" <?php if (!empty($item['parent_id']) && (int)$item['parent_id'] === (int)$opt['id']) echo 'selected'; ?>>
            <?= htmlspecialchars($opt['name'], ENT_QUOTES, 'UTF-8') ?>
          </option>
        <?php endforeach; ?>
      </select>
    </label>

    <div style="display:flex;gap:10px;">
      <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;">
        <?= $mode === 'create' ? 'Create' : 'Save Changes' ?>
      </button>
      <a href="<?= base_url('/categories') ?>" style="align-self:center;">Cancel</a>
    </div>
  </form>
  <?php if ($mode === 'edit'): ?>
  <?php
    $entity_type = 'category';
    $entity_id   = (int)$item['id'];
    $notes       = $notes ?? [];
    include __DIR__ . '/../partials/notes.php';
  ?>
<?php endif; ?>
</section>

----- END FILE: app/views/categories/form.php -----

----- BEGIN FILE: app/views/categories/index.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>Categories</h2>

  <?php if ($msg = flash_get('success')): ?>
    <div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;">
      <?= htmlspecialchars($msg, ENT_QUOTES, 'UTF-8') ?>
    </div>
  <?php endif; ?>

  <?php if ($err = flash_get('error')): ?>
    <div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;">
      <?= htmlspecialchars($err, ENT_QUOTES, 'UTF-8') ?>
    </div>
  <?php endif; ?>

  <p><a href="<?= base_url('/categories/create') ?>">+ New Category</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead>
      <tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Name</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Slug</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Parent</th>
        <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($items as $row): ?>
        <tr>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($row['name'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($row['slug'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($row['parent_name'] ?? '', ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;white-space:nowrap;">
            <a href="<?= base_url('/categories/edit?id=' . (int)$row['id']) ?>">Edit</a>
            &nbsp;|&nbsp;
            <form method="post" action="<?= base_url('/categories/delete') ?>" style="display:inline" onsubmit="return confirm('Delete this category?');">
              <?= csrf_field() ?>
              <input type="hidden" name="id" value="<?= (int)$row['id'] ?>">
              <button type="submit" style="background:none;border:none;color:#c00;cursor:pointer;">Delete</button>
            </form>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?>
        <tr><td colspan="4" style="padding:12px;">No categories yet.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/categories/index.php -----

----- BEGIN FILE: app/views/customers/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2><?= $mode==='create'?'New Customer':'Edit Customer' ?></h2>

  <form method="post" action="<?= $mode==='create'?base_url('/customers'):base_url('/customers/update') ?>" style="display:grid;gap:12px;max-width:720px;">
    <?= csrf_field() ?>
    <?php if ($mode==='edit'): ?><input type="hidden" name="id" value="<?= (int)$item['id'] ?>"><?php endif; ?>
    <label><div>Name</div>
      <input type="text" name="name" required value="<?= htmlspecialchars($item['name'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <label><div>Phone</div>
      <input type="text" name="phone" value="<?= htmlspecialchars($item['phone'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <label><div>Email</div>
      <input type="email" name="email" value="<?= htmlspecialchars($item['email'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <label><div>Address</div>
      <textarea name="address" rows="3" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;"><?= htmlspecialchars($item['address'] ?? '', ENT_QUOTES, 'UTF-8') ?></textarea>
    </label>
    <div style="display:flex;gap:10px;">
      <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;"><?= $mode==='create'?'Create':'Save Changes' ?></button>
      <a href="<?= base_url('/customers') ?>" style="align-self:center;">Cancel</a>
    </div>
  </form>
  <?php if ($mode === 'edit'): ?>
  <?php
    $entity_type = 'customer';
    $entity_id   = (int)$item['id'];
    $notes       = $notes ?? [];
    include __DIR__ . '/../partials/notes.php';
  ?>
<?php endif; ?>
</section>

----- END FILE: app/views/customers/form.php -----

----- BEGIN FILE: app/views/customers/index.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>Customers</h2>

  <?php if ($m = flash_get('success')): ?><div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div><?php endif; ?>
  <?php if ($m = flash_get('error')): ?><div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div><?php endif; ?>

  <p><a href="<?= base_url('/customers/create') ?>">+ New Customer</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Name</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Phone</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Email</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $c): ?>
        <tr>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($c['name'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($c['phone'] ?? '', ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($c['email'] ?? '', ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;">
             <a href="<?= base_url('/customers/show?id='.(int)$c['id']) ?>">View</a> ·
			 <a href="<?= base_url('/customers/edit?id='.(int)$c['id']) ?>">Edit</a> &nbsp;|&nbsp;
			 <a href="<?= base_url('/customers/statement?id='.(int)$c['id'].'&from='.date('Y-m-01').'&to='.date('Y-m-d')) ?>">Statement</a>
            <form method="post" action="<?= base_url('/customers/delete') ?>" style="display:inline" onsubmit="return confirm('Delete this customer?');">
              <?= csrf_field() ?><input type="hidden" name="id" value="<?= (int)$c['id'] ?>">
              <button type="submit" style="background:none;border:none;color:#c00;cursor:pointer;">Delete</button>
            </form>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="4" style="padding:12px;">No customers yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/customers/index.php -----

----- BEGIN FILE: app/views/customers/statement.php -----
<?php
use function App\Core\base_url;
/** @var array $customer,$rows; @var string $from,$to; @var float $opening,$closing */
?>
<section>
  <h2>Customer Statement — <?= htmlspecialchars($customer['name'],ENT_QUOTES,'UTF-8') ?></h2>

  <form class="no-print" method="get" action="<?= base_url('/customers/statement') ?>" style="display:flex;gap:8px;align-items:end;margin:8px 0;">
    <input type="hidden" name="id" value="<?= (int)$customer['id'] ?>">
    <label><div>From</div><input type="date" name="from" value="<?= htmlspecialchars($from,ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
    <label><div>To</div><input type="date" name="to" value="<?= htmlspecialchars($to,ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
    <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Apply</button>
    <button type="button" onclick="window.print()" style="padding:8px 12px;border:1px solid #111;border-radius:8px;background:#fff;color:#111;cursor:pointer;">Print</button>
    <a href="<?= base_url('/customers/show?id='.(int)$customer['id']) ?>" style="margin-left:8px;">Back</a>
  </form>

  <p>Opening balance (before <?= htmlspecialchars($from,ENT_QUOTES,'UTF-8') ?>): <strong><?= number_format((float)$opening,2) ?></strong></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Type</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Ref</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Debit</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Credit</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Running</th>
    </tr></thead>
    <tbody>
      <?php foreach ($rows as $r): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['txn_date'],ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars(ucfirst($r['kind']),ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['ref_no'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['debit'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['credit'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['running'],2) ?></td>
      </tr>
      <?php endforeach; ?>
      <?php if (!$rows): ?>
        <tr><td colspan="6" style="padding:12px;">No movements in this period.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>

  <p style="margin-top:10px;">Closing balance (as of <?= htmlspecialchars($to,ENT_QUOTES,'UTF-8') ?>): <strong><?= number_format((float)$closing,2) ?></strong></p>
</section>

----- END FILE: app/views/customers/statement.php -----

----- BEGIN FILE: app/views/customers/view.php -----
<?php
use function App\Core\base_url;
/** @var array $customer,$quotes,$orders,$invoices,$payments; @var float $ar_balance,$inv_total,$pay_total,$ret_total */
?>
<section>
  <h2>Customer — <?= htmlspecialchars($customer['name'] ?? '',ENT_QUOTES,'UTF-8') ?></h2>
  <p>
    <strong>Phone:</strong> <?= htmlspecialchars($customer['phone'] ?? '',ENT_QUOTES,'UTF-8') ?> ·
    <strong>Email:</strong> <?= htmlspecialchars($customer['email'] ?? '',ENT_QUOTES,'UTF-8') ?> ·
    <strong>Address:</strong> <?= htmlspecialchars($customer['address'] ?? '',ENT_QUOTES,'UTF-8') ?>
  </p>
  <p>
    <strong>AR Totals</strong> — Invoices: <?= number_format($inv_total,2) ?> ·
    Payments: <?= number_format($pay_total,2) ?> ·
    Credits: <?= number_format($ret_total,2) ?> ·
    <strong>Balance:</strong> <?= number_format($ar_balance,2) ?>
  </p>
  <p>
    <a class="button" href="<?= base_url('/customers/statement?id='.(int)$customer['id']) ?>">View Statement</a>
    · <a href="<?= base_url('/customers') ?>">Back to Customers</a>
  </p>

  <div class="tabs">
    <div class="tabbar">
      <button data-tab="quotes" class="active">Quotes</button>
      <button data-tab="orders">Sales Orders</button>
      <button data-tab="invoices">Invoices</button>
      <button data-tab="payments">Payments</button>
    </div>

    <div class="tabcontent" id="tab-quotes" style="display:block;">
      <table class="grid">
        <thead><tr><th>#</th><th>Date</th><th>Status</th><th class="r">Total</th><th>Action</th></tr></thead>
        <tbody>
          <?php foreach ($quotes as $q): ?>
          <tr>
            <td><?= htmlspecialchars($q['q_no'] ?? $q['id'],ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($q['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($q['status'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td class="r"><?= number_format((float)($q['total'] ?? 0),2) ?></td>
            <td><a href="<?= base_url('/quotes/show?id='.(int)$q['id']) ?>">Open</a></td>
          </tr>
          <?php endforeach; ?>
          <?php if (!$quotes): ?><tr><td colspan="5">No quotes.</td></tr><?php endif; ?>
        </tbody>
      </table>
    </div>

    <div class="tabcontent" id="tab-orders">
      <table class="grid">
        <thead><tr><th>SO #</th><th>Date</th><th>Status</th><th class="r">Total</th><th>Action</th></tr></thead>
        <tbody>
          <?php foreach ($orders as $o): ?>
          <tr>
            <td><?= htmlspecialchars($o['so_no'] ?? $o['id'],ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($o['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($o['status'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td class="r"><?= number_format((float)($o['total'] ?? 0),2) ?></td>
            <td><a href="<?= base_url('/orders/show?id='.(int)$o['id']) ?>">Open</a></td>
          </tr>
          <?php endforeach; ?>
          <?php if (!$orders): ?><tr><td colspan="5">No orders.</td></tr><?php endif; ?>
        </tbody>
      </table>
    </div>

    <div class="tabcontent" id="tab-invoices">
      <table class="grid">
        <thead><tr><th>INV #</th><th>Date</th><th>Status</th><th class="r">Paid</th><th class="r">Total</th><th class="r">Balance</th><th>Action</th></tr></thead>
        <tbody>
          <?php foreach ($invoices as $i): ?>
          <?php $bal = (float)$i['total'] - (float)$i['paid_amount']; ?>
          <tr>
            <td><?= htmlspecialchars($i['inv_no'] ?? $i['id'],ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($i['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($i['status'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td class="r"><?= number_format((float)$i['paid_amount'],2) ?></td>
            <td class="r"><?= number_format((float)$i['total'],2) ?></td>
            <td class="r"><?= number_format($bal,2) ?></td>
            <td><a href="<?= base_url('/invoices/show?id='.(int)$i['id']) ?>">Open</a></td>
          </tr>
          <?php endforeach; ?>
          <?php if (!$invoices): ?><tr><td colspan="7">No invoices.</td></tr><?php endif; ?>
        </tbody>
      </table>
    </div>

    <div class="tabcontent" id="tab-payments">
      <table class="grid">
        <thead><tr><th>Date</th><th>Method</th><th>Ref</th><th>Invoice</th><th class="r">Amount</th></tr></thead>
        <tbody>
          <?php foreach ($payments as $p): ?>
          <tr>
            <td><?= htmlspecialchars($p['paid_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($p['method'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($p['reference'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><a href="<?= base_url('/invoices/show?id='.(int)($p['invoice_id'] ?? 0)) ?>"><?= htmlspecialchars($p['inv_no'] ?? ($p['invoice_id'] ?? ''),ENT_QUOTES,'UTF-8') ?></a></td>
            <td class="r"><?= number_format((float)($p['amount'] ?? 0),2) ?></td>
          </tr>
          <?php endforeach; ?>
          <?php if (!$payments): ?><tr><td colspan="5">No payments.</td></tr><?php endif; ?>
        </tbody>
      </table>
    </div>
  </div>
</section>

<style>
.tabs .tabbar { display:flex; gap:6px; margin:10px 0; flex-wrap:wrap; }
.tabs .tabbar button { padding:6px 10px; border:1px solid #ddd; background:#fff; border-radius:8px; cursor:pointer; }
.tabs .tabbar button.active { background:#111; color:#fff; border-color:#111; }
.grid { width:100%; border-collapse:collapse; }
.grid th, .grid td { padding:8px; border-bottom:1px solid #eee; text-align:left; }
.grid .r { text-align:right; }
</style>
<script>
(function(){
  const buttons = document.querySelectorAll('.tabbar button');
  const tabs = {
    'quotes': document.getElementById('tab-quotes'),
    'orders': document.getElementById('tab-orders'),
    'invoices': document.getElementById('tab-invoices'),
    'payments': document.getElementById('tab-payments'),
  };
  buttons.forEach(btn=>{
    btn.addEventListener('click', ()=>{
      buttons.forEach(b=>b.classList.remove('active'));
      btn.classList.add('active');
      const target = btn.dataset.tab;
      Object.keys(tabs).forEach(k => tabs[k].style.display = (k===target)?'block':'none');
    });
  });
})();
</script>

----- END FILE: app/views/customers/view.php -----

----- BEGIN FILE: app/views/errors/404.php -----
<section>
  <h2>404 — Not Found</h2>
  <p>The page you requested could not be found.</p>
</section>

----- END FILE: app/views/errors/404.php -----

----- BEGIN FILE: app/views/home/index.php -----
<section>
  <h2>Bootstrap OK</h2>
  <p>Router, controller, view, layout are wired.</p>

  <p>Database connection: <strong><?= $db_ok ? 'OK' : 'FAILED' ?></strong></p>

  <?php if (!$db_ok && !empty($debug) && !empty($db_error)): ?>
    <pre><?= htmlspecialchars($db_error, ENT_QUOTES, 'UTF-8') ?></pre>
  <?php endif; ?>

  <p>Health check: <a href="/health">/health</a></p>
</section>

----- END FILE: app/views/home/index.php -----

----- BEGIN FILE: app/views/invoices/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Invoices</h2>
  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Invoice #</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Customer</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Total</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Paid</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Status</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $i): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($i['inv_no'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($i['customer_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$i['total'],2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$i['paid_amount'],2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($i['status'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <a href="<?= base_url('/invoices/show?id='.(int)$i['id']) ?>">View</a>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="6" style="padding:12px;">No invoices yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/invoices/index.php -----

----- BEGIN FILE: app/views/invoices/print.php -----
<?php
use function App\Core\base_url;
use function App\Core\format_note_html;
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Invoice <?= htmlspecialchars($i['inv_no'], ENT_QUOTES, 'UTF-8') ?></title>
  <style>
    body{font-family:Arial, sans-serif; margin:24px;}
    h1{margin:0 0 8px 0;}
    .muted{color:#666;}
    table{width:100%;border-collapse:collapse;margin-top:12px;}
    th,td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
    td.r, th.r {text-align:right;}
    .toolbar{margin-bottom:12px; padding:10px; border:1px solid #eee; border-radius:8px;}
    @media print{ .no-print{ display:none !important; } .toolbar{ display:none !important; } }
    @page { size: A4; margin: 16mm; }
  </style>
</head>
<body>
  <div class="toolbar no-print">
    <form method="get" action="<?= base_url('/invoices/print') ?>" style="display:flex;gap:12px;align-items:center;">
      <input type="hidden" name="id" value="<?= (int)$i['id'] ?>">
      <label style="display:flex;gap:6px;align-items:center;">
        <input type="checkbox" name="include_notes" value="1" <?= $include_notes ? 'checked' : '' ?>> Include public notes
      </label>
      <button type="submit" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;">Apply</button>
      <button type="button" onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Print</button>
      <a class="no-print" href="<?= base_url('/invoices/show?id='.(int)$i['id']) ?>" style="margin-left:auto;">Back</a>
    </form>
  </div>

  <div style="margin-bottom:10px;">
    <img src="<?= base_url('/img/logo.png') ?>" alt="Logo" style="height:48px;vertical-align:middle;">
  </div>

  <header>
    <h1>Invoice <?= htmlspecialchars($i['inv_no'], ENT_QUOTES, 'UTF-8') ?></h1>
    <div class="muted">Customer: <?= htmlspecialchars($i['customer_name'] ?? ('#'.(int)$i['customer_id']), ENT_QUOTES, 'UTF-8') ?>
      • Status: <?= htmlspecialchars($i['status'], ENT_QUOTES, 'UTF-8') ?></div>
  </header>

  <table>
    <thead>
      <tr>
        <th>Product</th>
        <th>Warehouse</th>
        <th class="r">Qty</th>
        <th class="r">Unit Price</th>
        <th class="r">Line Total</th>
      </tr>
    </thead>
    <tbody>
    <?php foreach ($items as $it): ?>
      <tr>
        <td><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td><?= htmlspecialchars($it['warehouse_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td class="r"><?= (int)$it['qty'] ?></td>
        <td class="r"><?= number_format((float)$it['price'],2) ?></td>
        <td class="r"><?= number_format((float)$it['line_total'],2) ?></td>
      </tr>
    <?php endforeach; ?>
    </tbody>
  </table>

  <p class="r" style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$i['subtotal'],2) ?>
    &nbsp;|&nbsp; Tax (<?= number_format((float)$i['tax_rate'],2) ?>%): <?= number_format((float)$i['tax_amount'],2) ?>
    &nbsp;|&nbsp; <strong>Total: <?= number_format((float)$i['total'],2) ?></strong>
  </p>

  <?php if (!empty($public_notes) && $include_notes): ?>
    <section style="margin-top:16px;">
      <h3>Public Notes</h3>
      <ul style="list-style:none;padding:0;display:grid;gap:8px;">
        <?php foreach ($public_notes as $n): ?>
          <li style="border:1px solid #eee;border-radius:8px;padding:10px;">
            <div style="font-size:12px;color:#666;"><?= htmlspecialchars($n['created_by'] ?? 'system', ENT_QUOTES, 'UTF-8') ?> · <?= htmlspecialchars($n['created_at'] ?? '', ENT_QUOTES, 'UTF-8') ?></div>
            <div style="margin-top:6px;"><?= format_note_html($n['body'] ?? '') ?></div>
          </li>
        <?php endforeach; ?>
      </ul>
    </section>
  <?php endif; ?>
</body>
</html>

----- END FILE: app/views/invoices/print.php -----

----- BEGIN FILE: app/views/invoices/view.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\format_note_html;
/** @var array $i, $items, $payments */

// Load credits total and returns history (controller must pass these; see patch below)
$credits_total = (float)($credits_total ?? 0.0);
$paid_amount   = (float)($i['paid_amount'] ?? 0);
$total         = (float)($i['total'] ?? 0);
$balance       = max(0.0, $total - $paid_amount - $credits_total);
$status        = $i['status'] ?? 'unpaid';
?>
<section>
  <h2>Invoice <?= htmlspecialchars($i['inv_no'],ENT_QUOTES,'UTF-8') ?></h2>
  <div>Status: <strong><?= htmlspecialchars($status,ENT_QUOTES,'UTF-8') ?></strong></div>
  <div>
    Total: <strong><?= number_format($total,2) ?></strong>
    &nbsp;| Paid: <strong><?= number_format($paid_amount,2) ?></strong>
    &nbsp;| Credits: <strong><?= number_format($credits_total,2) ?></strong>
    &nbsp;| Balance: <strong><?= number_format($balance,2) ?></strong>
  </div>

  <p style="margin-top:6px;">
    <a href="<?= base_url('/invoices/print?id='.(int)$i['id']) ?>">Print</a>
  </p>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Unit Price</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Line Total</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $it): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['warehouse_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$it['qty'] ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$it['price'],2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$it['line_total'],2) ?></td>
        </tr>
      <?php endforeach; ?>
    </tbody>
  </table>

  <p style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$i['subtotal'],2) ?>
    &nbsp;| Tax (<?= number_format((float)$i['tax_rate'],2) ?>%): <?= number_format((float)$i['tax_amount'],2) ?>
    &nbsp;| <strong>Total: <?= number_format((float)$i['total'],2) ?></strong>
  </p>

  <hr style="margin:14px 0;">

  <h3>Create Credit Note (Sales Return)</h3>
  <form method="post" action="<?= base_url('/salesreturns') ?>">
    <?= csrf_field() ?>
    <input type="hidden" name="invoice_id" value="<?= (int)$i['id'] ?>">
    <table style="width:100%;border-collapse:collapse;">
      <thead><tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Invoiced</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Returned</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Remaining</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Return now</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Price</th>
      </tr></thead>
      <tbody>
        <?php
          $ret_map = $ret_map ?? []; // 'product:warehouse' => returned so far
          $hasRemain = false;
          foreach ($items as $it):
            $key = $it['product_id'].':'.$it['warehouse_id'];
            $sold = (int)$it['qty'];
            $ret  = (int)($ret_map[$key] ?? 0);
            $rem  = max(0, $sold - $ret);
            $hasRemain = $hasRemain || ($rem > 0);
        ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['warehouse_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= $sold ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= $ret ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><span class="sr-rem"><?= $rem ?></span></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
            <?php if ($rem > 0): ?>
              <input class="sr-qty" type="number" name="ret_qty[]" min="0" max="<?= $rem ?>" step="1" value="0"
                     style="width:90px;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
            <?php else: ?>
              <span class="muted">—</span>
            <?php endif; ?>
            <input type="hidden" name="ret_product_id[]" value="<?= (int)$it['product_id'] ?>">
            <input type="hidden" name="ret_warehouse_id[]" value="<?= (int)$it['warehouse_id'] ?>">
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
            <input type="number" name="ret_price[]" step="0.01" min="0" value="<?= number_format((float)$it['price'],2,'.','') ?>"
                   style="width:110px;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
          </td>
        </tr>
        <?php endforeach; ?>
      </tbody>
    </table>
    <div style="margin-top:10px;">
      <button type="button" id="btn-fill-all"
              style="padding:8px 12px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;" <?= $hasRemain ? '' : 'disabled' ?>>
        Return all remaining
      </button>
      <button type="submit"
              style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;" <?= $hasRemain ? '' : 'disabled' ?>>
        Create Credit Note
      </button>
    </div>
  </form>

  <h3 style="margin-top:18px;">Returns / Credit Notes</h3>
  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">Credit #</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Product</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Qty</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Price</th>
    </tr></thead>
    <tbody>
      <?php foreach (($returns ?? []) as $r): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <a href="<?= base_url('/salesreturns/print?id='.(int)$r['sales_return_id']) ?>"><?= htmlspecialchars($r['sr_no'] ?? '',ENT_QUOTES,'UTF-8') ?></a>
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars(($r['product_code'] ?? '').' — '.($r['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$r['qty'] ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['price'],2) ?></td>
        </tr>
      <?php endforeach; ?>
      <?php if (empty($returns)): ?>
        <tr><td colspan="6" style="padding:12px;">No credit notes yet.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>

  <?php
    // Notes (sales_invoice)
    $entity_type = 'sales_invoice';
    $entity_id   = (int)$i['id'];
    $notes       = $notes ?? [];
    include __DIR__ . '/../partials/notes.php';
  ?>
</section>

<script>
(function(){
  const btn = document.getElementById('btn-fill-all');
  if (!btn) return;
  btn.addEventListener('click', function(){
    document.querySelectorAll('.sr-rem').forEach(function(span){
      const rem = parseInt(span.textContent || '0', 10) || 0;
      const row = span.closest('tr');
      const input = row ? row.querySelector('.sr-qty') : null;
      if (input && rem > 0) { input.value = rem; }
    });
  });
})();
</script>

----- END FILE: app/views/invoices/view.php -----

----- BEGIN FILE: app/views/layouts/main.php -----
<?php /** @var string $content */ ?>
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\auth_check;
use function App\Core\auth_user;
use function App\Core\flash_get;
?>
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Spare Parts App</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin:0; padding:24px; background:#f7f7f9; color:#111; }
    .container { max-width: 980px; margin: 0 auto; background:#fff; border-radius:12px; padding:24px; box-shadow: 0 2px 16px rgba(0,0,0,.06); }
    header { margin-bottom: 16px; display:flex; align-items:center; justify-content:space-between; flex-wrap:wrap; gap:8px;}
    nav a { color:#0a58ca; text-decoration:none; margin-right:10px; }
    .logout-form { display:inline; }
    .logout-form button { background:none; border:none; color:#0a58ca; cursor:pointer; padding:0; }
    code, pre { background:#f2f2f4; padding:2px 6px; border-radius:6px; }
    a { color:#0a58ca; text-decoration: none; }
    .banner { padding:10px;border-radius:8px;margin:10px 0; }
    .banner.ok { background:#e7f8ee;border:1px solid #b9e7c9; }
    .banner.err{ background:#ffe9e9;border:1px solid #ffb3b3; }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div>
        <h1 style="margin:0 0 4px 0;">Spare Parts Management</h1>
        <nav>
          <a href="<?= base_url('/') ?>">Home</a> ·
          <a href="<?= base_url('/health') ?>">Health</a> ·
		  <a href="<?= base_url('/categories') ?>">Categories</a> ·
		  <a href="<?= base_url('/makes') ?>">Makes</a> ·
		  <a href="<?= base_url('/models') ?>">Models</a> ·
		  <a href="<?= base_url('/warehouses') ?>">Warehouses</a> ·
		  <a href="<?= base_url('/products') ?>">Products</a> ·
		  <a href="<?= base_url('/customers') ?>">Customers</a> ·
		  <a href="<?= base_url('/quotes') ?>">Quotes</a> ·
		  <a href="<?= base_url('/orders') ?>">Orders</a> ·
		  <a href="<?= base_url('/invoices') ?>">Invoices</a> ·
		  <a href="<?= base_url('/payments') ?>">Payments</a> ·
		  <a href="<?= base_url('/suppliers') ?>">Suppliers</a> ·
		  <a href="<?= base_url('/purchaseorders') ?>">Purchase Orders</a> ·
		  <a href="<?= base_url('/purchaseinvoices') ?>">Purchase Invoices</a> ·
		  <a href="<?= base_url('/supplierpayments') ?>">Supplier Payments</a> ·
		  <a href="<?= base_url('/reports/ap-aging') ?>">AP Reports</a> ·
		  <a href="<?= base_url('/reports/ar-aging') ?>">AR Reports</a> ·
		  <a href="<?= base_url('/transfers') ?>">Transfers</a> ·
          <a href="<?= base_url('/adjustments') ?>">Adjustments</a>
        </nav>
      </div>
      <div>
        <?php if (auth_check()): $u = auth_user(); ?>
          <a href="<?= base_url('/profile') ?>" style="margin-right:8px;">Hello, <?= htmlspecialchars($u['email'], ENT_QUOTES, 'UTF-8') ?></a>
          <form class="logout-form" method="post" action="<?= base_url('/logout') ?>">
            <?= csrf_field() ?>
            <button type="submit" title="Log out">Logout</button>
          </form>
        <?php else: ?>
          <a href="<?= base_url('/login') ?>">Login</a>
        <?php endif; ?>
      </div>
    </header>

    <?php if ($m = flash_get('success')): ?>
      <div class="banner ok"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
    <?php endif; ?>
    <?php if ($m = flash_get('error')): ?>
      <div class="banner err"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
    <?php endif; ?>

    <main>
      <?= $content ?>
    </main>
  </div>
</body>
</html>

----- END FILE: app/views/layouts/main.php -----

----- BEGIN FILE: app/views/makes/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2><?= $mode === 'create' ? 'New Make' : 'Edit Make' ?></h2>

  <form method="post" action="<?= $mode === 'create' ? base_url('/makes') : base_url('/makes/update') ?>" style="display:grid;gap:12px;max-width:520px;">
    <?= csrf_field() ?>
    <?php if ($mode === 'edit'): ?>
      <input type="hidden" name="id" value="<?= (int)$item['id'] ?>">
    <?php endif; ?>

    <label>
      <div>Name</div>
      <input type="text" name="name" required value="<?= htmlspecialchars($item['name'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>

    <label>
      <div>Slug (unique)</div>
      <input type="text" name="slug" required value="<?= htmlspecialchars($item['slug'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>

    <div style="display:flex;gap:10px;">
      <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;">
        <?= $mode === 'create' ? 'Create' : 'Save Changes' ?>
      </button>
      <a href="<?= base_url('/makes') ?>" style="align-self:center;">Cancel</a>
    </div>
  </form>
</section>

----- END FILE: app/views/makes/form.php -----

----- BEGIN FILE: app/views/makes/index.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>Makes</h2>

  <?php if ($m = flash_get('success')): ?>
    <div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>
  <?php if ($m = flash_get('error')): ?>
    <div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>

  <p><a href="<?= base_url('/makes/create') ?>">+ New Make</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead>
      <tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Name</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Slug</th>
        <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
      </tr>
    </thead>
    <tbody>
    <?php foreach ($items as $row): ?>
      <tr>
        <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($row['name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($row['slug'], ENT_QUOTES, 'UTF-8') ?></td>
        <td style="border-bottom:1px solid #f2f2f4;padding:8px;white-space:nowrap;">
          <a href="<?= base_url('/makes/edit?id='.(int)$row['id']) ?>">Edit</a>
          &nbsp;|&nbsp;
          <form method="post" action="<?= base_url('/makes/delete') ?>" style="display:inline" onsubmit="return confirm('Delete this make?');">
            <?= csrf_field() ?>
            <input type="hidden" name="id" value="<?= (int)$row['id'] ?>">
            <button type="submit" style="background:none;border:none;color:#c00;cursor:pointer;">Delete</button>
          </form>
        </td>
      </tr>
    <?php endforeach; ?>
    <?php if (!$items): ?>
      <tr><td colspan="3" style="padding:12px;">No makes yet.</td></tr>
    <?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/makes/index.php -----

----- BEGIN FILE: app/views/models/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2><?= $mode === 'create' ? 'New Model' : 'Edit Model' ?></h2>

  <form method="post" action="<?= $mode === 'create' ? base_url('/models') : base_url('/models/update') ?>" style="display:grid;gap:12px;max-width:520px;">
    <?= csrf_field() ?>
    <?php if ($mode === 'edit'): ?>
      <input type="hidden" name="id" value="<?= (int)$item['id'] ?>">
    <?php endif; ?>

    <label>
      <div>Make</div>
      <select name="make_id" required style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
        <?php foreach ($makes as $mk): ?>
          <option value="<?= (int)$mk['id'] ?>" <?php
            $cur = $item['make_id'] ?? null;
            if ($cur && (int)$cur === (int)$mk['id']) echo 'selected';
          ?>>
            <?= htmlspecialchars($mk['name'], ENT_QUOTES, 'UTF-8') ?>
          </option>
        <?php endforeach; ?>
      </select>
    </label>

    <label>
      <div>Name</div>
      <input type="text" name="name" required value="<?= htmlspecialchars($item['name'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>

    <label>
      <div>Slug (unique per make)</div>
      <input type="text" name="slug" required value="<?= htmlspecialchars($item['slug'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>

    <div style="display:flex;gap:10px;">
      <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;">
        <?= $mode === 'create' ? 'Create' : 'Save Changes' ?>
      </button>
      <a href="<?= base_url('/models') ?>" style="align-self:center;">Cancel</a>
    </div>
  </form>
</section>

----- END FILE: app/views/models/form.php -----

----- BEGIN FILE: app/views/models/index.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>Models</h2>

  <?php if ($m = flash_get('success')): ?>
    <div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>
  <?php if ($m = flash_get('error')): ?>
    <div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>

  <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:10px;">
    <form method="get" action="<?= base_url('/models') ?>">
      <label>
        Filter by make:
        <select name="make_id" onchange="this.form.submit()" style="padding:6px;border:1px solid #ddd;border-radius:6px;">
          <option value="">All</option>
          <?php foreach ($makes as $mk): ?>
            <option value="<?= (int)$mk['id'] ?>" <?php if (!empty($selected_make) && (int)$selected_make === (int)$mk['id']) echo 'selected'; ?>>
              <?= htmlspecialchars($mk['name'], ENT_QUOTES, 'UTF-8') ?>
            </option>
          <?php endforeach; ?>
        </select>
      </label>
    </form>
    <a href="<?= base_url('/models/create') ?>">+ New Model</a>
  </div>

  <table style="width:100%;border-collapse:collapse;">
    <thead>
      <tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Make</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Name</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Slug</th>
        <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
      </tr>
    </thead>
    <tbody>
    <?php foreach ($items as $row): ?>
      <tr>
        <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($row['make_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($row['name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($row['slug'], ENT_QUOTES, 'UTF-8') ?></td>
        <td style="border-bottom:1px solid #f2f2f4;padding:8px;white-space:nowrap;">
          <a href="<?= base_url('/models/edit?id='.(int)$row['id']) ?>">Edit</a>
          &nbsp;|&nbsp;
          <form method="post" action="<?= base_url('/models/delete') ?>" style="display:inline" onsubmit="return confirm('Delete this model?');">
            <?= csrf_field() ?>
            <input type="hidden" name="id" value="<?= (int)$row['id'] ?>">
            <button type="submit" style="background:none;border:none;color:#c00;cursor:pointer;">Delete</button>
          </form>
        </td>
      </tr>
    <?php endforeach; ?>
    <?php if (!$items): ?>
      <tr><td colspan="4" style="padding:12px;">No models yet.</td></tr>
    <?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/models/index.php -----

----- BEGIN FILE: app/views/orders/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Sales Orders</h2>
  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Order #</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Customer</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Total</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Status</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $o): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($o['so_no'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($o['customer_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$o['total'],2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($o['status'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><a href="<?= base_url('/orders/show?id='.(int)$o['id']) ?>">View</a></td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="5" style="padding:12px;">No orders yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/orders/index.php -----

----- BEGIN FILE: app/views/orders/print.php -----
<?php
use function App\Core\base_url;
use function App\Core\format_note_html;
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sales Order <?= htmlspecialchars($o['so_no'], ENT_QUOTES, 'UTF-8') ?></title>
  <style>
    body{font-family:Arial, sans-serif; margin:24px;}
    h1{margin:0 0 8px 0;}
    .muted{color:#666;}
    table{width:100%;border-collapse:collapse;margin-top:12px;}
    th,td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
    td.r, th.r {text-align:right;}
    .toolbar{margin-bottom:12px; padding:10px; border:1px solid #eee; border-radius:8px;}
    @media print{ .no-print{ display:none !important; } .toolbar{ display:none !important; } }
	@page { size: A4; margin: 16mm; }
@media print {
  footer { position: fixed; bottom: 0; left: 0; right: 0; text-align: center; font-size: 11px; color:#666; }
  thead { display: table-header-group; }
  tr { break-inside: avoid; }
}
  </style>
</head>
<body>
  <div class="toolbar no-print">
    <form method="get" action="<?= base_url('/orders/print') ?>" style="display:flex;gap:12px;align-items:center;">
      <input type="hidden" name="id" value="<?= (int)$o['id'] ?>">
      <label style="display:flex;gap:6px;align-items:center;">
        <input type="checkbox" name="include_notes" value="1" <?= $include_notes ? 'checked' : '' ?>> Include public notes
      </label>
      <button type="submit" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;">Apply</button>
      <button type="button" onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Print</button>
      <a class="no-print" href="<?= base_url('/orders/show?id='.(int)$o['id']) ?>" style="margin-left:auto;">Back</a>
    </form>
  </div>

  <header>
  <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;">
  <div>
    <div style="font-weight:700;font-size:20px;">Spare Parts Management</div>
    <div class="muted">Address line • Phone • Email</div>
  </div>
  <!-- brand/logo -->
  <div style="margin-bottom:10px;">
    <img src="<?= base_url('/img/logo.png') ?>" alt="Logo" style="height:48px;vertical-align:middle;">
  </div>
  <!-- Optional logo: <img src="/public/img/logo.png" alt="Logo" style="height:48px"> -->
</div>

    <h1>Sales Order <?= htmlspecialchars($o['so_no'], ENT_QUOTES, 'UTF-8') ?></h1>
    <div class="muted">Customer ID: <?= (int)$o['customer_id'] ?> • Status: <?= htmlspecialchars($o['status'], ENT_QUOTES, 'UTF-8') ?></div>
  </header>

  <table>
    <thead>
      <tr>
        <th>Product</th>
        <th>Warehouse</th>
        <th class="r">Qty</th>
        <th class="r">Unit Price</th>
        <th class="r">Line Total</th>
      </tr>
    </thead>
    <tbody>
    <?php foreach ($items as $it): ?>
      <tr>
        <td><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td><?= htmlspecialchars($it['warehouse_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td class="r"><?= (int)$it['qty'] ?></td>
        <td class="r"><?= number_format((float)$it['price'],2) ?></td>
        <td class="r"><?= number_format((float)$it['line_total'],2) ?></td>
      </tr>
    <?php endforeach; ?>
    </tbody>
  </table>

  <p class="r" style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$o['subtotal'],2) ?>
    &nbsp;|&nbsp; Tax (<?= number_format((float)$o['tax_rate'],2) ?>%): <?= number_format((float)$o['tax_amount'],2) ?>
    &nbsp;|&nbsp; <strong>Total: <?= number_format((float)$o['total'],2) ?></strong>
  </p>

  <?php if (!empty($public_notes) && $include_notes): ?>
    <section style="margin-top:16px;">
      <h3>Public Notes</h3>
      <ul style="list-style:none;padding:0;display:grid;gap:8px;">
        <?php foreach ($public_notes as $n): ?>
          <li style="border:1px solid #eee;border-radius:8px;padding:10px;">
            <div style="font-size:12px;color:#666;"><?= htmlspecialchars($n['created_by'] ?? 'system', ENT_QUOTES, 'UTF-8') ?> · <?= htmlspecialchars($n['created_at'] ?? '', ENT_QUOTES, 'UTF-8') ?></div>
            <div style="margin-top:6px;"><?= format_note_html($n['body'] ?? '') ?></div>
          </li>
        <?php endforeach; ?>
      </ul>
    </section>
  <?php endif; ?>
  <footer>Page <span class="pageNumber"></span></footer>
<script>try{document.querySelector('.pageNumber').textContent='';}catch(e){}</script>

</body>
</html>

----- END FILE: app/views/orders/print.php -----

----- BEGIN FILE: app/views/orders/view.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2>Sales Order <?= htmlspecialchars($o['so_no'], ENT_QUOTES, 'UTF-8') ?></h2>
  <p>Status: <strong><?= htmlspecialchars($o['status'], ENT_QUOTES, 'UTF-8') ?></strong></p>
  <p>Total: <strong><?= number_format((float)$o['total'], 2) ?></strong></p>

  <!-- Actions toolbar -->
  <div style="margin:6px 0 12px 0; display:flex; gap:8px; flex-wrap:wrap;">
    <form method="post" action="<?= base_url('/invoices/create-from-order') ?>" style="display:inline-block;">
      <?= csrf_field() ?>
      <input type="hidden" name="order_id" value="<?= (int)$o['id'] ?>">
      <button type="submit"
              style="border:1px solid #111;background:#111;color:#fff;border-radius:8px;padding:6px 10px;cursor:pointer;">
        Create Invoice
      </button>
    </form>

    <a class="no-print"
       href="<?= base_url('/orders/print?id='.(int)$o['id']) ?>"
       style="border:1px solid #ddd;border-radius:8px;padding:6px 10px;background:#f9f9fb;text-decoration:none;display:inline-block;">
      Print
    </a>

    <a href="<?= base_url('/orders') ?>"
       style="border:1px solid #ddd;border-radius:8px;padding:6px 10px;background:#fff;text-decoration:none;display:inline-block;">
      Back to Orders
    </a>
  </div>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead>
      <tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Unit Price</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Line Total</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($items as $it): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <?= htmlspecialchars($it['product_code'].' — '.$it['product_name'], ENT_QUOTES, 'UTF-8') ?>
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <?= htmlspecialchars($it['warehouse_name'], ENT_QUOTES, 'UTF-8') ?>
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
            <?= (int)$it['qty'] ?>
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
            <?= number_format((float)$it['price'], 2) ?>
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
            <?= number_format((float)$it['line_total'], 2) ?>
          </td>
        </tr>
      <?php endforeach; ?>
    </tbody>
  </table>

  <?php
    // Notes (sales_order)
    $entity_type = 'sales_order';
    $entity_id   = (int)$o['id'];
    $notes       = $notes ?? [];
    include __DIR__ . '/../partials/notes.php';
  ?>
</section>

----- END FILE: app/views/orders/view.php -----

----- BEGIN FILE: app/views/partials/notes - Copy.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;

/** @var string $entity_type */
/** @var int $entity_id */
/** @var array $notes */
?>
<section style="margin-top:18px;">
  <h3>Notes</h3>

  <div style="margin:10px 0;">
    <?php if (!$notes): ?>
      <div style="color:#666;">No notes yet.</div>
    <?php else: ?>
      <ul style="list-style:none;padding:0;margin:0;display:grid;gap:10px;">
        <?php foreach ($notes as $n): ?>
          <li style="border:1px solid #eee;border-radius:8px;padding:10px;">
            <div style="display:flex;justify-content:space-between;gap:10px;">
              <div>
                <?php if ((int)$n['is_public'] === 1): ?>
                  <span style="border:1px solid #0a0;color:#0a0;padding:2px 6px;border-radius:6px;font-size:12px;">Public</span>
                <?php else: ?>
                  <span style="border:1px solid #999;color:#333;padding:2px 6px;border-radius:6px;font-size:12px;">Private</span>
                <?php endif; ?>
              </div>
              <div style="color:#666;font-size:12px;">
                <?= htmlspecialchars($n['created_by'] ?? 'system', ENT_QUOTES, 'UTF-8') ?>
                · <?= htmlspecialchars($n['created_at'] ?? '', ENT_QUOTES, 'UTF-8') ?>
              </div>
            </div>
            <div style="white-space:pre-wrap;margin-top:6px;">
              <?= htmlspecialchars($n['body'], ENT_QUOTES, 'UTF-8') ?>
            </div>
            <form method="post" action="<?= base_url('/notes/delete') ?>" style="margin-top:6px;">
              <?= csrf_field() ?>
              <input type="hidden" name="id" value="<?= (int)$n['id'] ?>">
              <input type="hidden" name="_return" value="<?= htmlspecialchars($_SERVER['REQUEST_URI'] ?? '/', ENT_QUOTES, 'UTF-8') ?>">
              <button type="submit" style="background:none;border:1px solid #cc0000;color:#cc0000;border-radius:6px;padding:4px 8px;cursor:pointer;">Delete</button>
            </form>
          </li>
        <?php endforeach; ?>
      </ul>
    <?php endif; ?>
  </div>

  <form method="post" action="<?= base_url('/notes') ?>" style="display:grid;gap:10px;max-width:900px;">
    <?= csrf_field() ?>
    <input type="hidden" name="entity_type" value="<?= htmlspecialchars($entity_type, ENT_QUOTES, 'UTF-8') ?>">
    <input type="hidden" name="entity_id" value="<?= (int)$entity_id ?>">
    <input type="hidden" name="_return" value="<?= htmlspecialchars($_SERVER['REQUEST_URI'] ?? '/', ENT_QUOTES, 'UTF-8') ?>">
    <label>
      <div>Note</div>
      <textarea name="body" rows="3" required
        style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;"></textarea>
    </label>
    <label style="display:flex;gap:8px;align-items:center;">
      <input type="checkbox" name="is_public" value="1">
      <span>Public (can appear on printed documents)</span>
    </label>
    <div>
      <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Add Note</button>
    </div>
  </form>
</section>

----- END FILE: app/views/partials/notes - Copy.php -----

----- BEGIN FILE: app/views/partials/notes.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\format_note_html;

/** @var string $entity_type */
/** @var int $entity_id */
/** @var array $notes */

$PER_PAGE = 10; // show first N, reveal more with JS
?>
<section style="margin-top:18px;">
  <h3>Notes</h3>

  <div style="margin:10px 0;">
    <?php if (!$notes): ?>
      <div style="color:#666;">No notes yet.</div>
    <?php else: ?>
      <ul id="notes-list" style="list-style:none;padding:0;margin:0;display:grid;gap:10px;">
        <?php foreach ($notes as $idx => $n): ?>
          <?php
            $isHidden = ($idx >= $PER_PAGE);
            $noteId = (int)$n['id'];
            $isPublic = (int)$n['is_public'] === 1;
          ?>
          <li class="note-item<?= $isHidden ? ' note-hidden' : '' ?>" data-idx="<?= $idx ?>"
              style="border:1px solid #eee;border-radius:8px;padding:10px;<?= $isHidden ? 'display:none;' : '' ?>">
            <div style="display:flex;justify-content:space-between;gap:10px;align-items:center;">
              <div>
                <?php if ($isPublic): ?>
                  <span style="border:1px solid #0a0;color:#0a0;padding:2px 6px;border-radius:6px;font-size:12px;">Public</span>
                <?php else: ?>
                  <span style="border:1px solid #999;color:#333;padding:2px 6px;border-radius:6px;font-size:12px;">Private</span>
                <?php endif; ?>
              </div>
              <div style="color:#666;font-size:12px;">
                <?= htmlspecialchars($n['created_by'] ?? 'system', ENT_QUOTES, 'UTF-8') ?>
                · <?= htmlspecialchars($n['created_at'] ?? '', ENT_QUOTES, 'UTF-8') ?>
              </div>
            </div>

            <!-- display mode -->
            <div class="note-body" style="white-space:normal;margin-top:6px;"><?= format_note_html($n['body'] ?? '') ?></div>

            <!-- edit mode -->
            <form class="note-edit" method="post" action="<?= base_url('/notes/update') ?>" style="display:none; margin-top:6px;">
              <?= csrf_field() ?>
              <input type="hidden" name="id" value="<?= $noteId ?>">
              <input type="hidden" name="_return" value="<?= htmlspecialchars($_SERVER['REQUEST_URI'] ?? '/', ENT_QUOTES, 'UTF-8') ?>">
              <label style="display:block;margin-bottom:6px;">
                <textarea name="body" rows="3" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;"><?= htmlspecialchars($n['body'] ?? '', ENT_QUOTES, 'UTF-8') ?></textarea>
              </label>
              <label style="display:flex;gap:8px;align-items:center;margin-bottom:6px;">
                <input type="checkbox" name="is_public" value="1" <?= $isPublic ? 'checked' : '' ?>>
                <span>Public</span>
              </label>
              <div style="display:flex;gap:8px;">
                <button type="submit" style="padding:6px 10px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Save</button>
                <button type="button" class="btn-cancel-edit" style="padding:6px 10px;border:1px solid #ccc;border-radius:8px;background:#fff;cursor:pointer;">Cancel</button>
              </div>
            </form>

            <div style="display:flex;gap:8px;margin-top:8px;">
              <button type="button" class="btn-edit" style="padding:4px 8px;border:1px solid #ddd;border-radius:6px;background:#f9f9fb;cursor:pointer;">Edit</button>

              <form method="post" action="<?= base_url('/notes/delete') ?>"
                    onsubmit="return confirm('Delete this note?');" style="display:inline">
                <?= csrf_field() ?>
                <input type="hidden" name="id" value="<?= $noteId ?>">
                <input type="hidden" name="_return" value="<?= htmlspecialchars($_SERVER['REQUEST_URI'] ?? '/', ENT_QUOTES, 'UTF-8') ?>">
                <button type="submit" style="padding:4px 8px;border:1px solid #cc0000;color:#cc0000;border-radius:6px;background:#fff;cursor:pointer;">Delete</button>
              </form>
            </div>
          </li>
        <?php endforeach; ?>
      </ul>

      <?php if (count($notes) > $PER_PAGE): ?>
        <div style="margin-top:10px;">
          <button id="notes-more" type="button" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;">
            Show more
          </button>
          <button id="notes-less" type="button" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer; display:none;">
            Show less
          </button>
        </div>
      <?php endif; ?>
    <?php endif; ?>
  </div>

  <form method="post" action="<?= base_url('/notes') ?>" style="display:grid;gap:10px;max-width:900px;">
    <?= csrf_field() ?>
    <input type="hidden" name="entity_type" value="<?= htmlspecialchars($entity_type, ENT_QUOTES, 'UTF-8') ?>">
    <input type="hidden" name="entity_id" value="<?= (int)$entity_id ?>">
    <input type="hidden" name="_return" value="<?= htmlspecialchars($_SERVER['REQUEST_URI'] ?? '/', ENT_QUOTES, 'UTF-8') ?>">
    <label>
      <div>Note</div>
      <textarea name="body" rows="3" required
        style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;"></textarea>
    </label>
    <label style="display:flex;gap:8px;align-items:center;">
      <input type="checkbox" name="is_public" value="1">
      <span>Public (can appear on printed documents)</span>
    </label>
    <div>
      <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Add Note</button>
    </div>
  </form>
</section>

<script>
(function(){
  const root = document.getElementById('notes-list');
  if (!root) return;

  // Edit toggles
  root.addEventListener('click', function(e){
    if (e.target && e.target.classList.contains('btn-edit')) {
      const li = e.target.closest('.note-item');
      const view = li.querySelector('.note-body');
      const form = li.querySelector('.note-edit');
      view.style.display = 'none';
      form.style.display = 'block';
    }
    if (e.target && e.target.classList.contains('btn-cancel-edit')) {
      const li = e.target.closest('.note-item');
      const view = li.querySelector('.note-body');
      const form = li.querySelector('.note-edit');
      form.style.display = 'none';
      view.style.display = 'block';
    }
  });

  // Progressive pagination
  const moreBtn = document.getElementById('notes-more');
  const lessBtn = document.getElementById('notes-less');
  if (moreBtn && lessBtn) {
    moreBtn.addEventListener('click', function(){
      root.querySelectorAll('.note-hidden').forEach(el => { el.style.display='block'; });
      moreBtn.style.display = 'none';
      lessBtn.style.display = 'inline-block';
    });
    lessBtn.addEventListener('click', function(){
      const per = <?= (int)$PER_PAGE ?>;
      root.querySelectorAll('.note-item').forEach((el, idx) => {
        el.style.display = (idx < per) ? 'block' : 'none';
      });
      lessBtn.style.display = 'none';
      moreBtn.style.display = 'inline-block';
    });
  }
})();
</script>

----- END FILE: app/views/partials/notes.php -----

----- BEGIN FILE: app/views/payments/create.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2>New Payment</h2>

  <p>Invoice:
    <a href="<?= base_url('/invoices/show?id='.(int)$i['id']) ?>">
      <?= htmlspecialchars($i['inv_no'], ENT_QUOTES, 'UTF-8') ?>
    </a>
    &nbsp;•&nbsp; Customer: <?= htmlspecialchars($i['customer_name'] ?? ('#'.(int)$i['customer_id']), ENT_QUOTES, 'UTF-8') ?>
    &nbsp;•&nbsp; Total: <strong><?= number_format((float)$i['total'], 2) ?></strong>
    &nbsp;•&nbsp; Paid: <strong><?= number_format((float)$i['paid_amount'], 2) ?></strong>
  </p>

  <form method="post" action="<?= base_url('/payments') ?>"
        style="margin-top:10px;display:grid;grid-template-columns: 1fr 1fr 1fr 1fr 1fr; gap:8px; align-items:end; max-width:1000px;">
    <?= csrf_field() ?>
    <input type="hidden" name="invoice_id" value="<?= (int)$i['id'] ?>">
    <input type="hidden" name="_return" value="<?= htmlspecialchars($returnTo, ENT_QUOTES, 'UTF-8') ?>">

    <label>
      <div>Date</div>
      <input type="datetime-local" name="paid_at" value="<?= htmlspecialchars($now, ENT_QUOTES, 'UTF-8') ?>" required
             style="padding:8px;border:1px solid #ddd;border-radius:6px;">
    </label>

    <label>
      <div>Method</div>
      <input type="text" name="method" value="cash" required
             style="padding:8px;border:1px solid #ddd;border-radius:6px;">
    </label>

    <label>
      <div>Reference</div>
      <input type="text" name="reference"
             style="padding:8px;border:1px solid #ddd;border-radius:6px;">
    </label>

    <label>
      <div>Amount</div>
      <input type="number" step="0.01" min="0.01" name="amount" required
             style="padding:8px;border:1px solid #ddd;border-radius:6px;">
    </label>

    <label style="grid-column: 1 / -2;">
      <div>Note</div>
      <input type="text" name="note"
             style="width:100%;padding:8px;border:1px solid #ddd;border-radius:6px;">
    </label>

    <div>
      <button type="submit"
              style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">
        Save Payment
      </button>
    </div>
  </form>

  <p style="margin-top:12px;">
    <a href="<?= base_url('/invoices/show?id='.(int)$i['id']) ?>">Back to Invoice</a>
    · <a href="<?= base_url('/payments') ?>">Payments list</a>
  </p>
</section>

----- END FILE: app/views/payments/create.php -----

----- BEGIN FILE: app/views/payments/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Payments</h2>

  <p><a href="<?= base_url('/invoices') ?>">Back to Invoices</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Invoice</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Customer</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Method</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Ref</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Amount</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($rows as $r): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['paid_at'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <a href="<?= base_url('/invoices/show?id='.(int)$r['invoice_id']) ?>">
              <?= htmlspecialchars($r['inv_no'], ENT_QUOTES, 'UTF-8') ?>
            </a>
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['customer_name'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['method'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['reference'] ?? '', ENT_QUOTES, 'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['amount'], 2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <a href="<?= base_url('/payments/create?invoice_id='.(int)$r['invoice_id'].'&_return='.urlencode('/payments')) ?>">New for this invoice</a>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$rows): ?>
        <tr><td colspan="7" style="padding:12px;">No payments yet.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/payments/index.php -----

----- BEGIN FILE: app/views/products/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2><?= $mode==='create'?'New Product':'Edit Product' ?></h2>

  <form method="post" action="<?= $mode==='create'?base_url('/products'):base_url('/products/update') ?>" style="display:grid;gap:12px;max-width:720px;">
    <?= csrf_field() ?>
    <?php if ($mode==='edit'): ?><input type="hidden" name="id" value="<?= (int)$item['id'] ?>"><?php endif; ?>

    <div style="display:grid;grid-template-columns:1fr 2fr;gap:10px;">
      <label><div>Code</div>
        <input type="text" name="code" required value="<?= htmlspecialchars($item['code'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
      </label>
      <label><div>Name</div>
        <input type="text" name="name" required value="<?= htmlspecialchars($item['name'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
      </label>
    </div>

    <div style="display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;">
      <label><div>Category</div>
        <select name="category_id" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
          <option value="">— none —</option>
          <?php foreach ($categories as $c): ?>
            <option value="<?= (int)$c['id'] ?>" <?php if (!empty($item['category_id']) && (int)$item['category_id']===(int)$c['id']) echo 'selected'; ?>>
              <?= htmlspecialchars($c['name'], ENT_QUOTES, 'UTF-8') ?>
            </option>
          <?php endforeach; ?>
        </select>
      </label>
      <label><div>Make</div>
        <select name="make_id" id="make_id" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
          <option value="">— none —</option>
          <?php foreach ($makes as $mk): ?>
            <option value="<?= (int)$mk['id'] ?>" <?php if (!empty($item['make_id']) && (int)$item['make_id']===(int)$mk['id']) echo 'selected'; ?>>
              <?= htmlspecialchars($mk['name'], ENT_QUOTES, 'UTF-8') ?>
            </option>
          <?php endforeach; ?>
        </select>
      </label>
      <label><div>Model</div>
        <select name="model_id" id="model_id" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
          <option value="">— none —</option>
          <?php foreach ($models as $md): ?>
            <option data-make="<?= (int)$md['make_id'] ?>" value="<?= (int)$md['id'] ?>" <?php if (!empty($item['model_id']) && (int)$item['model_id']===(int)$md['id']) echo 'selected'; ?>>
              <?= htmlspecialchars($md['name'], ENT_QUOTES, 'UTF-8') ?>
            </option>
          <?php endforeach; ?>
        </select>
      </label>
    </div>

    <div style="display:grid;grid-template-columns:1fr 1fr;gap:10px;">
      <label><div>Cost</div>
        <input type="number" step="0.01" name="cost" value="<?= htmlspecialchars((string)($item['cost'] ?? '0'), ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
      </label>
      <label><div>Price</div>
        <input type="number" step="0.01" name="price" value="<?= htmlspecialchars((string)($item['price'] ?? '0'), ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
      </label>
    </div>

    <div style="display:flex;gap:10px;">
      <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;"><?= $mode==='create'?'Create':'Save Changes' ?></button>
      <a href="<?= base_url('/products') ?>" style="align-self:center;">Cancel</a>
    </div>
  </form>
<?php if ($mode === 'edit'): ?>
  <?php
    $entity_type = 'product';
    $entity_id   = (int)$item['id'];
    $notes       = $notes ?? [];
    include __DIR__ . '/../partials/notes.php';
  ?>
<?php endif; ?>
  <script>
    // client-side filter: show only models that belong to selected make
    (function(){
      const makeSel=document.getElementById('make_id');
      const modelSel=document.getElementById('model_id');
      const allOpts=[...modelSel.querySelectorAll('option[data-make]')];
      function apply(){
        const mk=makeSel.value;
        allOpts.forEach(o=>{
          o.hidden = (mk && o.dataset.make !== mk);
          if (o.hidden && o.selected) { modelSel.value = ''; }
        });
      }
      makeSel.addEventListener('change', apply);
      apply();
    })();
  </script>
</section>

----- END FILE: app/views/products/form.php -----

----- BEGIN FILE: app/views/products/index.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>Products</h2>

  <?php if ($m = flash_get('success')): ?>
    <div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>
  <?php if ($m = flash_get('error')): ?>
    <div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>

  <form method="get" action="<?= base_url('/products') ?>" style="display:flex;flex-wrap:wrap;gap:8px;margin-bottom:10px;">
    <input type="text" name="q" placeholder="Search name or code" value="<?= htmlspecialchars((string)$q, ENT_QUOTES, 'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:8px;">
    <select name="category_id" style="padding:8px;border:1px solid #ddd;border-radius:8px;">
      <option value="">All categories</option>
      <?php foreach ($categories as $c): ?>
        <option value="<?= (int)$c['id'] ?>" <?php if ((int)$category_id === (int)$c['id']) echo 'selected'; ?>>
          <?= htmlspecialchars($c['name'], ENT_QUOTES, 'UTF-8') ?>
        </option>
      <?php endforeach; ?>
    </select>
    <select name="make_id" style="padding:8px;border:1px solid #ddd;border-radius:8px;">
      <option value="">All makes</option>
      <?php foreach ($makes as $mk): ?>
        <option value="<?= (int)$mk['id'] ?>" <?php if ((int)$make_id === (int)$mk['id']) echo 'selected'; ?>>
          <?= htmlspecialchars($mk['name'], ENT_QUOTES, 'UTF-8') ?>
        </option>
      <?php endforeach; ?>
    </select>
    <select name="model_id" style="padding:8px;border:1px solid #ddd;border-radius:8px;">
      <option value="">All models</option>
      <?php foreach ($models as $md): ?>
        <option value="<?= (int)$md['id'] ?>" <?php if ((int)$model_id === (int)$md['id']) echo 'selected'; ?>>
          <?= htmlspecialchars($md['name'], ENT_QUOTES, 'UTF-8') ?>
        </option>
      <?php endforeach; ?>
    </select>
    <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;">Filter</button>
    <a href="<?= base_url('/products/create') ?>" style="align-self:center;margin-left:auto;">+ New Product</a>
  </form>

  <table style="width:100%;border-collapse:collapse;">
    <thead>
      <tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Code</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Name</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Category</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Make / Model</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Cost</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Price</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Avail / Resv</th>
        <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($items as $p): $avail = (int)$p['on_hand'] - (int)$p['reserved']; ?>
        <tr>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($p['code'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($p['name'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($p['category_name'] ?? '', ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars(trim(($p['make_name'] ?? '').' / '.($p['model_name'] ?? ''), ' /'), ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;"><?= number_format((float)$p['cost'],2) ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;"><?= number_format((float)$p['price'],2) ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;"><?= (int)$avail ?> / <?= (int)$p['reserved'] ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;white-space:nowrap;">
            <a href="<?= base_url('/products/stock?id='.(int)$p['id']) ?>">Stock</a> &nbsp;|&nbsp;
            <a href="<?= base_url('/products/edit?id='.(int)$p['id']) ?>">Edit</a> &nbsp;|&nbsp;
            <form method="post" action="<?= base_url('/products/delete') ?>" style="display:inline" onsubmit="return confirm('Delete this product?');">
              <?= csrf_field() ?>
              <input type="hidden" name="id" value="<?= (int)$p['id'] ?>">
              <button type="submit" style="background:none;border:none;color:#c00;cursor:pointer;">Delete</button>
            </form>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="8" style="padding:12px;">No products yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/products/index.php -----

----- BEGIN FILE: app/views/products/stock.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>Stock: <?= htmlspecialchars($item['code'].' — '.$item['name'], ENT_QUOTES, 'UTF-8') ?></h2>

  <?php if ($m = flash_get('success')): ?>
    <div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>
  <?php if ($m = flash_get('error')): ?>
    <div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>

  <form method="post" action="<?= base_url('/products/stock') ?>" style="display:block;">
    <?= csrf_field() ?>
    <input type="hidden" name="id" value="<?= (int)$item['id'] ?>">

    <table style="width:100%;border-collapse:collapse;">
      <thead>
        <tr>
          <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
          <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty on hand</th>
          <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty reserved</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($rows as $r): ?>
          <tr>
            <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($r['name'], ENT_QUOTES, 'UTF-8') ?></td>
            <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;">
              <input type="number" min="0" name="qty_on[<?= (int)$r['id'] ?>]" value="<?= (int)$r['qty_on_hand'] ?>" style="width:120px;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
            </td>
            <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;">
              <input type="number" min="0" name="qty_res[<?= (int)$r['id'] ?>]" value="<?= (int)$r['qty_reserved'] ?>" style="width:120px;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
            </td>
          </tr>
        <?php endforeach; ?>
        <?php if (!$rows): ?>
          <tr><td colspan="3" style="padding:12px;">No warehouses defined yet. <a href="<?= base_url('/warehouses') ?>">Create a warehouse</a>.</td></tr>
        <?php endif; ?>
      </tbody>
    </table>

    <div style="margin-top:12px;display:flex;gap:10px;">
      <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;">Save Stock</button>
      <a href="<?= base_url('/products') ?>" style="align-self:center;">Back to Products</a>
    </div>
  </form>
</section>

----- END FILE: app/views/products/stock.php -----

----- BEGIN FILE: app/views/purchaseinvoices/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Purchase Invoices</h2>
  <p><a href="<?= base_url('/purchaseorders') ?>">Back to Purchase Orders</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">PI #</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Supplier</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">PO #</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Total</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $pi): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($pi['pi_no'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($pi['supplier_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($pi['po_no'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$pi['total'],2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <a href="<?= base_url('/purchaseinvoices/show?id='.(int)$pi['id']) ?>">View</a>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="5" style="padding:12px;">No purchase invoices yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/purchaseinvoices/index.php -----

----- BEGIN FILE: app/views/purchaseinvoices/print.php -----
<?php
use function App\Core\base_url;
use function App\Core\format_note_html;
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Purchase Invoice <?= htmlspecialchars($pi['pi_no'], ENT_QUOTES, 'UTF-8') ?></title>
  <style>
    body{font-family:Arial, sans-serif; margin:24px;}
    h1{margin:0 0 8px 0;}
    .muted{color:#666;}
    table{width:100%;border-collapse:collapse;margin-top:12px;}
    th,td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
    td.r, th.r {text-align:right;}
    .toolbar{margin-bottom:12px; padding:10px; border:1px solid #eee; border-radius:8px;}
    @media print{ .no-print{ display:none !important; } .toolbar{ display:none !important; } }
    @page { size: A4; margin: 16mm; }
  </style>
</head>
<body>
  <div class="toolbar no-print">
    <form method="get" action="<?= base_url('/purchaseinvoices/print') ?>" style="display:flex;gap:12px;align-items:center;">
      <input type="hidden" name="id" value="<?= (int)$pi['id'] ?>">
      <label style="display:flex;gap:6px;align-items:center;">
        <input type="checkbox" name="include_notes" value="1" <?= $include_notes ? 'checked' : '' ?>> Include public notes
      </label>
      <button type="submit" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;">Apply</button>
      <button type="button" onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Print</button>
      <a class="no-print" href="<?= base_url('/purchaseinvoices/show?id='.(int)$pi['id']) ?>" style="margin-left:auto;">Back</a>
    </form>
  </div>

  <div style="margin-bottom:10px;">
    <img src="<?= base_url('/img/logo.png') ?>" alt="Logo" style="height:48px;vertical-align:middle;">
  </div>

  <header>
    <h1>Purchase Invoice <?= htmlspecialchars($pi['pi_no'], ENT_QUOTES, 'UTF-8') ?></h1>
    <div class="muted">Supplier: <?= htmlspecialchars($pi['supplier_name'], ENT_QUOTES, 'UTF-8') ?>
      • PO: <?= htmlspecialchars($pi['po_no'], ENT_QUOTES, 'UTF-8') ?></div>
  </header>

  <table>
    <thead>
      <tr>
        <th>Product</th>
        <th>Warehouse</th>
        <th class="r">Qty (ordered)</th>
        <th class="r">Price</th>
        <th class="r">Line Total</th>
      </tr>
    </thead>
    <tbody>
    <?php foreach ($items as $it): ?>
      <tr>
        <td><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td><?= htmlspecialchars($it['warehouse_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td class="r"><?= (int)$it['qty'] ?></td>
        <td class="r"><?= number_format((float)$it['price'],2) ?></td>
        <td class="r"><?= number_format((float)$it['line_total'],2) ?></td>
      </tr>
    <?php endforeach; ?>
    </tbody>
  </table>

  <p class="r" style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$pi['subtotal'],2) ?>
    &nbsp;|&nbsp; Tax (<?= number_format((float)$pi['tax_rate'],2) ?>%): <?= number_format((float)$pi['tax_amount'],2) ?>
    &nbsp;|&nbsp; <strong>Total: <?= number_format((float)$pi['total'],2) ?></strong>
  </p>

  <?php if (!empty($public_notes) && $include_notes): ?>
    <section style="margin-top:16px;">
      <h3>Public Notes</h3>
      <ul style="list-style:none;padding:0;display:grid;gap:8px;">
        <?php foreach ($public_notes as $n): ?>
          <li style="border:1px solid #eee;border-radius:8px;padding:10px;">
            <div style="font-size:12px;color:#666;"><?= htmlspecialchars($n['created_by'] ?? 'system', ENT_QUOTES, 'UTF-8') ?> · <?= htmlspecialchars($n['created_at'] ?? '', ENT_QUOTES, 'UTF-8') ?></div>
            <div style="margin-top:6px;"><?= format_note_html($n['body'] ?? '') ?></div>
          </li>
        <?php endforeach; ?>
      </ul>
    </section>
  <?php endif; ?>
</body>
</html>

----- END FILE: app/views/purchaseinvoices/print.php -----

----- BEGIN FILE: app/views/purchaseinvoices/view.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\format_note_html;

/**
 * Expected vars:
 * - $pi (invoice head with supplier_name, po_no, totals, paid_amount, status)
 * - $items (ordered items for the PO/PI, each has product_id, warehouse_id, qty, price, product_code, product_name, warehouse_name)
 * - $received (map "product_id:warehouse_id" => total received)      // already present
 * - $receipts (list of receipt rows for history)                     // already present
 * - $payments (supplier payments/AP)
 * - $credits_total (float, total of purchase returns for this PI)    // NEW (pass from controller; defaults to 0 below)
 * - $ret_map (map "product_id:warehouse_id" => total returned)       // NEW (pass from controller; defaults to [])
 * - $pr_returns (list of purchase return rows for history)           // NEW (pass from controller; optional)
 */
$credits_total = isset($credits_total) ? (float)$credits_total : 0.0;
$ret_map       = $ret_map ?? [];
$pr_returns    = $pr_returns ?? [];
$ap_balance    = max(0.0, (float)$pi['total'] - (float)$pi['paid_amount'] - $credits_total);
?>
<section>
  <h2>Purchase Invoice <?= htmlspecialchars($pi['pi_no'],ENT_QUOTES,'UTF-8') ?></h2>
  <div>Supplier: <strong><?= htmlspecialchars($pi['supplier_name'],ENT_QUOTES,'UTF-8') ?></strong></div>
  <div>PO: <a href="<?= base_url('/purchaseorders/show?id='.(int)$pi['purchase_order_id']) ?>"><?= htmlspecialchars($pi['po_no'],ENT_QUOTES,'UTF-8') ?></a></div>
  <div>Status: <strong><?= htmlspecialchars($pi['status'] ?? 'unpaid',ENT_QUOTES,'UTF-8') ?></strong></div>

  <div>
    Total: <strong><?= number_format((float)$pi['total'],2) ?></strong>
    &nbsp;| Paid: <strong><?= number_format((float)$pi['paid_amount'],2) ?></strong>
    &nbsp;| <span title="Total of debit notes (returns) applied to this PI">Credits:</span> <strong><?= number_format($credits_total,2) ?></strong>
    &nbsp;| Balance: <strong><?= number_format($ap_balance,2) ?></strong>
  </div>

  <p style="margin-top:6px;">
    <a href="<?= base_url('/purchaseinvoices/print?id='.(int)$pi['id']) ?>">Print</a> ·
    <a href="<?= base_url('/receipts/print?invoice_id='.(int)$pi['id']) ?>">Print GRN</a> ·
    <a href="<?= base_url('/purchaseinvoices') ?>">Back</a>
  </p>

  <hr style="margin:12px 0;">

  <!-- ========== Supplier Payments (AP) ========== -->
  <h3>Supplier Payments (AP)</h3>
  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Method</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Ref</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Amount</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach (($payments ?? []) as $p): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($p['paid_at'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($p['method'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($p['reference'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$p['amount'],2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <?php if (($pi['status'] ?? 'unpaid') !== 'paid'): ?>
              <form method="post" action="<?= base_url('/supplierpayments/delete') ?>" onsubmit="return confirm('Delete supplier payment?')">
                <?= csrf_field() ?>
                <input type="hidden" name="id" value="<?= (int)$p['id'] ?>">
                <input type="hidden" name="invoice_id" value="<?= (int)$pi['id'] ?>">
                <input type="hidden" name="_return" value="/purchaseinvoices/show?id=<?= (int)$pi['id'] ?>">
                <button type="submit" style="border:1px solid #cc0000;color:#cc0000;background:#fff;border-radius:6px;padding:4px 8px;">Delete</button>
              </form>
            <?php endif; ?>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (empty($payments)): ?>
        <tr><td colspan="5" style="padding:8px;">No supplier payments yet.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>

  <?php if (($pi['status'] ?? 'unpaid') !== 'paid'): ?>
    <form method="post" action="<?= base_url('/supplierpayments') ?>" style="margin-top:10px;display:grid;grid-template-columns: 1fr 1fr 1fr 1fr 1fr; gap:8px; align-items:end;">
      <?= csrf_field() ?>
      <input type="hidden" name="invoice_id" value="<?= (int)$pi['id'] ?>">
      <input type="hidden" name="_return" value="/purchaseinvoices/show?id=<?= (int)$pi['id'] ?>">
      <label><div>Date</div><input type="datetime-local" name="paid_at" required style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
      <label><div>Method</div><input type="text" name="method" value="bank" required style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
      <label><div>Reference</div><input type="text" name="reference" style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
      <label><div>Amount</div><input type="number" step="0.01" min="0.01" name="amount" required style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
      <div><button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Add Payment</button></div>
    </form>
  <?php else: ?>
    <p style="margin-top:10px;color:#555;">Invoice is fully paid; supplier payments are locked.</p>
  <?php endif; ?>

  <hr style="margin:16px 0;">

  <!-- ========== Items & Receiving (existing) ========== -->
  <h3>Items & Receiving</h3>
  <form id="receive-form" method="post" action="<?= base_url('/receipts') ?>">
    <?= csrf_field() ?>
    <input type="hidden" name="invoice_id" value="<?= (int)$pi['id'] ?>">
    <table style="width:100%;border-collapse:collapse;">
      <thead><tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Ordered</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Received</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Remaining</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Receive now</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Price</th>
      </tr></thead>
      <tbody>
        <?php
          $hasRemaining = false;
          foreach ($items as $it):
            $key = $it['product_id'].':'.$it['warehouse_id'];
            $rec = (int)($received[$key] ?? 0);
            $ord = (int)$it['qty'];
            $rem = max(0, $ord - $rec);
            $hasRemaining = $hasRemaining || ($rem > 0);
        ?>
          <tr>
            <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'],ENT_QUOTES,'UTF-8') ?></td>
            <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['warehouse_name'],ENT_QUOTES,'UTF-8') ?></td>
            <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$ord ?></td>
            <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$rec ?></td>
            <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><span class="remaining"><?= (int)$rem ?></span></td>
            <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
              <?php if ($rem > 0): ?>
                <input class="rec-qty" type="number" name="rec_qty[]" min="0" max="<?= (int)$rem ?>" step="1" value="0"
                       style="width:90px;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
              <?php else: ?>
                <span class="muted">—</span>
              <?php endif; ?>
              <input type="hidden" name="rec_product_id[]" value="<?= (int)$it['product_id'] ?>">
              <input type="hidden" name="rec_warehouse_id[]" value="<?= (int)$it['warehouse_id'] ?>">
            </td>
            <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
              <input type="number" name="rec_price[]" step="0.01" min="0" value="<?= number_format((float)$it['price'],2,'.','') ?>"
                     style="width:110px;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
            </td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>

    <div style="margin-top:10px; display:flex; gap:8px;">
      <button id="btn-fill-remaining" type="button"
              style="padding:8px 12px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;" <?= $hasRemaining ? '' : 'disabled' ?>>
        Receive all remaining
      </button>
      <button type="submit"
              style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;" <?= $hasRemaining ? '' : 'disabled' ?>>
        Post Receipt
      </button>
    </div>
  </form>

  <!-- ========== Purchase Returns / Debit Note (NEW) ========== -->
  <hr style="margin:16px 0;">
  <h3>Debit Note (Return to Supplier)</h3>
  <form id="return-form" method="post" action="<?= base_url('/purchasereturns') ?>">
    <?= csrf_field() ?>
    <input type="hidden" name="invoice_id" value="<?= (int)$pi['id'] ?>">

    <table style="width:100%;border-collapse:collapse;">
      <thead><tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Received</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Returned</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Remaining</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Return now</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Price</th>
      </tr></thead>
      <tbody>
        <?php
          $hasReturn = false;
          foreach ($items as $it):
            $key  = $it['product_id'].':'.$it['warehouse_id'];
            $rec  = (int)($received[$key] ?? 0);          // what we actually received
            $prev = (int)($ret_map[$key] ?? 0);           // what we already returned
            $remR = max(0, $rec - $prev);                 // remaining eligible for return
            $hasReturn = $hasReturn || ($remR > 0);
        ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['warehouse_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$rec ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$prev ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><span class="ret-remaining"><?= (int)$remR ?></span></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
            <?php if ($remR > 0): ?>
              <input class="return-qty" type="number" name="ret_qty[]" min="0" max="<?= (int)$remR ?>" step="1" value="0"
                     style="width:90px;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
            <?php else: ?>
              <span class="muted">—</span>
            <?php endif; ?>
            <input type="hidden" name="ret_product_id[]" value="<?= (int)$it['product_id'] ?>">
            <input type="hidden" name="ret_warehouse_id[]" value="<?= (int)$it['warehouse_id'] ?>">
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
            <input type="number" name="ret_price[]" step="0.01" min="0" value="<?= number_format((float)$it['price'],2,'.','') ?>"
                   style="width:110px;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
          </td>
        </tr>
        <?php endforeach; ?>
      </tbody>
    </table>

    <div style="margin-top:10px; display:flex; gap:8px;">
      <button id="btn-fill-return" type="button"
              style="padding:8px 12px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;" <?= $hasReturn ? '' : 'disabled' ?>>
        Return all remaining
      </button>
      <button type="submit"
              style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;" <?= $hasReturn ? '' : 'disabled' ?>>
        Create Debit Note
      </button>
    </div>
  </form>

  <!-- ========== Returns History (Debit Notes) ========== -->
  <h3 style="margin-top:18px;">Returns History</h3>
  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">PR #</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Product</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Qty</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Price</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($pr_returns as $r): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['pr_no'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars(($r['product_code'] ?? '').' — '.($r['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)($r['qty'] ?? 0) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)($r['price'] ?? 0),2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <a href="<?= base_url('/purchasereturns/print?id='.(int)($r['purchase_return_id'] ?? 0)) ?>" target="_blank">Print</a>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$pr_returns): ?>
        <tr><td colspan="7" style="padding:12px;">No returns yet.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>

  <!-- ========== Totals & Notes ========== -->
  <p style="text-align:right;margin-top:10px;">
    Subtotal: <?= number_format((float)$pi['subtotal'],2) ?>
    &nbsp;| Tax (<?= number_format((float)$pi['tax_rate'],2) ?>%): <?= number_format((float)$pi['tax_amount'],2) ?>
    &nbsp;| <strong>Total: <?= number_format((float)$pi['total'],2) ?></strong>
  </p>

  <?php
    // Notes (purchase_invoice)
    $entity_type = 'purchase_invoice';
    $entity_id   = (int)$pi['id'];
    $notes       = $notes ?? [];
    include __DIR__ . '/../partials/notes.php';
  ?>
</section>

<script>
(function(){
  // Fill receiving
  const btnRecv = document.getElementById('btn-fill-remaining');
  if (btnRecv) {
    btnRecv.addEventListener('click', function(){
      document.querySelectorAll('table .remaining').forEach(function(span){
        const rem = parseInt(span.textContent || '0', 10) || 0;
        const row = span.closest('tr');
        const input = row ? row.querySelector('.rec-qty') : null;
        if (input && rem > 0) { input.value = rem; }
      });
    });
  }
  // Fill returns
  const btnRet = document.getElementById('btn-fill-return');
  if (btnRet) {
    btnRet.addEventListener('click', function(){
      document.querySelectorAll('table .ret-remaining').forEach(function(span){
        const rem = parseInt(span.textContent || '0', 10) || 0;
        const row = span.closest('tr');
        const input = row ? row.querySelector('.return-qty') : null;
        if (input && rem > 0) { input.value = rem; }
      });
    });
  }
})();
</script>

----- END FILE: app/views/purchaseinvoices/view.php -----

----- BEGIN FILE: app/views/purchaseorders/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
/** @var string $mode */
/** @var array $po, $items, $suppliers, $products, $warehouses */
?>
<section>
  <h2><?= $mode==='create' ? 'New Purchase Order' : 'Edit Purchase Order' ?></h2>

  <form method="post" action="<?= base_url($mode==='create' ? '/purchaseorders' : '/purchaseorders/update') ?>">
    <?= csrf_field() ?>
    <?php if ($mode==='edit'): ?><input type="hidden" name="id" value="<?= (int)$po['id'] ?>"><?php endif; ?>

    <div style="display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;max-width:1100px;">
      <label><div>PO #</div>
        <input type="text" value="<?= htmlspecialchars($po['po_no'],ENT_QUOTES,'UTF-8') ?>" disabled
               style="padding:8px;border:1px solid #ddd;border-radius:6px;width:100%;background:#f7f7f9;">
      </label>

      <label><div>Supplier</div>
        <select name="supplier_id" required style="padding:8px;border:1px solid #ddd;border-radius:6px;width:100%;">
          <option value="">-- Select supplier --</option>
          <?php foreach ($suppliers as $s): ?>
            <option value="<?= (int)$s['id'] ?>" <?= ((int)($po['supplier_id'] ?? 0) === (int)$s['id']) ? 'selected':'' ?>>
              <?= htmlspecialchars($s['name'],ENT_QUOTES,'UTF-8') ?>
            </option>
          <?php endforeach; ?>
        </select>
      </label>

      <label><div>Tax Rate (%)</div>
        <input id="tax_rate" type="number" step="0.01" min="0" name="tax_rate" value="<?= (float)($po['tax_rate'] ?? 0) ?>"
               style="padding:8px;border:1px solid #ddd;border-radius:6px;width:100%;">
      </label>
    </div>

    <h3 style="margin-top:14px;">Items</h3>
    <table id="po-items" style="width:100%;border-collapse:collapse;">
      <thead><tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Price</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Line Total</th>
        <th style="border-bottom:1px solid #eee;padding:8px;">#</th>
      </tr></thead>
      <tbody>
        <?php
          $rows = $items ?: [['product_id'=>'','warehouse_id'=>'','qty'=>1,'price'=>0,'line_total'=>0]];
          foreach ($rows as $r):
        ?>
          <tr>
            <td style="padding:6px;border-bottom:1px solid #f2f2f4;">
              <select name="item_product_id[]" required style="width:100%;padding:6px;border:1px solid #ddd;border-radius:6px;">
                <option value="">-- Product --</option>
                <?php foreach ($products as $p): ?>
                  <option value="<?= (int)$p['id'] ?>" data-price="<?= (float)$p['price'] ?>"
                    <?= ((int)($r['product_id'] ?? 0) === (int)$p['id']) ? 'selected':'' ?>>
                    <?= htmlspecialchars($p['code'].' — '.$p['name'],ENT_QUOTES,'UTF-8') ?>
                  </option>
                <?php endforeach; ?>
              </select>
            </td>
            <td style="padding:6px;border-bottom:1px solid #f2f2f4;">
              <select name="item_warehouse_id[]" required style="width:100%;padding:6px;border:1px solid #ddd;border-radius:6px;">
                <option value="">-- Warehouse --</option>
                <?php foreach ($warehouses as $w): ?>
                  <option value="<?= (int)$w['id'] ?>" <?= ((int)($r['warehouse_id'] ?? 0) === (int)$w['id']) ? 'selected':'' ?>>
                    <?= htmlspecialchars($w['name'],ENT_QUOTES,'UTF-8') ?>
                  </option>
                <?php endforeach; ?>
              </select>
            </td>
            <td style="padding:6px;border-bottom:1px solid #f2f2f4;text-align:right;">
              <input class="qty" name="item_qty[]" type="number" min="1" step="1" value="<?= (int)($r['qty'] ?? 1) ?>"
                     style="width:100%;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
            </td>
            <td style="padding:6px;border-bottom:1px solid #f2f2f4;text-align:right;">
              <input class="price" name="item_price[]" type="number" step="0.01" min="0" value="<?= number_format((float)($r['price'] ?? 0),2,'.','') ?>"
                     style="width:100%;padding:6px;border:1px solid #ddd;border-radius:6px;text-align:right;">
            </td>
            <td style="padding:6px;border-bottom:1px solid #f2f2f4;text-align:right;">
              <span class="line_total"><?= number_format((float)($r['line_total'] ?? 0),2) ?></span>
            </td>
            <td style="padding:6px;border-bottom:1px solid #f2f2f4;text-align:center;">
              <button type="button" class="btn-remove" style="padding:4px 8px;border:1px solid #cc0000;color:#cc0000;border-radius:6px;background:#fff;cursor:pointer;">Remove</button>
            </td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>

    <div style="margin-top:8px;">
      <button id="btn-add-row" type="button" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;">Add Row</button>
    </div>

    <p style="text-align:right;margin-top:8px;">
      Subtotal: <span id="subtotal">0.00</span>
      &nbsp;| Tax (<span id="tax_rate_view"><?= number_format((float)($po['tax_rate'] ?? 0),2) ?></span>%): <span id="tax_amount">0.00</span>
      &nbsp;| <strong>Total: <span id="grand_total">0.00</span></strong>
    </p>

    <div style="margin-top:10px;">
      <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;"><?= $mode==='create' ? 'Create PO' : 'Save PO' ?></button>
      <a href="<?= base_url('/purchaseorders') ?>" style="margin-left:8px;">Back</a>
    </div>
  </form>
</section>

<script>
(function(){
  const table = document.getElementById('po-items');
  const taxRateInput = document.getElementById('tax_rate');
  const taxRateView = document.getElementById('tax_rate_view');
  function recalc(){
    let subtotal = 0;
    table.querySelectorAll('tbody tr').forEach(row=>{
      const qtyEl = row.querySelector('.qty');
      const priceEl = row.querySelector('.price');
      const qty = parseFloat(qtyEl.value || '0');
      const price = parseFloat(priceEl.value || '0');
      const lt = (qty>0 && price>=0)? (qty*price) : 0;
      row.querySelector('.line_total').textContent = lt.toFixed(2);
      subtotal += lt;
    });
    const tr = parseFloat(taxRateInput.value || '0');
    taxRateView.textContent = (isNaN(tr)?0:tr).toFixed(2);
    const taxAmount = subtotal * (tr/100);
    document.getElementById('subtotal').textContent = subtotal.toFixed(2);
    document.getElementById('tax_amount').textContent = taxAmount.toFixed(2);
    document.getElementById('grand_total').textContent = (subtotal+taxAmount).toFixed(2);
  }
  table.addEventListener('input', recalc);
  if (taxRateInput) taxRateInput.addEventListener('input', recalc);

  // Default price from selected product
  table.addEventListener('change', function(e){
    if (e.target && e.target.tagName === 'SELECT' && e.target.name === 'item_product_id[]') {
      const opt = e.target.selectedOptions[0];
      if (!opt) return;
      const price = parseFloat(opt.getAttribute('data-price') || '0');
      const row = e.target.closest('tr');
      const priceEl = row.querySelector('.price');
      if (priceEl && !priceEl.value) { priceEl.value = price.toFixed(2); }
      recalc();
    }
  });

  // Remove row
  table.addEventListener('click', function(e){
    if (e.target && e.target.classList.contains('btn-remove')) {
      const row = e.target.closest('tr');
      row.parentNode.removeChild(row);
      recalc();
    }
  });

  // Add row
  document.getElementById('btn-add-row').addEventListener('click', function(){
    const tbody = table.querySelector('tbody');
    const tpl = tbody.querySelector('tr');
    const clone = tpl.cloneNode(true);
    // reset fields
    clone.querySelectorAll('select').forEach(s=>{ s.value=''; });
    clone.querySelector('.qty').value = '1';
    clone.querySelector('.price').value = '';
    clone.querySelector('.line_total').textContent = '0.00';
    tbody.appendChild(clone);
    recalc();
  });

  recalc();
})();
</script>

----- END FILE: app/views/purchaseorders/form.php -----

----- BEGIN FILE: app/views/purchaseorders/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Purchase Orders</h2>
  <p><a href="<?= base_url('/purchaseorders/create') ?>">New PO</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">PO #</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Supplier</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Status</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Total</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $po): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($po['po_no'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($po['supplier_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($po['status'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$po['total'],2) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <a href="<?= base_url('/purchaseorders/show?id='.(int)$po['id']) ?>">View</a>
            <?php if (($po['status'] ?? '') === 'draft'): ?>
              · <a href="<?= base_url('/purchaseorders/edit?id='.(int)$po['id']) ?>">Edit</a>
            <?php endif; ?>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="5" style="padding:12px;">No purchase orders yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/purchaseorders/index.php -----

----- BEGIN FILE: app/views/purchaseorders/print.php -----
<?php
use function App\Core\base_url;
use function App\Core\format_note_html;
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>PO <?= htmlspecialchars($po['po_no'],ENT_QUOTES,'UTF-8') ?></title>
  <style>
    body{font-family:Arial, sans-serif; margin:24px;}
    h1{margin:0 0 8px 0;}
    .muted{color:#666;}
    table{width:100%;border-collapse:collapse;margin-top:12px;}
    th,td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
    td.r, th.r {text-align:right;}
    .toolbar{margin-bottom:12px; padding:10px; border:1px solid #eee; border-radius:8px;}
    @media print{ .no-print{ display:none !important; } .toolbar{ display:none !important; } }
    @page { size: A4; margin: 16mm; }
  </style>
</head>
<body>
  <div class="toolbar no-print">
    <form method="get" action="<?= base_url('/purchaseorders/print') ?>" style="display:flex;gap:12px;align-items:center;">
      <input type="hidden" name="id" value="<?= (int)$po['id'] ?>">
      <label style="display:flex;gap:6px;align-items:center;">
        <input type="checkbox" name="include_notes" value="1" <?= $include_notes ? 'checked' : '' ?>> Include public notes
      </label>
      <button type="submit" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;">Apply</button>
      <button type="button" onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Print</button>
      <a class="no-print" href="<?= base_url('/purchaseorders/show?id='.(int)$po['id']) ?>" style="margin-left:auto;">Back</a>
    </form>
  </div>

  <div style="margin-bottom:10px;">
    <img src="<?= base_url('/img/logo.png') ?>" alt="Logo" style="height:48px;vertical-align:middle;">
  </div>

  <header>
    <h1>Purchase Order <?= htmlspecialchars($po['po_no'],ENT_QUOTES,'UTF-8') ?></h1>
    <div class="muted">Supplier: <?= htmlspecialchars($po['supplier_name'],ENT_QUOTES,'UTF-8') ?>
      • Status: <?= htmlspecialchars($po['status'],ENT_QUOTES,'UTF-8') ?></div>
  </header>

  <table>
    <thead>
      <tr>
        <th>Product</th>
        <th>Warehouse</th>
        <th class="r">Qty</th>
        <th class="r">Price</th>
        <th class="r">Line Total</th>
      </tr>
    </thead>
    <tbody>
    <?php foreach ($items as $it): ?>
      <tr>
        <td><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td><?= htmlspecialchars($it['warehouse_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td class="r"><?= (int)$it['qty'] ?></td>
        <td class="r"><?= number_format((float)$it['price'],2) ?></td>
        <td class="r"><?= number_format((float)$it['line_total'],2) ?></td>
      </tr>
    <?php endforeach; ?>
    </tbody>
  </table>

  <p class="r" style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$po['subtotal'],2) ?>
    &nbsp;|&nbsp; Tax (<?= number_format((float)$po['tax_rate'],2) ?>%): <?= number_format((float)$po['tax_amount'],2) ?>
    &nbsp;|&nbsp; <strong>Total: <?= number_format((float)$po['total'],2) ?></strong>
  </p>

  <?php if (!empty($public_notes) && $include_notes): ?>
    <section style="margin-top:16px;">
      <h3>Public Notes</h3>
      <ul style="list-style:none;padding:0;display:grid;gap:8px;">
        <?php foreach ($public_notes as $n): ?>
          <li style="border:1px solid #eee;border-radius:8px;padding:10px;">
            <div style="font-size:12px;color:#666;"><?= htmlspecialchars($n['created_by'] ?? 'system', ENT_QUOTES, 'UTF-8') ?> · <?= htmlspecialchars($n['created_at'] ?? '', ENT_QUOTES, 'UTF-8') ?></div>
            <div style="margin-top:6px;"><?= format_note_html($n['body'] ?? '') ?></div>
          </li>
        <?php endforeach; ?>
      </ul>
    </section>
  <?php endif; ?>
</body>
</html>

----- END FILE: app/views/purchaseorders/print.php -----

----- BEGIN FILE: app/views/purchaseorders/view.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
/** @var array $po, $items */
?>
<section>
  <h2>PO <?= htmlspecialchars($po['po_no'],ENT_QUOTES,'UTF-8') ?></h2>
  <div>Supplier: <strong><?= htmlspecialchars($po['supplier_name'],ENT_QUOTES,'UTF-8') ?></strong></div>
  <div>Status: <strong><?= htmlspecialchars($po['status'],ENT_QUOTES,'UTF-8') ?></strong></div>
  <p>
    <a href="<?= base_url('/purchaseorders/print?id='.(int)$po['id']) ?>">Print</a>
    <?php if (($po['status'] ?? '')==='draft'): ?>
      · <a href="<?= base_url('/purchaseorders/edit?id='.(int)$po['id']) ?>">Edit</a>
    <?php endif; ?>
    · <a href="<?= base_url('/purchaseorders') ?>">Back</a>
  </p>

  <?php if (($po['status'] ?? '')==='draft'): ?>
    <form method="post" action="<?= base_url('/purchaseorders/mark-ordered') ?>" style="margin:8px 0;">
      <?= csrf_field() ?>
      <input type="hidden" name="id" value="<?= (int)$po['id'] ?>">
      <button type="submit" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Mark as Ordered</button>
    </form>
  <?php endif; ?>

  <?php if (($po['status'] ?? '')==='received'): ?>
    <form method="post" action="<?= base_url('/purchaseorders/close') ?>" style="margin:8px 0;">
      <?= csrf_field() ?>
      <input type="hidden" name="id" value="<?= (int)$po['id'] ?>">
      <button type="submit" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">
        Close PO
      </button>
    </form>
  <?php endif; ?>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Price</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Line Total</th>
    </tr></thead>
    <tbody>
    <?php foreach ($items as $it): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'],ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['warehouse_name'],ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$it['qty'] ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$it['price'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$it['line_total'],2) ?></td>
      </tr>
    <?php endforeach; ?>
    </tbody>
  </table>

  <p style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$po['subtotal'],2) ?>
    &nbsp;| Tax (<?= number_format((float)$po['tax_rate'],2) ?>%): <?= number_format((float)$po['tax_amount'],2) ?>
    &nbsp;| <strong>Total: <?= number_format((float)$po['total'],2) ?></strong>
  </p>

<?php if (($po['status'] ?? '') !== 'closed'): ?>
<form method="post" action="<?= base_url('/purchaseinvoices/create-from-po') ?>" style="display:inline-block;margin-right:8px;">
  <?= csrf_field() ?>
  <input type="hidden" name="purchase_order_id" value="<?= (int)$po['id'] ?>">
  <button type="submit" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">
    Create Purchase Invoice
  </button>
</form>
<?php endif; ?>

  <?php
    // Notes (purchase_order)
    $entity_type = 'purchase_order';
    $entity_id   = (int)$po['id'];
    $notes       = $notes ?? [];
    include __DIR__ . '/../partials/notes.php';
  ?>
</section>

----- END FILE: app/views/purchaseorders/view.php -----

----- BEGIN FILE: app/views/purchasereturns/print.php -----
<?php
use function App\Core\base_url;
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Debit Note <?= htmlspecialchars($pr['pr_no'],ENT_QUOTES,'UTF-8') ?></title>
  <style>
    body{font-family:Arial, sans-serif; margin:24px;}
    h1{margin:0 0 8px 0;}
    .muted{color:#666;}
    table{width:100%;border-collapse:collapse;margin-top:12px;}
    th,td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
    td.r, th.r {text-align:right;}
    .toolbar{margin-bottom:12px; padding:10px; border:1px solid #eee; border-radius:8px;}
    @media print{ .no-print{ display:none !important; } .toolbar{ display:none !important; } }
    @page { size: A4; margin: 16mm; }
  </style>
</head>
<body>
  <div class="toolbar no-print">
    <button type="button" onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Print</button>
    <a class="no-print" href="<?= base_url('/purchaseinvoices/show?id='.(int)$pr['purchase_invoice_id']) ?>" style="margin-left:12px;">Back</a>
  </div>

  <div style="margin-bottom:10px;">
    <img src="<?= base_url('/img/logo.png') ?>" alt="Logo" style="height:48px;vertical-align:middle;">
  </div>

  <header>
    <h1>Debit Note <?= htmlspecialchars($pr['pr_no'],ENT_QUOTES,'UTF-8') ?></h1>
    <div class="muted">
      Against PI: <?= htmlspecialchars($pi['pi_no'] ?? '',ENT_QUOTES,'UTF-8') ?> •
      Supplier: <?= htmlspecialchars($pi['supplier_name'] ?? '',ENT_QUOTES,'UTF-8') ?>
    </div>
  </header>

  <table>
    <thead>
      <tr>
        <th>Product</th>
        <th>Warehouse</th>
        <th class="r">Qty</th>
        <th class="r">Price</th>
        <th class="r">Line Total</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach (($items ?? []) as $it): ?>
      <tr>
        <td><?= htmlspecialchars(($it['product_code'] ?? '').' — '.($it['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
        <td><?= htmlspecialchars($it['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td class="r"><?= (int)($it['qty'] ?? 0) ?></td>
        <td class="r"><?= number_format((float)($it['price'] ?? 0),2) ?></td>
        <td class="r"><?= number_format((float)($it['line_total'] ?? 0),2) ?></td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>

  <p style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$pr['subtotal'],2) ?>
    &nbsp;| Tax (<?= number_format((float)$pr['tax_rate'],2) ?>%): <?= number_format((float)$pr['tax_amount'],2) ?>
    &nbsp;| <strong>Total: <?= number_format((float)$pr['total'],2) ?></strong>
  </p>
</body>
</html>

----- END FILE: app/views/purchasereturns/print.php -----

----- BEGIN FILE: app/views/quotes/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2>New Quote</h2>

  <form method="post" action="<?= base_url('/quotes') ?>" style="display:grid;gap:12px;">
    <?= csrf_field() ?>

    <div><strong>Quote No:</strong> <?= htmlspecialchars($quote_no, ENT_QUOTES, 'UTF-8') ?> (assigned on save)</div>

    <label><div>Customer</div>
      <select name="customer_id" required style="padding:10px;border:1px solid #ddd;border-radius:8px;">
        <option value="">— select —</option>
        <?php foreach ($customers as $c): ?>
          <option value="<?= (int)$c['id'] ?>"><?= htmlspecialchars($c['name'], ENT_QUOTES, 'UTF-8') ?></option>
        <?php endforeach; ?>
      </select>
    </label>

    <div style="display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;">
      <label><div>Tax %</div><input id="tax_rate" type="number" step="0.01" name="tax_rate" value="0"
         style="padding:10px;border:1px solid #ddd;border-radius:8px;"></label>
      <label><div>Expires at</div><input type="date" name="expires_at" style="padding:10px;border:1px solid #ddd;border-radius:8px;"></label>
    </div>

    <h3>Items</h3>
    <table style="width:100%;border-collapse:collapse;">
      <thead><tr>
  <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
  <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
  <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty</th>
  <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Unit Price</th>
  <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Line Total</th>
</tr></thead>
      <tbody id="rows">
        <?php for ($i=0; $i<$item_rows; $i++): ?>
<tr>
  <td style="padding:6px;">
    <select name="product_id[]" style="width:100%;padding:8px;border:1px solid #ddd;border-radius:6px;">
      <option value="">— select —</option>
      <?php foreach ($products as $p): ?>
        <option value="<?= (int)$p['id'] ?>" data-price="<?= htmlspecialchars((string)$p['price'], ENT_QUOTES, 'UTF-8') ?>">
          <?= htmlspecialchars($p['label'], ENT_QUOTES, 'UTF-8') ?>
        </option>
      <?php endforeach; ?>
    </select>
  </td>
  <td style="padding:6px;">
    <select name="warehouse_id[]" style="width:100%;padding:8px;border:1px solid #ddd;border-radius:6px;">
      <option value="">— select —</option>
      <?php foreach ($warehouses as $w): ?>
        <option value="<?= (int)$w['id'] ?>"><?= htmlspecialchars($w['name'], ENT_QUOTES, 'UTF-8') ?></option>
      <?php endforeach; ?>
    </select>
  </td>
  <td style="padding:6px;text-align:right;">
    <input type="number" min="0" name="qty[]" value="0"
           style="width:110px;padding:8px;border:1px solid #ddd;border-radius:6px;text-align:right;">
  </td>
  <td style="padding:6px;text-align:right;">
    <input type="number" step="0.01" min="0" name="price[]" value="0.00"
           style="width:130px;padding:8px;border:1px solid #ddd;border-radius:6px;text-align:right;">
  </td>
  <td style="padding:6px;text-align:right;">
    <input type="text" value="0.00" class="line-total"
           style="width:130px;padding:8px;border:1px solid #eee;background:#fafafa;border-radius:6px;text-align:right;"
           readonly>
  </td>
</tr>

        <?php endfor; ?>
      </tbody>
    </table>
	<div style="display:flex;gap:20px;justify-content:flex-end;margin-top:10px;">
  <div>Subtotal: <strong><span id="subtotal">0.00</span></strong></div>
  <div>Tax: <strong><span id="taxamount">0.00</span></strong></div>
  <div>Total: <strong><span id="grandtotal">0.00</span></strong></div>
</div>
    <button type="button" id="addrow" style="margin-top:8px;padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;">+ Add row</button>

    <div style="display:flex;gap:10px;margin-top:12px;">
      <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;">Save Quote</button>
      <a href="<?= base_url('/quotes') ?>" style="align-self:center;">Cancel</a>
    </div>
  </form>

<script>
(function () {
  const rows = document.getElementById('rows');

  function setPriceFromProduct(selectEl) {
    const tr = selectEl.closest('tr');
    const priceInput = tr.querySelector('input[name="price[]"]');
    const opt = selectEl.options[selectEl.selectedIndex];
    const p = opt && opt.dataset.price ? parseFloat(opt.dataset.price) : 0;
    // only overwrite when empty or zero, so manual edits are respected
    const cur = parseFloat(priceInput.value || '0');
    if (!cur || cur === 0) priceInput.value = (isNaN(p) ? 0 : p).toFixed(2);
  }

  // delegate change events for any current/future rows
  rows.addEventListener('change', function (e) {
    if (e.target && e.target.name === 'product_id[]') {
      setPriceFromProduct(e.target);
    }
  });

  // Add row button – clone first row, but clear inputs
  const addBtn = document.getElementById('addrow');
  addBtn.addEventListener('click', function () {
    const tr0 = rows.children[0];
    const tr = tr0.cloneNode(true);
    // reset fields
    tr.querySelector('select[name="product_id[]"]').value = '';
    tr.querySelector('select[name="warehouse_id[]"]').value = '';
    tr.querySelector('input[name="qty[]"]').value = '0';
    tr.querySelector('input[name="price[]"]').value = '0.00';
    rows.appendChild(tr);
  });

  // initialize existing rows (fill price if 0)
  [...rows.querySelectorAll('select[name="product_id[]"]')].forEach(setPriceFromProduct);
})();
</script>

</section>

----- END FILE: app/views/quotes/form.php -----

----- BEGIN FILE: app/views/quotes/index.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>Quotes</h2>

  <?php if ($m = flash_get('success')): ?><div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div><?php endif; ?>
  <?php if ($m = flash_get('error')): ?><div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div><?php endif; ?>

  <p><a href="<?= base_url('/quotes/create') ?>">+ New Quote</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Quote #</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Customer</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Total</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Status</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $q): ?>
        <tr>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($q['quote_no'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($q['customer_name'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;"><?= number_format((float)$q['total'],2) ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($q['status'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;">
            <a href="<?= base_url('/quotes/show?id='.(int)$q['id']) ?>">View</a>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="5" style="padding:12px;">No quotes yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/quotes/index.php -----

----- BEGIN FILE: app/views/quotes/print.php -----
<?php
use function App\Core\base_url;
use function App\Core\url_with_query;
use function App\Core\format_note_html;
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Quote <?= htmlspecialchars($q['quote_no'], ENT_QUOTES, 'UTF-8') ?></title>
  <style>
    body{font-family:Arial, sans-serif; margin:24px;}
    h1{margin:0 0 8px 0;}
    .muted{color:#666;}
    table{width:100%;border-collapse:collapse;margin-top:12px;}
    th,td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
    td.r, th.r {text-align:right;}
    .toolbar{margin-bottom:12px; padding:10px; border:1px solid #eee; border-radius:8px;}
    @media print{ .no-print{ display:none !important; } .toolbar{ display:none !important; } }
	@page { size: A4; margin: 16mm; }
@media print {
  footer { position: fixed; bottom: 0; left: 0; right: 0; text-align: center; font-size: 11px; color:#666; }
  thead { display: table-header-group; }
  tr { break-inside: avoid; }
}
  </style>
</head>
<body>
  <div class="toolbar no-print">
    <form method="get" action="<?= base_url('/quotes/print') ?>" style="display:flex;gap:12px;align-items:center;">
      <input type="hidden" name="id" value="<?= (int)$q['id'] ?>">
      <label style="display:flex;gap:6px;align-items:center;">
        <input type="checkbox" name="include_notes" value="1" <?= $include_notes ? 'checked' : '' ?>> Include public notes
      </label>
      <button type="submit" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#f9f9fb;cursor:pointer;">Apply</button>
      <button type="button" onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Print</button>
      <a class="no-print" href="<?= base_url('/quotes/show?id='.(int)$q['id']) ?>" style="margin-left:auto;">Back</a>
    </form>
  </div>

  <header>
  <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;">
  <div>
    <div style="font-weight:700;font-size:20px;">Spare Parts Management</div>
    <div class="muted">Address line • Phone • Email</div>
  </div>
  <!-- brand/logo -->
  <div style="margin-bottom:10px;">
    <img src="<?= base_url('/img/logo.png') ?>" alt="Logo" style="height:48px;vertical-align:middle;">
  </div>
  <!-- Optional logo: <img src="/public/img/logo.png" alt="Logo" style="height:48px"> -->
</div>

    <h1>Quote <?= htmlspecialchars($q['quote_no'], ENT_QUOTES, 'UTF-8') ?></h1>
    <div class="muted">Customer ID: <?= (int)$q['customer_id'] ?> • Status: <?= htmlspecialchars($q['status'], ENT_QUOTES, 'UTF-8') ?></div>
  </header>

  <table>
    <thead>
      <tr>
        <th>Product</th>
        <th>Warehouse</th>
        <th class="r">Qty</th>
        <th class="r">Unit Price</th>
        <th class="r">Line Total</th>
      </tr>
    </thead>
    <tbody>
    <?php foreach ($items as $it): ?>
      <tr>
        <td><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td><?= htmlspecialchars($it['warehouse_name'], ENT_QUOTES, 'UTF-8') ?></td>
        <td class="r"><?= (int)$it['qty'] ?></td>
        <td class="r"><?= number_format((float)$it['price'],2) ?></td>
        <td class="r"><?= number_format((float)$it['line_total'],2) ?></td>
      </tr>
    <?php endforeach; ?>
    </tbody>
  </table>

  <p class="r" style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$q['subtotal'],2) ?>
    &nbsp;|&nbsp; Tax (<?= number_format((float)$q['tax_rate'],2) ?>%): <?= number_format((float)$q['tax_amount'],2) ?>
    &nbsp;|&nbsp; <strong>Total: <?= number_format((float)$q['total'],2) ?></strong>
  </p>

  <?php if (!empty($public_notes) && $include_notes): ?>
    <section style="margin-top:16px;">
      <h3>Public Notes</h3>
      <ul style="list-style:none;padding:0;display:grid;gap:8px;">
        <?php foreach ($public_notes as $n): ?>
          <li style="border:1px solid #eee;border-radius:8px;padding:10px;">
            <div style="font-size:12px;color:#666;"><?= htmlspecialchars($n['created_by'] ?? 'system', ENT_QUOTES, 'UTF-8') ?> · <?= htmlspecialchars($n['created_at'] ?? '', ENT_QUOTES, 'UTF-8') ?></div>
            <div style="margin-top:6px;"><?= format_note_html($n['body'] ?? '') ?></div>
          </li>
        <?php endforeach; ?>
      </ul>
    </section>
  <?php endif; ?>
  <footer>Page <span class="pageNumber"></span></footer>
<script>try{document.querySelector('.pageNumber').textContent='';}catch(e){}</script>

</body>
</html>

----- END FILE: app/views/quotes/print.php -----

----- BEGIN FILE: app/views/quotes/view.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2>Quote <?= htmlspecialchars($q['quote_no'], ENT_QUOTES, 'UTF-8') ?></h2>
  <p>Status: <strong><?= htmlspecialchars($q['status'], ENT_QUOTES, 'UTF-8') ?></strong></p>
  <p>Subtotal: <?= number_format((float)$q['subtotal'],2) ?> |
     Tax (<?= number_format((float)$q['tax_rate'],2) ?>%): <?= number_format((float)$q['tax_amount'],2) ?> |
     Total: <strong><?= number_format((float)$q['total'],2) ?></strong></p>
  <?php if (!empty($q['expires_at'])): ?><p>Expires at: <?= htmlspecialchars($q['expires_at'], ENT_QUOTES, 'UTF-8') ?></p><?php endif; ?>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Price</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Line total</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $it): ?>
        <tr>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($it['warehouse_name'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;"><?= (int)$it['qty'] ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;"><?= number_format((float)$it['price'],2) ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;text-align:right;"><?= number_format((float)$it['line_total'],2) ?></td>
        </tr>
      <?php endforeach; ?>
    </tbody>
  </table>

  <?php if ($q['status']==='sent'): ?>
    <form method="post" action="<?= base_url('/quotes/cancel') ?>" style="display:inline">
      <?= csrf_field() ?><input type="hidden" name="id" value="<?= (int)$q['id'] ?>">
      <button type="submit" style="margin-top:10px;background:none;border:1px solid #c00;color:#c00;border-radius:8px;padding:8px 12px;cursor:pointer;">Cancel (release)</button>
    </form>
    <form method="post" action="<?= base_url('/quotes/expire') ?>" style="display:inline;margin-left:8px;">
      <?= csrf_field() ?><input type="hidden" name="id" value="<?= (int)$q['id'] ?>">
      <button type="submit" style="margin-top:10px;background:none;border:1px solid #999;color:#333;border-radius:8px;padding:8px 12px;cursor:pointer;">Mark Expired</button>
    </form>
    <!-- Convert to Order button will arrive in Phase 4B -->
	<form method="post" action="<?= base_url('/quotes/convert') ?>" style="display:inline;margin-left:8px;">
  <?= csrf_field() ?><input type="hidden" name="id" value="<?= (int)$q['id'] ?>">
  <button type="submit" style="margin-top:10px;background:#0a0;border:1px solid #0a0;color:#fff;border-radius:8px;padding:8px 12px;cursor:pointer;">
    Convert to Order
  </button>
</form>
  <?php endif; ?>
<?php
$entity_type = 'quote';
$entity_id   = (int)$q['id'];
$notes       = $notes ?? [];
include __DIR__ . '/../partials/notes.php';
?>
  <p style="margin-top:12px;"><a href="<?= base_url('/quotes') ?>">Back to Quotes</a><a class="no-print" href="<?= base_url('/quotes/print?id='.(int)$q['id']) ?>" style="margin-left:8px;">Print</a>
</p>
</section>

----- END FILE: app/views/quotes/view.php -----

----- BEGIN FILE: app/views/receipts/print.php -----
<?php
use function App\Core\base_url;
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>GRN — <?= htmlspecialchars($pi['pi_no'],ENT_QUOTES,'UTF-8') ?></title>
  <style>
    body{font-family:Arial, sans-serif; margin:24px;}
    h1{margin:0 0 8px 0;}
    .muted{color:#666;}
    table{width:100%;border-collapse:collapse;margin-top:12px;}
    th,td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
    td.r, th.r {text-align:right;}
    .toolbar{margin-bottom:12px; padding:10px; border:1px solid #eee; border-radius:8px;}
    @media print{ .no-print{ display:none !important; } .toolbar{ display:none !important; } }
    @page { size: A4; margin: 16mm; }
  </style>
</head>
<body>
  <div class="toolbar no-print">
    <button type="button" onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Print</button>
    <a class="no-print" href="<?= base_url('/purchaseinvoices/show?id='.(int)$pi['id']) ?>" style="margin-left:12px;">Back</a>
  </div>

  <div style="margin-bottom:10px;">
    <img src="<?= base_url('/img/logo.png') ?>" alt="Logo" style="height:48px;vertical-align:middle;">
  </div>

  <header>
    <h1>Goods Received Note</h1>
    <div class="muted">
      PI: <?= htmlspecialchars($pi['pi_no'],ENT_QUOTES,'UTF-8') ?> •
      Supplier: <?= htmlspecialchars($pi['supplier_name'],ENT_QUOTES,'UTF-8') ?> •
      PO: <?= htmlspecialchars($pi['po_no'],ENT_QUOTES,'UTF-8') ?>
    </div>
  </header>

  <h3 style="margin-top:12px;">Ordered vs Received (to date)</h3>
  <table>
    <thead><tr>
      <th>Product</th>
      <th>Warehouse</th>
      <th class="r">Ordered</th>
      <th class="r">Received</th>
    </tr></thead>
    <tbody>
      <?php
        // Build map ordered & received
        $ordered = [];
        foreach ($items as $it) {
          $k = $it['product_id'].':'.$it['warehouse_id'];
          $ordered[$k] = ($ordered[$k] ?? 0) + (int)$it['qty'];
        }
        $receivedMap = [];
        foreach ($receipts as $r) {
          $k = $r['product_id'].':'.$r['warehouse_id'];
          $receivedMap[$k] = ($receivedMap[$k] ?? 0) + (int)$r['qty'];
        }
        foreach ($items as $it):
          $k = $it['product_id'].':'.$it['warehouse_id'];
          $ord = (int)$ordered[$k];
          $rec = (int)($receivedMap[$k] ?? 0);
      ?>
        <tr>
          <td><?= htmlspecialchars($it['product_code'].' — '.$it['product_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td><?= htmlspecialchars($it['warehouse_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td class="r"><?= $ord ?></td>
          <td class="r"><?= $rec ?></td>
        </tr>
      <?php endforeach; ?>
    </tbody>
  </table>

  <?php if ($receipts): ?>
    <h3 style="margin-top:16px;">Receipt Lines</h3>
    <table>
      <thead><tr>
        <th>Date</th>
        <th>Product</th>
        <th>Warehouse</th>
        <th class="r">Qty</th>
        <th class="r">Price</th>
      </tr></thead>
      <tbody>
        <?php foreach ($receipts as $r): ?>
          <tr>
            <td><?= htmlspecialchars($r['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars(($r['product_code'] ?? '').' — '.($r['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($r['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td class="r"><?= (int)$r['qty'] ?></td>
            <td class="r"><?= number_format((float)$r['price'],2) ?></td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>
  <?php endif; ?>
</body>
</html>

----- END FILE: app/views/receipts/print.php -----

----- BEGIN FILE: app/views/reports/ap_aging.php -----
<?php
use function App\Core\base_url;
/** @var array $rows,$totals; @var string $asof */
?>
<section>
  <h2>AP Aging</h2>

  <form class="no-print" method="get" action="<?= base_url('/reports/ap-aging') ?>" style="display:flex;gap:8px;align-items:end;margin:8px 0;">
    <label><div>As of</div><input type="date" name="asof" value="<?= htmlspecialchars($asof,ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
    <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Apply</button>
    <button type="button" onclick="window.print()" style="padding:8px 12px;border:1px solid #111;border-radius:8px;background:#fff;color:#111;cursor:pointer;">Print</button>
  </form>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">Supplier</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">0–30</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">31–60</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">61–90</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">90+</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Total</th>
    </tr></thead>
    <tbody>
      <?php foreach ($rows as $r): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['supplier_name'],ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['bucket_0_30'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['bucket_31_60'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['bucket_61_90'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['bucket_90_plus'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['total'],2) ?></td>
      </tr>
      <?php endforeach; ?>
      <?php if (!$rows): ?>
        <tr><td colspan="6" style="padding:12px;">No outstanding payables.</td></tr>
      <?php endif; ?>
    </tbody>
    <tfoot>
      <tr>
        <th style="padding:8px;text-align:right;">Grand Total</th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['b0'],2) ?></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['b31'],2) ?></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['b61'],2) ?></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['b90'],2) ?></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['total'],2) ?></th>
      </tr>
    </tfoot>
  </table>
</section>

----- END FILE: app/views/reports/ap_aging.php -----

----- BEGIN FILE: app/views/reports/ar_aging.php -----
<?php
use function App\Core\base_url;
/** @var array $rows,$totals; @var string $asof */
?>
<section>
  <h2>AR Aging</h2>

  <form class="no-print" method="get" action="<?= base_url('/reports/ar-aging') ?>" style="display:flex;gap:8px;align-items:end;margin:8px 0;">
    <label><div>As of</div><input type="date" name="asof" value="<?= htmlspecialchars($asof,ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
    <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Apply</button>
    <button type="button" onclick="window.print()" style="padding:8px 12px;border:1px solid #111;border-radius:8px;background:#fff;color:#111;cursor:pointer;">Print</button>
  </form>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">Customer</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">0–30</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">31–60</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">61–90</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">90+</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Total</th>
    </tr></thead>
    <tbody>
      <?php foreach ($rows as $r): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['customer_name'],ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['bucket_0_30'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['bucket_31_60'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['bucket_61_90'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['bucket_90_plus'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['total'],2) ?></td>
      </tr>
      <?php endforeach; ?>
      <?php if (!$rows): ?>
        <tr><td colspan="6" style="padding:12px;">No outstanding receivables.</td></tr>
      <?php endif; ?>
    </tbody>
    <tfoot>
      <tr>
        <th style="padding:8px;text-align:right;">Grand Total</th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['b0'],2) ?></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['b31'],2) ?></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['b61'],2) ?></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['b90'],2) ?></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)$totals['total'],2) ?></th>
      </tr>
    </tfoot>
  </table>
</section>

----- END FILE: app/views/reports/ar_aging.php -----

----- BEGIN FILE: app/views/reports/inventory_valuation.php -----
<?php /** @var array $rows,$tot */ use function App\Core\base_url; ?>
<section>
  <h2>Inventory Valuation (Weighted Avg)</h2>

  <p class="no-print" style="margin:8px 0;">
    <a href="<?= base_url('/') ?>" style="margin-right:12px;">Back</a>
    <button onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#fff;cursor:pointer;">Print</button>
  </p>

  <table style="width:100%;border-collapse:collapse;">
    <thead>
      <tr>
        <th style="border-bottom:1px solid #eee;padding:8px;text-align:left;">Warehouse</th>
        <th style="border-bottom:1px solid #eee;padding:8px;text-align:left;">Product</th>
        <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">On hand</th>
        <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Avg cost</th>
        <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Value</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($rows as $r): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars(($r['product_code'] ?? '').' — '.($r['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)($r['qty_on_hand'] ?? 0) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)($r['avg_cost'] ?? 0),4) ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)($r['value'] ?? 0),2) ?></td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$rows): ?>
        <tr><td colspan="5" style="padding:12px;">No stock.</td></tr>
      <?php endif; ?>
    </tbody>
    <tfoot>
      <tr>
        <th colspan="2" style="padding:8px;text-align:right;">Totals</th>
        <th style="padding:8px;text-align:right;"><?= (int)($tot['qty'] ?? 0) ?></th>
        <th></th>
        <th style="padding:8px;text-align:right;"><?= number_format((float)($tot['value'] ?? 0),2) ?></th>
      </tr>
    </tfoot>
  </table>
</section>

<style>
  @media print { .no-print, nav, header, footer { display:none !important; } body { margin:0; } }
</style>

----- END FILE: app/views/reports/inventory_valuation.php -----

----- BEGIN FILE: app/views/salesreturns/print.php -----
<?php
use function App\Core\base_url;
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Credit Note <?= htmlspecialchars($sr['sr_no'],ENT_QUOTES,'UTF-8') ?></title>
  <style>
    body{font-family:Arial, sans-serif; margin:24px;}
    h1{margin:0 0 8px 0;}
    .muted{color:#666;}
    table{width:100%;border-collapse:collapse;margin-top:12px;}
    th,td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
    td.r, th.r {text-align:right;}
    .toolbar{margin-bottom:12px; padding:10px; border:1px solid #eee; border-radius:8px;}
    @media print{ .no-print{ display:none !important; } .toolbar{ display:none !important; } }
    @page { size: A4; margin: 16mm; }
  </style>
</head>
<body>
  <div class="toolbar no-print">
    <button type="button" onclick="window.print()" style="padding:6px 10px;border:1px solid #111;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Print</button>
    <a class="no-print" href="<?= base_url('/invoices/show?id='.(int)$sr['sales_invoice_id']) ?>" style="margin-left:12px;">Back</a>
  </div>

  <div style="margin-bottom:10px;">
    <img src="<?= base_url('/img/logo.png') ?>" alt="Logo" style="height:48px;vertical-align:middle;">
  </div>

  <header>
    <h1>Credit Note <?= htmlspecialchars($sr['sr_no'],ENT_QUOTES,'UTF-8') ?></h1>
    <div class="muted">
      Against Invoice: <?= htmlspecialchars($inv['inv_no'] ?? '',ENT_QUOTES,'UTF-8') ?> •
      Client: <?= htmlspecialchars($inv['client_name'] ?? '',ENT_QUOTES,'UTF-8') ?>
    </div>
  </header>

  <table>
    <thead>
      <tr>
        <th>Product</th>
        <th>Warehouse</th>
        <th class="r">Qty</th>
        <th class="r">Price</th>
        <th class="r">Line Total</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach (($items ?? []) as $it): ?>
      <tr>
        <td><?= htmlspecialchars(($it['product_code'] ?? '').' — '.($it['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
        <td><?= htmlspecialchars($it['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td class="r"><?= (int)($it['qty'] ?? 0) ?></td>
        <td class="r"><?= number_format((float)($it['price'] ?? 0),2) ?></td>
        <td class="r"><?= number_format((float)($it['line_total'] ?? 0),2) ?></td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>

  <p class="r" style="text-align:right;margin-top:8px;">
    Subtotal: <?= number_format((float)$sr['subtotal'],2) ?>
    &nbsp;| Tax (<?= number_format((float)$sr['tax_rate'],2) ?>%): <?= number_format((float)$sr['tax_amount'],2) ?>
    &nbsp;| <strong>Total: <?= number_format((float)$sr['total'],2) ?></strong>
  </p>
</body>
</html>

----- END FILE: app/views/salesreturns/print.php -----

----- BEGIN FILE: app/views/salesreturns/view.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Credit Note <?= htmlspecialchars($sr['sr_no'] ?? '',ENT_QUOTES,'UTF-8') ?></h2>
  <p>Against Invoice: <strong><?= htmlspecialchars($sr['inv_no'] ?? '',ENT_QUOTES,'UTF-8') ?></strong></p>
  <p>
    <a href="<?= base_url('/salesreturns/print?id='.(int)($sr['id'] ?? 0)) ?>">Print</a>
    · <a href="<?= base_url('/invoices/show?id='.(int)($sr['sales_invoice_id'] ?? 0)) ?>">Back to invoice</a>
  </p>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Warehouse</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Price</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Line Total</th>
    </tr></thead>
    <tbody>
      <?php $subtotal=0.0; foreach (($items ?? []) as $it): $lt=(float)($it['line_total'] ?? 0); $subtotal+=$lt; ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars(($it['product_code'] ?? '').' — '.($it['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($it['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)($it['qty'] ?? 0) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)($it['price'] ?? 0),2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format($lt,2) ?></td>
      </tr>
      <?php endforeach; if (empty($items)): ?>
      <tr><td colspan="5" style="padding:12px;">No lines.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>

  <p style="text-align:right;margin-top:8px;">
    <strong>Total: <?= number_format((float)($sr['total'] ?? $subtotal),2) ?></strong>
  </p>
</section>

----- END FILE: app/views/salesreturns/view.php -----

----- BEGIN FILE: app/views/supplierpayments/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Supplier Payments</h2>
  <p><a href="<?= base_url('/purchaseinvoices') ?>">Back to Purchase Invoices</a></p>
  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Supplier</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">PI #</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Method</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Ref</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Amount</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $r): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['paid_at'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['supplier_name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
            <a href="<?= base_url('/purchaseinvoices/show?id='.(int)$r['purchase_invoice_id']) ?>"><?= htmlspecialchars($r['pi_no'],ENT_QUOTES,'UTF-8') ?></a>
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['method'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['reference'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['amount'],2) ?></td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="6" style="padding:12px;">No supplier payments yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/supplierpayments/index.php -----

----- BEGIN FILE: app/views/suppliers/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
/** @var string $mode */
/** @var array $item */
?>
<section>
  <h2><?= $mode === 'create' ? 'New Supplier' : 'Edit Supplier' ?></h2>

  <form method="post" action="<?= base_url($mode==='create' ? '/suppliers' : '/suppliers/update') ?>" style="display:grid;gap:10px;max-width:800px;">
    <?= csrf_field() ?>
    <?php if ($mode==='edit'): ?>
      <input type="hidden" name="id" value="<?= (int)$item['id'] ?>">
    <?php endif; ?>

    <label><div>Name</div>
      <input type="text" name="name" value="<?= htmlspecialchars($item['name'] ?? '',ENT_QUOTES,'UTF-8') ?>" required style="padding:8px;border:1px solid #ddd;border-radius:6px;width:100%;">
    </label>

    <label><div>Phone</div>
      <input type="text" name="phone" value="<?= htmlspecialchars($item['phone'] ?? '',ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;width:100%;">
    </label>

    <label><div>Email</div>
      <input type="email" name="email" value="<?= htmlspecialchars($item['email'] ?? '',ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;width:100%;">
    </label>

    <label><div>Address</div>
      <input type="text" name="address" value="<?= htmlspecialchars($item['address'] ?? '',ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;width:100%;">
    </label>

    <div>
      <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">
        <?= $mode==='create' ? 'Create' : 'Save' ?>
      </button>
      <a href="<?= base_url('/suppliers') ?>" style="margin-left:8px;">Back</a>
    </div>
  </form>
</section>

----- END FILE: app/views/suppliers/form.php -----

----- BEGIN FILE: app/views/suppliers/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Suppliers</h2>
  <p><a href="<?= base_url('/purchaseorders') ?>">Back to Purchase Orders</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead>
      <tr>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Name</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Phone</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Email</th>
        <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Address</th>
        <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Balance</th>
        <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach (($items ?? []) as $s): ?>
        <tr>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($s['name'],ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($s['phone'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($s['email'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($s['address'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;">
            <?= number_format((float)($s['balance'] ?? 0), 2) ?>
          </td>
          <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
			<a href="<?= base_url('/suppliers/show?id='.(int)$s['id']) ?>">View</a> ·
  			<a href="<?= base_url('/suppliers/statement?id='.(int)$s['id'].'&from='.date('Y-m-01').'&to='.date('Y-m-d')) ?>">Statement</a>
            </td>
        </tr>
      <?php endforeach; ?>
      <?php if (empty($items)): ?>
        <tr><td colspan="6" style="padding:12px;">No suppliers found.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/suppliers/index.php -----

----- BEGIN FILE: app/views/suppliers/statement.php -----
<?php
use function App\Core\base_url;
/** @var array $supplier, $rows; @var string $from,$to; @var float $opening,$closing */
?>
<section>
  <h2>Supplier Statement — <?= htmlspecialchars($supplier['name'],ENT_QUOTES,'UTF-8') ?></h2>

  <form class="no-print" method="get" action="<?= base_url('/suppliers/statement') ?>" style="display:flex;gap:8px;align-items:end;margin:8px 0;">
    <input type="hidden" name="id" value="<?= (int)$supplier['id'] ?>">
    <label><div>From</div><input type="date" name="from" value="<?= htmlspecialchars($from,ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
    <label><div>To</div><input type="date" name="to" value="<?= htmlspecialchars($to,ENT_QUOTES,'UTF-8') ?>" style="padding:8px;border:1px solid #ddd;border-radius:6px;"></label>
    <button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Apply</button>
    <button type="button" onclick="window.print()" style="padding:8px 12px;border:1px solid #111;border-radius:8px;background:#fff;color:#111;cursor:pointer;">Print</button>
    <a href="<?= base_url('/suppliers') ?>" style="margin-left:8px;">Back</a>
  </form>

  <p>Opening balance (before <?= htmlspecialchars($from,ENT_QUOTES,'UTF-8') ?>): <strong><?= number_format((float)$opening,2) ?></strong></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Type</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Ref</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Debit</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Credit</th>
      <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Running</th>
    </tr></thead>
    <tbody>
      <?php foreach ($rows as $r): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['txn_date'],ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars(ucfirst($r['kind']),ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($r['ref_no'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['debit'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['credit'],2) ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= number_format((float)$r['running'],2) ?></td>
      </tr>
      <?php endforeach; ?>
      <?php if (!$rows): ?>
        <tr><td colspan="6" style="padding:12px;">No movements in this period.</td></tr>
      <?php endif; ?>
    </tbody>
  </table>

  <p style="margin-top:10px;">Closing balance (as of <?= htmlspecialchars($to,ENT_QUOTES,'UTF-8') ?>): <strong><?= number_format((float)$closing,2) ?></strong></p>
</section>

----- END FILE: app/views/suppliers/statement.php -----

----- BEGIN FILE: app/views/suppliers/view.php -----
<?php
use function App\Core\base_url;
/** @var array $supplier,$po_list,$receipt_items,$pi_list,$spayments; @var float $ap_balance,$inv_total,$pay_total,$ret_total */
?>
<section>
  <h2>Supplier — <?= htmlspecialchars($supplier['name'] ?? '',ENT_QUOTES,'UTF-8') ?></h2>
  <p>
    <strong>Phone:</strong> <?= htmlspecialchars($supplier['phone'] ?? '',ENT_QUOTES,'UTF-8') ?> ·
    <strong>Email:</strong> <?= htmlspecialchars($supplier['email'] ?? '',ENT_QUOTES,'UTF-8') ?> ·
    <strong>Address:</strong> <?= htmlspecialchars($supplier['address'] ?? '',ENT_QUOTES,'UTF-8') ?>
  </p>
  <p>
    <strong>AP Totals</strong> — Invoices: <?= number_format($inv_total,2) ?> ·
    Payments: <?= number_format($pay_total,2) ?> ·
    Credits: <?= number_format($ret_total,2) ?> ·
    <strong>Balance:</strong> <?= number_format($ap_balance,2) ?>
  </p>
  <p>
    <a class="button" href="<?= base_url('/suppliers/statement?id='.(int)$supplier['id']) ?>">View Statement</a>
    · <a href="<?= base_url('/suppliers') ?>">Back to Suppliers</a>
  </p>

  <div class="tabs">
    <div class="tabbar">
      <button data-tab="pos" class="active">Purchase Orders</button>
      <button data-tab="receipts">Delivered Items (Receipts)</button>
      <button data-tab="pis">Purchase Invoices</button>
      <button data-tab="payments">Payments (AP)</button>
    </div>

    <div class="tabcontent" id="tab-pos" style="display:block;">
      <table class="grid">
        <thead><tr>
          <th>PO #</th><th>Date</th><th>Status</th><th class="r">Total</th><th>Action</th>
        </tr></thead>
        <tbody>
          <?php foreach ($po_list as $po): ?>
          <tr>
            <td><?= htmlspecialchars($po['po_no'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($po['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($po['status'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td class="r"><?= number_format((float)$po['total'],2) ?></td>
            <td><a href="<?= base_url('/purchaseorders/show?id='.(int)$po['id']) ?>">Open</a></td>
          </tr>
          <?php endforeach; ?>
          <?php if (!$po_list): ?><tr><td colspan="5">No purchase orders.</td></tr><?php endif; ?>
        </tbody>
      </table>
    </div>

    <div class="tabcontent" id="tab-receipts">
      <table class="grid">
        <thead><tr>
          <th>Date</th><th>PI #</th><th>Product</th><th>Warehouse</th><th class="r">Qty</th><th class="r">Price</th><th class="r">Line Total</th>
        </tr></thead>
        <tbody>
          <?php foreach ($receipt_items as $r): ?>
          <tr>
            <td><?= htmlspecialchars($r['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><a href="<?= base_url('/purchaseinvoices/show?id='.(int)$r['purchase_invoice_id']) ?>"><?= htmlspecialchars($r['pi_no'] ?? '',ENT_QUOTES,'UTF-8') ?></a></td>
            <td><?= htmlspecialchars(($r['product_code'] ?? '').' — '.($r['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($r['warehouse_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td class="r"><?= (int)($r['qty'] ?? 0) ?></td>
            <td class="r"><?= number_format((float)($r['price'] ?? 0),2) ?></td>
            <td class="r"><?= number_format((float)($r['line_total'] ?? 0),2) ?></td>
          </tr>
          <?php endforeach; ?>
          <?php if (!$receipt_items): ?><tr><td colspan="7">No receipts.</td></tr><?php endif; ?>
        </tbody>
      </table>
    </div>

    <div class="tabcontent" id="tab-pis">
      <table class="grid">
        <thead><tr>
          <th>PI #</th><th>Date</th><th>Status</th><th class="r">Paid</th><th class="r">Total</th><th class="r">Balance</th><th>Action</th>
        </tr></thead>
        <tbody>
          <?php foreach ($pi_list as $pi): ?>
          <?php $bal = (float)$pi['total'] - (float)$pi['paid_amount']; ?>
          <tr>
            <td><?= htmlspecialchars($pi['pi_no'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($pi['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($pi['status'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td class="r"><?= number_format((float)$pi['paid_amount'],2) ?></td>
            <td class="r"><?= number_format((float)$pi['total'],2) ?></td>
            <td class="r"><?= number_format($bal,2) ?></td>
            <td><a href="<?= base_url('/purchaseinvoices/show?id='.(int)$pi['id']) ?>">Open</a></td>
          </tr>
          <?php endforeach; ?>
          <?php if (!$pi_list): ?><tr><td colspan="7">No purchase invoices.</td></tr><?php endif; ?>
        </tbody>
      </table>
    </div>

    <div class="tabcontent" id="tab-payments">
      <table class="grid">
        <thead><tr>
          <th>Date</th><th>Method</th><th>Reference</th><th class="r">Amount</th>
        </tr></thead>
        <tbody>
          <?php foreach ($spayments as $p): ?>
          <tr>
            <td><?= htmlspecialchars($p['paid_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($p['method'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td><?= htmlspecialchars($p['reference'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
            <td class="r"><?= number_format((float)($p['amount'] ?? 0),2) ?></td>
          </tr>
          <?php endforeach; ?>
          <?php if (!$spayments): ?><tr><td colspan="4">No payments.</td></tr><?php endif; ?>
        </tbody>
      </table>
    </div>
  </div>
</section>

<style>
.tabs .tabbar { display:flex; gap:6px; margin:10px 0; flex-wrap:wrap; }
.tabs .tabbar button { padding:6px 10px; border:1px solid #ddd; background:#fff; border-radius:8px; cursor:pointer; }
.tabs .tabbar button.active { background:#111; color:#fff; border-color:#111; }
.grid { width:100%; border-collapse:collapse; }
.grid th, .grid td { padding:8px; border-bottom:1px solid #eee; text-align:left; }
.grid .r { text-align:right; }
</style>
<script>
(function(){
  const buttons = document.querySelectorAll('.tabbar button');
  const tabs = {
    'pos': document.getElementById('tab-pos'),
    'receipts': document.getElementById('tab-receipts'),
    'pis': document.getElementById('tab-pis'),
    'payments': document.getElementById('tab-payments'),
  };
  buttons.forEach(btn=>{
    btn.addEventListener('click', ()=>{
      buttons.forEach(b=>b.classList.remove('active'));
      btn.classList.add('active');
      const target = btn.dataset.tab;
      Object.keys(tabs).forEach(k => tabs[k].style.display = (k===target)?'block':'none');
    });
  });
})();
</script>

----- END FILE: app/views/suppliers/view.php -----

----- BEGIN FILE: app/views/transfers/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
/** @var array $warehouses, $products */
?>
<section>
  <h2>New Stock Transfer</h2>
  <form method="post" action="<?= base_url('/transfers') ?>">
    <?= csrf_field() ?>
    <div style="display:flex;gap:12px;flex-wrap:wrap;">
      <label>From
        <select name="from_warehouse_id" required style="padding:8px;border:1px solid #ddd;border-radius:6px;min-width:220px;">
          <option value="">-- choose --</option>
          <?php foreach ($warehouses as $w): ?>
            <option value="<?= (int)$w['id'] ?>"><?= htmlspecialchars($w['name'],ENT_QUOTES,'UTF-8') ?></option>
          <?php endforeach; ?>
        </select>
      </label>
      <label>To
        <select name="to_warehouse_id" required style="padding:8px;border:1px solid #ddd;border-radius:6px;min-width:220px;">
          <option value="">-- choose --</option>
          <?php foreach ($warehouses as $w): ?>
            <option value="<?= (int)$w['id'] ?>"><?= htmlspecialchars($w['name'],ENT_QUOTES,'UTF-8') ?></option>
          <?php endforeach; ?>
        </select>
      </label>
    </div>

    <table id="lines" style="width:100%;border-collapse:collapse;margin-top:12px;">
      <thead><tr>
        <th style="border-bottom:1px solid #eee;padding:8px;">Product</th>
        <th style="border-bottom:1px solid #eee;padding:8px;text-align:right;">Qty</th>
        <th style="border-bottom:1px solid #eee;padding:8px;">&nbsp;</th>
      </tr></thead>
      <tbody></tbody>
    </table>

    <p><button type="button" id="add-line" style="padding:6px 10px;border:1px solid #ddd;border-radius:8px;background:#fff;cursor:pointer;">+ Add line</button></p>

    <p>
      <label>Note<br>
        <textarea name="note" rows="3" style="width:100%;padding:8px;border:1px solid #ddd;border-radius:6px;"></textarea>
      </label>
    </p>

    <p><button type="submit" style="padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">Save Transfer</button>
       <a href="<?= base_url('/transfers') ?>" style="margin-left:8px;">Cancel</a></p>
  </form>
</section>

<script>
(function(){
  const products = <?= json_encode($products, JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_AMP|JSON_HEX_QUOT) ?>;
  const tbody = document.querySelector('#lines tbody');
  const btn   = document.getElementById('add-line');

  function addRow() {
    const tr = document.createElement('tr');

    const tdProd = document.createElement('td');
    tdProd.style.padding='8px'; tdProd.style.borderBottom='1px solid #f2f2f4';
    const sel = document.createElement('select');
    sel.name='product_id[]';
    sel.required = true;
    sel.style.cssText = 'padding:8px;border:1px solid #ddd;border-radius:6px;min-width:320px;';
    sel.innerHTML = '<option value="">-- choose product --</option>' +
      products.map(p => `<option value="${p.id}">${(p.code||'') + ' — ' + (p.name||'')}</option>`).join('');
    tdProd.appendChild(sel);

    const tdQty = document.createElement('td');
    tdQty.style.padding='8px'; tdQty.style.borderBottom='1px solid #f2f2f4'; tdQty.style.textAlign='right';
    const qty = document.createElement('input');
    qty.type='number'; qty.name='qty[]'; qty.min='1'; qty.step='1'; qty.required = true;
    qty.style.cssText='padding:8px;border:1px solid #ddd;border-radius:6px;width:120px;text-align:right;';
    tdQty.appendChild(qty);

    const tdAct = document.createElement('td');
    tdAct.style.padding='8px'; tdAct.style.borderBottom='1px solid #f2f2f4';
    const rm = document.createElement('button');
    rm.type='button'; rm.textContent='Remove';
    rm.style.cssText='padding:6px 10px;border:1px solid #cc0000;color:#cc0000;background:#fff;border-radius:8px;cursor:pointer;';
    rm.addEventListener('click', ()=>tr.remove());
    tdAct.appendChild(rm);

    tr.appendChild(tdProd); tr.appendChild(tdQty); tr.appendChild(tdAct);
    tbody.appendChild(tr);
  }

  btn.addEventListener('click', addRow);
  addRow();
})();
</script>

----- END FILE: app/views/transfers/form.php -----

----- BEGIN FILE: app/views/transfers/index.php -----
<?php use function App\Core\base_url; ?>
<section>
  <h2>Stock Transfers</h2>
  <p><a class="no-print" href="<?= base_url('/transfers/create') ?>">New Transfer</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="border-bottom:1px solid #eee;padding:8px;">TR #</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Date</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">From</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">To</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Action</th>
    </tr></thead>
    <tbody>
      <?php foreach (($items ?? []) as $t): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($t['tr_no'],ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($t['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($t['from_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars($t['to_name'] ?? '',ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;">
          <a href="<?= base_url('/transfers/show?id='.(int)$t['id']) ?>">Open</a> ·
          <a href="<?= base_url('/transfers/print?id='.(int)$t['id']) ?>">Print</a>
        </td>
      </tr>
      <?php endforeach; ?>
      <?php if (empty($items)): ?><tr><td colspan="5" style="padding:12px;">No transfers yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/transfers/index.php -----

----- BEGIN FILE: app/views/transfers/print.php -----
<?php
use function App\Core\base_url;
/** @var array $t,$items */
?>
<section class="printable">
  <!-- Optional logo: <img src="/public/img/logo.png" alt="Logo" style="height:48px"> -->
  <h2>Stock Transfer</h2>
  <p><strong>TR #:</strong> <?= htmlspecialchars($t['tr_no'],ENT_QUOTES,'UTF-8') ?><br>
     <strong>Date:</strong> <?= htmlspecialchars($t['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?><br>
     <strong>From:</strong> <?= htmlspecialchars($t['from_name'],ENT_QUOTES,'UTF-8') ?> →
     <strong>To:</strong> <?= htmlspecialchars($t['to_name'],ENT_QUOTES,'UTF-8') ?></p>

  <?php if (!empty($t['note'])): ?>
    <p><strong>Note:</strong> <?= nl2br(htmlspecialchars($t['note'],ENT_QUOTES,'UTF-8')) ?></p>
  <?php endif; ?>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #000;padding:6px;">Product</th>
      <th style="text-align:right;border-bottom:1px solid #000;padding:6px;">Qty</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $it): ?>
      <tr>
        <td style="padding:6px;border-bottom:1px solid #000;"><?= htmlspecialchars(($it['product_code'] ?? '').' — '.($it['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:6px;border-bottom:1px solid #000;text-align:right;"><?= (int)$it['qty'] ?></td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>

  <p class="no-print" style="margin-top:10px;"><button onclick="window.print()">Print</button> · <a href="<?= base_url('/transfers/show?id='.(int)$t['id']) ?>">Back</a></p>
</section>
<style>
@media print {
  .no-print, nav, header, footer { display:none !important; }
  body { margin: 0; }
}
</style>

----- END FILE: app/views/transfers/print.php -----

----- BEGIN FILE: app/views/transfers/view.php -----
<?php
use function App\Core\base_url;
/** @var array $t,$items */
?>
<section>
  <h2>Transfer <?= htmlspecialchars($t['tr_no'],ENT_QUOTES,'UTF-8') ?></h2>
  <p>Date: <?= htmlspecialchars($t['created_at'] ?? '',ENT_QUOTES,'UTF-8') ?></p>
  <p>From: <strong><?= htmlspecialchars($t['from_name'],ENT_QUOTES,'UTF-8') ?></strong>
     → To: <strong><?= htmlspecialchars($t['to_name'],ENT_QUOTES,'UTF-8') ?></strong></p>
  <?php if (!empty($t['note'])): ?>
    <p><strong>Note:</strong> <?= nl2br(htmlspecialchars($t['note'],ENT_QUOTES,'UTF-8')) ?></p>
  <?php endif; ?>

  <table style="width:100%;border-collapse:collapse;margin-top:10px;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Product</th>
      <th style="text-align:right;border-bottom:1px solid #eee;padding:8px;">Qty</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $it): ?>
      <tr>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;"><?= htmlspecialchars(($it['product_code'] ?? '').' — '.($it['product_name'] ?? ''),ENT_QUOTES,'UTF-8') ?></td>
        <td style="padding:8px;border-bottom:1px solid #f2f2f4;text-align:right;"><?= (int)$it['qty'] ?></td>
      </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="2" style="padding:12px;">No lines.</td></tr><?php endif; ?>
    </tbody>
  </table>

  <p style="margin-top:10px;">
    <a href="<?= base_url('/transfers') ?>">Back</a> ·
    <a href="<?= base_url('/transfers/print?id='.(int)$t['id']) ?>">Print</a>
  </p>
</section>

----- END FILE: app/views/transfers/view.php -----

----- BEGIN FILE: app/views/user/profile.php -----
<?php
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>My Profile</h2>

  <?php if ($msg = flash_get('success')): ?>
    <div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;">
      <?= htmlspecialchars($msg, ENT_QUOTES, 'UTF-8') ?>
    </div>
  <?php endif; ?>

  <?php if ($err = flash_get('error')): ?>
    <div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;">
      <?= htmlspecialchars($err, ENT_QUOTES, 'UTF-8') ?>
    </div>
  <?php endif; ?>

  <h3>Change Password</h3>
  <form method="post" action="/profile/password" style="display:grid;gap:12px;max-width:420px;">
    <?= csrf_field() ?>
    <label>
      <div>Current password</div>
      <input type="password" name="current_password" required style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <label>
      <div>New password</div>
      <input type="password" name="new_password" required style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <label>
      <div>Confirm new password</div>
      <input type="password" name="new_password_confirm" required style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;">Update Password</button>
  </form>
</section>

----- END FILE: app/views/user/profile.php -----

----- BEGIN FILE: app/views/warehouses/form.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
?>
<section>
  <h2><?= $mode==='create'?'New Warehouse':'Edit Warehouse' ?></h2>

  <form method="post" action="<?= $mode==='create'?base_url('/warehouses'):base_url('/warehouses/update') ?>" style="display:grid;gap:12px;max-width:520px;">
    <?= csrf_field() ?>
    <?php if ($mode==='edit'): ?><input type="hidden" name="id" value="<?= (int)$item['id'] ?>"><?php endif; ?>

    <label><div>Code</div>
      <input type="text" name="code" required value="<?= htmlspecialchars($item['code'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <label><div>Name</div>
      <input type="text" name="name" required value="<?= htmlspecialchars($item['name'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>
    <label><div>Location (optional)</div>
      <input type="text" name="location" value="<?= htmlspecialchars($item['location'] ?? '', ENT_QUOTES, 'UTF-8') ?>" style="width:100%;padding:10px;border:1px solid #ddd;border-radius:8px;">
    </label>

    <div style="display:flex;gap:10px;">
      <button type="submit" style="padding:10px 14px;border:0;border-radius:10px;background:#111;color:#fff;cursor:pointer;"><?= $mode==='create'?'Create':'Save Changes' ?></button>
      <a href="<?= base_url('/warehouses') ?>" style="align-self:center;">Cancel</a>
    </div>
  </form>
  <?php if ($mode === 'edit'): ?>
  <?php
    $entity_type = 'warehouse';
    $entity_id   = (int)$item['id'];
    $notes       = $notes ?? [];
    include __DIR__ . '/../partials/notes.php';
  ?>
<?php endif; ?>
</section>

----- END FILE: app/views/warehouses/form.php -----

----- BEGIN FILE: app/views/warehouses/index.php -----
<?php
use function App\Core\base_url;
use function App\Core\csrf_field;
use function App\Core\flash_get;
?>
<section>
  <h2>Warehouses</h2>

  <?php if ($m = flash_get('success')): ?>
    <div style="background:#e7f8ee;border:1px solid #b9e7c9;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>
  <?php if ($m = flash_get('error')): ?>
    <div style="background:#ffe9e9;border:1px solid #ffb3b3;padding:10px;border-radius:8px;margin:10px 0;"><?= htmlspecialchars($m, ENT_QUOTES, 'UTF-8') ?></div>
  <?php endif; ?>

  <p><a href="<?= base_url('/warehouses/create') ?>">+ New Warehouse</a></p>

  <table style="width:100%;border-collapse:collapse;">
    <thead><tr>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Code</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Name</th>
      <th style="text-align:left;border-bottom:1px solid #eee;padding:8px;">Location</th>
      <th style="border-bottom:1px solid #eee;padding:8px;">Actions</th>
    </tr></thead>
    <tbody>
      <?php foreach ($items as $w): ?>
        <tr>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($w['code'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($w['name'], ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;"><?= htmlspecialchars($w['location'] ?? '', ENT_QUOTES, 'UTF-8') ?></td>
          <td style="border-bottom:1px solid #f2f2f4;padding:8px;">
            <a href="<?= base_url('/warehouses/edit?id='.(int)$w['id']) ?>">Edit</a> &nbsp;|&nbsp;
            <form method="post" action="<?= base_url('/warehouses/delete') ?>" style="display:inline" onsubmit="return confirm('Delete this warehouse?');">
              <?= csrf_field() ?>
              <input type="hidden" name="id" value="<?= (int)$w['id'] ?>">
              <button type="submit" style="background:none;border:none;color:#c00;cursor:pointer;">Delete</button>
            </form>
          </td>
        </tr>
      <?php endforeach; ?>
      <?php if (!$items): ?><tr><td colspan="4" style="padding:12px;">No warehouses yet.</td></tr><?php endif; ?>
    </tbody>
  </table>
</section>

----- END FILE: app/views/warehouses/index.php -----

----- BEGIN FILE: config/.env.example -----
APP_ENV=production
APP_DEBUG=false
APP_URL=https://sp.elmadeenaelmunawarah.com

DB_HOST=p3nlmysql13plsk.secureserver.net
DB_PORT=3306
DB_NAME=chatgpt2_mi
DB_USER=sp
DB_PASS=Mi@SP@123

----- END FILE: config/.env.example -----

----- BEGIN FILE: docs/PRD.md -----
# spare parts management – product requirements document (prd)

_Last updated: 2025-08-31 (Africa/Cairo)_

## 1) overview & goals
A lightweight, PHP/MySQL spare-parts management app for small teams, deployed on GoDaddy (Plesk Windows). The app covers sales (quotes → orders → invoices → customer payments) and purchasing (pos → purchase invoices → receipts/grn → supplier payments), with simple stock control, notes, and printable documents.

**Primary goals**
- Fast day-to-day operations for parts sales & purchasing
- Clear stock visibility per warehouse (on-hand vs reserved)
- Clean prints (A4) with optional public notes and logo
- Minimal clicks, simple UI, predictable workflows
- Bilingual (English - Arabic)

**Non-goals (for later)**
- Complex accounting, multi-currency, deep reporting, advanced permissions, EDI integrations

---

## 2) scope (current)

### 2.1 authentication & users
- Login/logout with session + CSRF protection
- Flash messages for user feedback
- (Optional) activity logging hooks

### 2.2 master data
- **clients/customers** (with optional notes)
- **suppliers** (with optional notes; computed **balance** optional)
- **products** (code, name, price, category, make, model, default warehouse; with notes)
- **categories** (with notes)
- **warehouses** (with notes)
- **makes/models** for product structuring

### 2.3 inventory model
- `product_stocks (product_id, warehouse_id, qty_on_hand, qty_reserved)`
- **reserved** increases from sales quotes; released upon edit/cancel/convert; validated against on-hand on conversion
- **on-hand** increases via purchasing receipts; decreases on sales fulfillment (via orders/invoices as implemented)
- Insufficient stock checks with clear error and no unintended data writes

### 2.4 sales flow (ar)
- **quotes**
  - add products, qty, auto unit price, line totals
  - prevent exceeding available stock on convert
  - public/private notes; public optional on print
  - print page without navbar; optional logo; “include public notes” checkbox
- **sales orders**
  - created from quote (“convert to order”)
  - view/print; totals
  - create **sales invoice** button
- **sales invoices**
  - items from order; view/print; totals/subtotal/tax
  - **customer payments (ar)**:
    - add/delete payments; cap to remaining; lock ui when fully paid
    - top-nav “payments” list (optional)
  - notes (public/private) and print flag for public notes

### 2.5 purchasing flow (ap)
- **suppliers** (with optional balance column)
- **purchase orders (po)**
  - draft → ordered → received → closed
  - view/print; notes; “create purchase invoice”
- **purchase invoices (pi)**
  - created from po; shows ordered/received/remaining
  - **receipts (grn)**
    - post multi-line receipts; auto-cap to remaining
    - increments `qty_on_hand` per (product, warehouse)
    - history table; delete line decrements stock
    - **print grn**
  - when fully received, po auto → `received`; separate action to `close`
  - **supplier payments (ap)**
    - payments table + add form; cap to remaining; lock when paid
    - central `/supplierpayments` list
- **supplier balances (optional)**
  - suppliers index shows live balance = sum(pi.total) − sum(ap.amount)

### 2.6 notes system (shared)
- Entities: clients, categories, warehouses, products, quotes, sales orders, sales invoices, purchase orders, purchase invoices
- Multiple notes per entity; each stamped with creator + datetime
- **public vs private**; public can be included on printouts via checkbox
- UX: inline edit (textarea toggle), confirm before delete, pagination for long lists
- Safe formatting: newlines + links only

### 2.7 printing
- Clean A4 template; navbar hidden on print
- Optional logo at `/public/img/logo.png`
- “Include public notes” checkbox on print pages

---

## 3) non-functional requirements
- **stack**: php (mvc, custom), mysql, html/css/js
- **hosting**: godaddy plesk windows
- **coding**: all filenames/paths **lowercase**; controller/model/view separation
- **security**: csrf tokens, auth checks, basic input sanitation; avoid exposing secrets
- **performance**: simple sql indexes on foreign keys; pagination on heavy lists
- **ops**: health check `/health` (ok), db ping utility (guarded by key), opcaching reset helper (temporary use only)

---

## 4) database (current high-level)
- `users`
- `clients`, `suppliers`
- `categories`, `makes`, `models`
- `warehouses`
- `products` (with make/model/category refs)
- `product_stocks` (composite key product_id+warehouse_id; `qty_on_hand`, `qty_reserved`)
- **sales**: `quotes`, `quote_items`, `sales_orders`, `sales_order_items`,
  `sales_invoices`, `sales_invoice_items`, `payments` (customer payments)
- **purchasing**: `purchase_orders`, `purchase_order_items`,
  `purchase_invoices` (with `paid_amount`, `status`), `receipts`,
  `supplier_payments` (ap)
- `notes` (entity_type, entity_id, is_public, body, created_by, created_at)
- (optional) `activity_log`

> Exact create/alter statements live in previous migrations you ran; new columns: `purchase_invoices.paid_amount`, `purchase_invoices.status`; new table: `supplier_payments`.

---

## 5) routes (main)
- **auth**: `/login`, `/logout`
- **dashboard/home**: `/`
- **health**: `/health`, `/db_ping.php?key=…`
- **sales**: `/quotes`, `/orders`, `/invoices`, `/payments`
- **purchasing**: `/purchaseorders`, `/purchaseinvoices`, `/receipts`
- **prints**: `/quotes/print`, `/orders/print`, `/invoices/print`,
  `/purchaseinvoices/print`, `/receipts/print`
- **admin/master**: `/clients`, `/suppliers`, `/products`, `/categories`, `/warehouses`, `/makes`, `/models`

---

## 6) out of scope / backlog
- Returns & credit/debit notes (sales/purchase)
- Stock adjustments & transfers
- Multi-currency, taxes per line, discounts
- Role-based permissions
- Imports/exports, CSV, bulk updates
- Reports (aging, turnover, low-stock alerts)
- Email/pdf sending, templates
- Attachments on entities
- Barcode/QR support, scanners

---

## 7) acceptance criteria (slice highlights)
- Can create a Quote, convert to Order, create Invoice, register Customer Payments until status=paid; prints cleanly with optional public notes and logo.
- Can create PO, PI from PO, receive items (no over-receipt), stocks increase, GRN prints, PO auto→received when complete, can Close PO; can add Supplier Payments until status=paid; optional supplier balance visible.
- Notes add/edit/delete; public notes appear on prints only when opt-in.

----- END FILE: docs/PRD.md -----

----- BEGIN FILE: docs/status_30Aug2025.md -----
# Spare Parts Management — PRD vs. Current Status

_Last updated: 2025-08-30_

> Snapshot of what the original PRD set out to build vs. what’s live now, what changed, and what’s next.  
> Tech: PHP + CSS + JS (GoDaddy Plesk Windows), MySQL. All repo paths/filenames are lowercase.

---

## At-a-glance

| Area | PRD Target | Current Status | Notes |
|---|---|---|---|
| App bootstrap & routing | Simple MVC, router, views, layout, health | **Done** | `/health` OK; `db_ping.php` diagnostics; layout & helpers wired. |
| Auth & sessions | Login/logout, session flash | **Done** | Flash messages now pop once (no sticky banners). |
| Entities | Categories, Makes, Models, Warehouses, Products, Customers (CRUD) | **Done** | Forms + lists; warehouses/products carry stock data. |
| Stock tracking | Per product/warehouse: on-hand & reserved | **Done (v1)** | Reservation on quote; deduction on order; validations prevent over-reserve. |
| Quotes | Create, edit items, tax, totals, status; print | **Done (v1.2)** | Auto unit price; line totals; live summary; statuses `sent/ordered`; **Print** page with optional public notes. |
| Sales Orders | Convert from quote, deduct stock, list/view/print | **Done (v1)** | Transactional conversion releases reserved & deducts on-hand; **Print** with notes toggle. |
| Global Notes | Public/Private notes with creator & timestamp | **Done (v1.1)** | On Quotes & Orders (show), Customers/Categories/Warehouses/Products (edit). Inline edit, confirm delete, paging, safe formatting (links + newlines). |
| Printables | Clean A4-friendly HTML | **Done** | Rendered via `view_raw()` (no app navigation). |
| Sales Invoices | SO → Invoice | **Not started** | Planned next milestone. |
| Purchasing | Suppliers, POs, PIs; stock increase on receipts | **Not started** | Design pending. |
| Permissions/roles | Admin vs. standard | **Not started** | Especially for notes edit/delete & admin tools. |
| Stock ledger/audit | Movement log | **Planned** | Trace for reserve/consume/adjustments. |

---

## What’s shipped

- **Bootstrap MVC & Health**
  - Router, controllers, views, layout, helpers.
  - `/health` and `db_ping.php` diagnostics.

- **Authentication**
  - Login/logout; session flash messages (one-time).

- **Core entities**
  - **Categories, Makes, Models, Warehouses, Products, Customers** (CRUD).
  - Product stock per warehouse (`qty_on_hand`, `qty_reserved`).

- **Quotes**
  - Multi-row items; auto-fill **unit price** from product; **line totals** + live page totals.
  - Status flow: `sent → ordered`.
  - **Reservation** increases `qty_reserved` on save with **pre-validation**: cannot exceed available (on-hand − reserved).
  - **Print**: `/quotes/print?id=…` with “Include public notes”.

- **Sales Orders**
  - **Convert** Quote → SO: transactionally **release reserved** and **deduct on-hand**.
  - List & detail with lines and totals.
  - **Print**: `/orders/print?id=…` with notes toggle.

- **Notes system (Public/Private)**
  - Table `notes(entity_type, entity_id, is_public, body, created_by, created_at)`.
  - Inline **edit-in-place**, **confirm delete**, **pagination** after 10.
  - Safe formatting: newlines + clickable links; no HTML injection.
  - Integrated on: **Quotes, Sales Orders** (show), **Customers, Categories, Warehouses, Products** (edit).

- **Print UX**
  - Uses `Controller::view_raw()` to bypass layout/navigation for clean output.

---

## Differences vs. PRD & clarifications

- **Reservations & Integrity**
  - PRD assumed quotes reserve stock. Implemented with **pre-validation** to prevent saving impossible reservations (added after testing).
  - Recovery SQL to recompute `qty_reserved` from all `sent` quotes (for data repair).

- **Notes**
  - PRD required Public/Private + stamping—**delivered**, plus UX polish (inline edit, paging).
  - Public notes are **optional** on printouts via checkbox; ready for Invoices.

- **Routes naming**
  - Avoided collision with base `Controller::view()` by standardizing **`show`** for read actions.

- **Print pages**
  - Rendered raw (no layout) for print-ready documents.

---

## Database changes (since baseline)

- **New**
  - `sales_orders`, `sales_order_items`
  - `notes`
- **Existing utilized**
  - `quotes`, `quote_items`, `product_stocks` (`qty_on_hand`, `qty_reserved`)
- **Helpers**
  - Product stock helpers to reserve/consume within transactions.

---

## Validation & error handling

- Quote create aggregates duplicate product/warehouse rows and validates requested totals vs. **available** before inserts.
- Flash messages are one-time (pop on read).
- Hardened `show()` handlers for missing entities (no redirect loops).

---

## Open items (next milestones)

1. **Sales Invoices (SO → Invoice)**
   - Tables: `invoices`, `invoice_items`, status & payment tracking.
   - Print page + public notes.

2. **Purchasing flow**
   - Suppliers, **Purchase Orders** → **Purchase Invoices**, receiving increases stock.
   - Link receipts to warehouses; support partial receipts.

3. **Permissions**
   - Only creator/admin can edit/delete notes; role-based gates for stock & accounting.

4. **Stock ledger**
   - `stock_moves` to log: quote reserve/release, order consume, manual adjustments, receipts.

5. **Settings**
   - Company profile (logo/address), default tax rate, numbering formats.

6. **Polish**
   - Cancel Order (optional restock), Edit Quote with revalidation, printable headers/footers with page numbers.

---

## Representative PRs / branches

- `feature/bootstrap-mvc` — Bootstrap, router, health, layout  
- `feature/auth-logging` — Auth & session flashes  
- `feature/users-and-categories` — Entities baseline  
- `feature/makes-models` — Additional entities  
- `feature/quotes` — Quotes CRUD, pricing, totals, reservation  
- `feature/orders` — Convert to Sales Order, stock deduction  
- `feature/notes` — Global notes system, inline edit, print integration  
- `feature/print-clean` — `view_raw()` & clean print pages with notes toggle

*(Names condensed for readability; see repo history for exact PRs and commits.)*

---

## Progress gauge

- Core platform & entities: **100%**  
- Quotes: **100%** (v1.2)  
- Orders: **100%** (v1)  
- Global notes & print integration: **100%**  
- Invoices (Sales): **0%**  
- Purchasing (PO/PI): **0%**  
- Permissions & ledger: **0–10%**  

**Overall:** ~**55–60%** of PRD scope complete; sales front-half is production-ready.

---

### How to regenerate this file
When major milestones ship, update the “Last updated” date and the At-a-glance table. Keep this file in **`docs/status.md`** (lowercase) so links remain stable.

----- END FILE: docs/status_30Aug2025.md -----

----- BEGIN FILE: docs/status_31Aug2025.md -----
# project status – spare parts management

_As of: 2025-08-31 (Africa/Cairo)_

## 1) executive summary
Core sales and purchasing flows are live and tested. Printing, notes, stock changes, and both AR (customer) & AP (supplier) payments are in place. System is stable on GoDaddy (Plesk Windows).

## 2) what’s done (✅)
- MVC bootstrap, auth, csrf, flash
- Master data: clients, suppliers, products, categories, warehouses, makes, models
- Inventory engine: product_stocks (on-hand & reserved)
- **Sales (AR)**:
  - Quotes → Orders → Invoices
  - Insufficient stock guard on convert
  - Customer payments with cap + lock on paid
  - Prints (quote/order/invoice) with optional logo & public notes
- **Notes**: public/private; inline edit; delete confirm; pagination; safe formatting; prints opt-in
- **Purchasing (AP)**:
  - PO lifecycle (draft/ordered/received/closed)
  - PI from PO; receive (auto-cap), stock increment; receipts history & delete; GRN printing
  - Supplier payments with cap + lock on paid
  - Optional supplier balance on suppliers index
- Print polish: hide navbar on print; A4 layout; logo hook
- Health checks: `/health` (OK), db ping helper

## 3) environment links
- **app**: `https://sp.elmadeenaelmunawarah.com/`
- **health**: `/health` → “OK”
- **prints**: add `?include_notes=1` where supported
- **logo path**: `/public/img/logo.png`

## 4) database state (delta highlights)
- Added `purchase_invoices.paid_amount (decimal)`, `purchase_invoices.status (enum)`
- Created `supplier_payments` (ap)
- Existing: `receipts`, `purchase_order_items`, etc.

## 5) open issues / risks (🟨)
- No roles/permissions yet (all authenticated users are equivalent)
- No returns/credit notes
- No stock transfers/adjustments UI
- No formal migrations framework (manual SQL used)

## 6) next up (🛠️)
**High-value next tasks**
1. **Returns & adjustments**
   - Sales returns / credit notes (restore stock)
   - Purchase returns / debit notes (reduce stock)
   - Simple stock adjustments (count variances)
2. **Reports**
   - Low stock, aging (AR/AP), movement per product
3. **Permissions**
   - Basic roles (admin vs clerk)
4. **Exports**
   - CSV export of invoices, payments, stock
5. **Quality**
   - Guard rails & more tests (edge cases; pagination everywhere)

## 7) test checkpoints (recent)
- PI receive: over-receipt auto-capped; stock increments; GRN prints ✔
- PO auto→received when fully received; manual close ✔
- Supplier payments: cap + lock on paid; central list ✔
- Sales invoices: customer payments work; UI hides on paid ✔
- Quote convert guard: prevents insufficient stock; no bad writes ✔

## 8) change log (recent highlights)
- feat(ap): supplier payments + supplier balance (optional)
- feat(purchasing): receipts history, “receive all”, grn print, close po
- feat(print): logo + opt-in public notes, navbar hidden on print
- feat(notes): public/private, inline edit, pagination, safe rendering
- fix(stock): composite key updates for product_stocks

----- END FILE: docs/status_31Aug2025.md -----

----- BEGIN FILE: public/db_ping.php -----
<?php declare(strict_types=1);
// TEMPORARY DIAGNOSTIC. DELETE AFTER USE.
// Visit as: /db_ping.php?key=letmein123  (change the key below)

$key = 'letmein123';
if (!isset($_GET['key']) || $_GET['key'] !== $key) {
    http_response_code(403);
    exit('Forbidden');
}

require __DIR__ . '/../app/core/bootstrap.php';

use App\Core\DB;

header('Content-Type: text/plain; charset=utf-8');

try {
    $pdo = DB::conn();
    echo "Connected.\n";
    $val = $pdo->query('SELECT 1')->fetchColumn();
    echo "SELECT 1 => {$val}\n";
} catch (Throwable $e) {
    echo "ERROR: " . $e->getMessage() . "\n";
}

----- END FILE: public/db_ping.php -----

----- BEGIN FILE: public/img/logo.png (binary skipped) -----
----- END FILE: public/img/logo.png -----

----- BEGIN FILE: public/index.php -----
<?php declare(strict_types=1);

require __DIR__ . '/../app/core/bootstrap.php';

use App\Core\Router;

$router = new Router();

// home + health
$router->get('/', 'homecontroller@index');
$router->get('/health', function () {
    header('Content-Type: text/plain; charset=utf-8');
    echo 'OK';
});

// auth
$router->get('/login', 'authcontroller@loginform');
$router->post('/login', 'authcontroller@login');
$router->post('/logout', 'authcontroller@logout');

// user profile
$router->get('/profile', 'usercontroller@profile');
$router->post('/profile/password', 'usercontroller@changepassword');

// categories
$router->get('/categories', 'categoriescontroller@index');
$router->get('/categories/create', 'categoriescontroller@create');
$router->post('/categories', 'categoriescontroller@store');
$router->get('/categories/edit', 'categoriescontroller@edit');
$router->post('/categories/update', 'categoriescontroller@update');
$router->post('/categories/delete', 'categoriescontroller@destroy');

// makes
$router->get('/makes', 'makescontroller@index');
$router->get('/makes/create', 'makescontroller@create');
$router->post('/makes', 'makescontroller@store');
$router->get('/makes/edit', 'makescontroller@edit');
$router->post('/makes/update', 'makescontroller@update');
$router->post('/makes/delete', 'makescontroller@destroy');

// models
$router->get('/models', 'modelscontroller@index');
$router->get('/models/create', 'modelscontroller@create');
$router->post('/models', 'modelscontroller@store');
$router->get('/models/edit', 'modelscontroller@edit');
$router->post('/models/update', 'modelscontroller@update');
$router->post('/models/delete', 'modelscontroller@destroy');

// warehouses
$router->get('/warehouses', 'warehousescontroller@index');
$router->get('/warehouses/create', 'warehousescontroller@create');
$router->post('/warehouses', 'warehousescontroller@store');
$router->get('/warehouses/edit', 'warehousescontroller@edit');
$router->post('/warehouses/update', 'warehousescontroller@update');
$router->post('/warehouses/delete', 'warehousescontroller@destroy');

// products
$router->get('/products', 'productscontroller@index');
$router->get('/products/create', 'productscontroller@create');
$router->post('/products', 'productscontroller@store');
$router->get('/products/edit', 'productscontroller@edit');
$router->post('/products/update', 'productscontroller@update');
$router->post('/products/delete', 'productscontroller@destroy');
$router->get('/products/stock', 'productscontroller@stock');
$router->post('/products/stock', 'productscontroller@savestock');

// customers
$router->get('/customers', 'customerscontroller@index');
$router->get('/customers/create', 'customerscontroller@create');
$router->post('/customers', 'customerscontroller@store');
$router->get('/customers/edit', 'customerscontroller@edit');
$router->post('/customers/update', 'customerscontroller@update');
$router->post('/customers/delete', 'customerscontroller@destroy');
$router->get('/customers/show', 'customerscontroller@show'); 
$router->get('/customers/statement', 'customerscontroller@statement');

// quotes
$router->get('/quotes', 'quotescontroller@index');
$router->get('/quotes/create', 'quotescontroller@create');
$router->post('/quotes', 'quotescontroller@store');
$router->get('/quotes/show', 'quotescontroller@show');
$router->post('/quotes/cancel', 'quotescontroller@cancel');
$router->post('/quotes/expire', 'quotescontroller@expire');
$router->post('/quotes/convert', 'quotescontroller@convert');

// orders
$router->get('/orders', 'orderscontroller@index');
$router->get('/orders/show', 'orderscontroller@show');

// notes
$router->post('/notes', 'notescontroller@store');
$router->post('/notes/update', 'notescontroller@update');
$router->post('/notes/delete', 'notescontroller@destroy');

// printables
$router->get('/quotes/print', 'quotescontroller@printpage');
$router->get('/orders/print', 'orderscontroller@printpage');

// invoices
$router->get('/invoices', 'invoicescontroller@index');
$router->get('/invoices/show', 'invoicescontroller@show');
$router->get('/invoices/print', 'invoicescontroller@printpage');
$router->post('/invoices/create-from-order', 'invoicescontroller@createfromorder');

// payments (invoice)
$router->get('/payments', 'paymentscontroller@index');
$router->get('/payments/create', 'paymentscontroller@create');
$router->post('/payments', 'paymentscontroller@store');
$router->post('/payments/delete', 'paymentscontroller@destroy');

// suppliers
$router->get('/suppliers', 'supplierscontroller@index');
$router->get('/suppliers/create', 'supplierscontroller@create');
$router->post('/suppliers', 'supplierscontroller@store');
$router->get('/suppliers/edit', 'supplierscontroller@edit');
$router->post('/suppliers/update', 'supplierscontroller@update');
$router->post('/suppliers/delete', 'supplierscontroller@destroy');
$router->get('/suppliers/show', 'supplierscontroller@show'); 
$router->get('/suppliers/statement', 'supplierscontroller@statement');

// purchase orders
$router->get('/purchaseorders', 'purchaseorderscontroller@index');
$router->get('/purchaseorders/create', 'purchaseorderscontroller@create');
$router->post('/purchaseorders', 'purchaseorderscontroller@store');
$router->get('/purchaseorders/edit', 'purchaseorderscontroller@edit');
$router->post('/purchaseorders/update', 'purchaseorderscontroller@update');
$router->get('/purchaseorders/show', 'purchaseorderscontroller@show');
$router->post('/purchaseorders/mark-ordered', 'purchaseorderscontroller@markordered');
$router->get('/purchaseorders/print', 'purchaseorderscontroller@printpage');
$router->post('/purchaseorders/close', 'purchaseorderscontroller@markclosed');

// purchase invoices
$router->get('/purchaseinvoices', 'purchaseinvoicescontroller@index');
$router->get('/purchaseinvoices/show', 'purchaseinvoicescontroller@show');
$router->get('/purchaseinvoices/print', 'purchaseinvoicescontroller@printpage');
$router->post('/purchaseinvoices/create-from-po', 'purchaseinvoicescontroller@createfrompo');

// receipts (from purchase invoices)
$router->post('/receipts', 'receiptscontroller@store');
$router->post('/receipts/delete', 'receiptscontroller@destroy');
$router->get('/receipts/print', 'receiptscontroller@printgrn');

// supplier payments (AP)
$router->get('/supplierpayments', 'supplierpaymentscontroller@index');
$router->post('/supplierpayments', 'supplierpaymentscontroller@store');
$router->post('/supplierpayments/delete', 'supplierpaymentscontroller@destroy');

// sales returns (credit notes)
$router->post('/salesreturns', 'salesreturnscontroller@store');
$router->get('/salesreturns/print', 'salesreturnscontroller@printnote');

// purchase returns (debit notes)
$router->post('/purchasereturns', 'purchasereturnscontroller@store');
$router->get('/purchasereturns/print', 'purchasereturnscontroller@printnote');

// reports
$router->get('/reports/ap-aging', 'reportscontroller@apaging');
$router->get('/reports/ar-aging', 'reportscontroller@araging');
$router->get('/reports/inventory-valuation', 'reportscontroller@inventoryvaluation');

// stock transfers
$router->get('/transfers', 'transferscontroller@index');
$router->get('/transfers/create', 'transferscontroller@create');
$router->post('/transfers', 'transferscontroller@store');
$router->get('/transfers/show', 'transferscontroller@show');
$router->get('/transfers/print', 'transferscontroller@printnote');

// stock adjustments
$router->get('/adjustments', 'adjustmentscontroller@index');
$router->get('/adjustments/create', 'adjustmentscontroller@create');
$router->post('/adjustments', 'adjustmentscontroller@store');
$router->get('/adjustments/show', 'adjustmentscontroller@show');
$router->get('/adjustments/print', 'adjustmentscontroller@printnote');

$router->dispatch();

----- END FILE: public/index.php -----

----- BEGIN FILE: public/web.config -----
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <system.webServer>
    <rewrite>
      <rules>
        <rule name="FrontController" stopProcessing="true">
          <match url=".*" />
          <conditions logicalGrouping="MatchAll">
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
          </conditions>
          <action type="Rewrite" url="index.php" appendQueryString="true" />
        </rule>
      </rules>
    </rewrite>

    <!-- security headers (baseline) -->
    <httpProtocol>
      <customHeaders>
        <add name="X-Content-Type-Options" value="nosniff" />
        <add name="X-Frame-Options" value="SAMEORIGIN" />
        <add name="Referrer-Policy" value="no-referrer-when-downgrade" />
      </customHeaders>
    </httpProtocol>
  </system.webServer>
</configuration>

----- END FILE: public/web.config -----

----- BEGIN FILE: readme.md -----
# spare parts app (php/mysql) — bootstrap

## requirements
- php 8.1+ (plesk windows, iis)
- mysql 5.7+/8.0
- document root points to `/public`

## first run (dev)
1. copy `config/.env.example` to `config/.env` and set credentials.
2. deploy via plesk with document root `/public`.
3. check `/health` → should print `OK`.

## structure
- /app/core        core classes (router, controller, db, env)
- /app/controllers controllers (lowercase filenames)
- /app/models      models (later)
- /app/views       view templates, layouts
- /config          config files; `.env` is ignored by git
- /public          public web root (i i s); `web.config` routes everything to index.php
- /storage         logs/uploads; logs ignored by git

## dev flow
- create feature branches
- open a pull request
- share pr link here for review

----- END FILE: readme.md -----

----- BEGIN FILE: storage/logs/.gitkeep -----


----- END FILE: storage/logs/.gitkeep -----

